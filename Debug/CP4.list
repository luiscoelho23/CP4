
CP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c0  080065c0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c8  080065c8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080065d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200000b0  08006680  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08006680  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153c7  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b5  00000000  00000000  000354a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00037b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029296  00000000  00000000  00039698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001212c  00000000  00000000  0006292e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbcb0  00000000  00000000  00074a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017070a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004174  00000000  00000000  00170760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b0 	.word	0x200000b0
 800021c:	00000000 	.word	0x00000000
 8000220:	080061a4 	.word	0x080061a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b4 	.word	0x200000b4
 800023c:	080061a4 	.word	0x080061a4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <check_command>:
int pos_m;

struct sp_config_t sp_config = {1, "s"};

unsigned char check_command(char* message)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "STW", 3)))
 8000614:	2203      	movs	r2, #3
 8000616:	493e      	ldr	r1, [pc, #248]	; (8000710 <check_command+0x108>)
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f005 f803 	bl	8005624 <strncmp>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <check_command+0x22>
		cmd = STW;
 8000624:	230a      	movs	r3, #10
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	e06d      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "FSW", 3)))
 800062a:	2203      	movs	r2, #3
 800062c:	4939      	ldr	r1, [pc, #228]	; (8000714 <check_command+0x10c>)
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f004 fff8 	bl	8005624 <strncmp>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <check_command+0x38>
		cmd = FSW;
 800063a:	2308      	movs	r3, #8
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e062      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "KP", 2)))
 8000640:	2202      	movs	r2, #2
 8000642:	4935      	ldr	r1, [pc, #212]	; (8000718 <check_command+0x110>)
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f004 ffed 	bl	8005624 <strncmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <check_command+0x4e>
        cmd = KP;
 8000650:	230b      	movs	r3, #11
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	e057      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "UN", 2)))
 8000656:	2202      	movs	r2, #2
 8000658:	4930      	ldr	r1, [pc, #192]	; (800071c <check_command+0x114>)
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f004 ffe2 	bl	8005624 <strncmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d102      	bne.n	800066c <check_command+0x64>
        cmd = UN;
 8000666:	2303      	movs	r3, #3
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e04c      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "EN", 2)))
 800066c:	2202      	movs	r2, #2
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <check_command+0x118>)
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f004 ffd7 	bl	8005624 <strncmp>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <check_command+0x7a>
        cmd = EN;
 800067c:	2302      	movs	r3, #2
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e041      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "CS", 2)))
 8000682:	2202      	movs	r2, #2
 8000684:	4927      	ldr	r1, [pc, #156]	; (8000724 <check_command+0x11c>)
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f004 ffcc 	bl	8005624 <strncmp>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d102      	bne.n	8000698 <check_command+0x90>
        cmd = CS;
 8000692:	2301      	movs	r3, #1
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e036      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "VR", 2)))
 8000698:	2202      	movs	r2, #2
 800069a:	4923      	ldr	r1, [pc, #140]	; (8000728 <check_command+0x120>)
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f004 ffc1 	bl	8005624 <strncmp>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <check_command+0xa6>
        cmd = VR;
 80006a8:	2304      	movs	r3, #4
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	e02b      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "HW", 2)))
 80006ae:	2202      	movs	r2, #2
 80006b0:	491e      	ldr	r1, [pc, #120]	; (800072c <check_command+0x124>)
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f004 ffb6 	bl	8005624 <strncmp>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <check_command+0xbc>
		cmd = HW;
 80006be:	2307      	movs	r3, #7
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	e020      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "SW", 2)))
 80006c4:	2202      	movs	r2, #2
 80006c6:	491a      	ldr	r1, [pc, #104]	; (8000730 <check_command+0x128>)
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f004 ffab 	bl	8005624 <strncmp>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <check_command+0xd2>
		cmd = SW;
 80006d4:	2309      	movs	r3, #9
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e015      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "/", 1)))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <check_command+0x12c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <check_command+0xe6>
		cmd = INC;
 80006e8:	2305      	movs	r3, #5
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e00b      	b.n	8000706 <check_command+0xfe>
    else if((!strncmp((char*) message, "\\", 1)))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <check_command+0x130>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <check_command+0xfa>
		cmd = DEC;
 80006fc:	2306      	movs	r3, #6
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e001      	b.n	8000706 <check_command+0xfe>
    else
    	cmd = INV;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]

    return cmd;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	080061bc 	.word	0x080061bc
 8000714:	080061c0 	.word	0x080061c0
 8000718:	080061c4 	.word	0x080061c4
 800071c:	080061c8 	.word	0x080061c8
 8000720:	080061cc 	.word	0x080061cc
 8000724:	080061d0 	.word	0x080061d0
 8000728:	080061d4 	.word	0x080061d4
 800072c:	080061d8 	.word	0x080061d8
 8000730:	080061dc 	.word	0x080061dc
 8000734:	080061e0 	.word	0x080061e0
 8000738:	080061e4 	.word	0x080061e4

0800073c <proc_inv_cmd>:
		proc_kd_cmd,
		proc_ki_cmd
};

void proc_inv_cmd(char* message)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <proc_inv_cmd+0x18>)
 8000746:	f000 ff31 	bl	80015ac <send_UART>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	080061e8 	.word	0x080061e8

08000758 <proc_cs_cmd>:

void proc_cs_cmd(char* message)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Control System instruction argument values.");
	}
	else
		send_UART("Invalid Control System instruction syntax.");
	*/
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	int val;

	if(sscanf((char*) message, "EN %d", &val) == 1)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	461a      	mov	r2, r3
 800077a:	491e      	ldr	r1, [pc, #120]	; (80007f4 <proc_en_cmd+0x88>)
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f004 ff1b 	bl	80055b8 <siscanf>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d12d      	bne.n	80007e4 <proc_en_cmd+0x78>
	{
		if(val == 0 || val == 1)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <proc_en_cmd+0x28>
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d123      	bne.n	80007dc <proc_en_cmd+0x70>
		{
			if(val)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d012      	beq.n	80007c0 <proc_en_cmd+0x54>
			{
				MY_TIM3_Init(sp_config);
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <proc_en_cmd+0x8c>)
 800079c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007a0:	f000 fd90 	bl	80012c4 <MY_TIM3_Init>

				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80007a4:	210c      	movs	r1, #12
 80007a6:	4815      	ldr	r0, [pc, #84]	; (80007fc <proc_en_cmd+0x90>)
 80007a8:	f002 fdc0 	bl	800332c <HAL_TIM_PWM_Start>
				HAL_TIM_Base_Start_IT(&htim3);
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <proc_en_cmd+0x94>)
 80007ae:	f002 fcb5 	bl	800311c <HAL_TIM_Base_Start_IT>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f001 f93f 	bl	8001a36 <HAL_NVIC_EnableIRQ>

				send_UART("System enabled with success.");
 80007b8:	4812      	ldr	r0, [pc, #72]	; (8000804 <proc_en_cmd+0x98>)
 80007ba:	f000 fef7 	bl	80015ac <send_UART>
			if(val)
 80007be:	e015      	b.n	80007ec <proc_en_cmd+0x80>
			}
			else
			{
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80007c0:	210c      	movs	r1, #12
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <proc_en_cmd+0x90>)
 80007c4:	f002 feac 	bl	8003520 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim3);
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <proc_en_cmd+0x94>)
 80007ca:	f002 fd1f 	bl	800320c <HAL_TIM_Base_Stop_IT>
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80007ce:	2028      	movs	r0, #40	; 0x28
 80007d0:	f001 f93f 	bl	8001a52 <HAL_NVIC_DisableIRQ>

				send_UART("System disabled with success.");
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <proc_en_cmd+0x9c>)
 80007d6:	f000 fee9 	bl	80015ac <send_UART>
			if(val)
 80007da:	e007      	b.n	80007ec <proc_en_cmd+0x80>
			}
		}
		else
			send_UART("Invalid Enable instruction argument values.");
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <proc_en_cmd+0xa0>)
 80007de:	f000 fee5 	bl	80015ac <send_UART>
	}
	else
		send_UART("Invalid Enable instruction syntax.");
}
 80007e2:	e003      	b.n	80007ec <proc_en_cmd+0x80>
		send_UART("Invalid Enable instruction syntax.");
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <proc_en_cmd+0xa4>)
 80007e6:	f000 fee1 	bl	80015ac <send_UART>
}
 80007ea:	e7ff      	b.n	80007ec <proc_en_cmd+0x80>
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08006210 	.word	0x08006210
 80007f8:	20000038 	.word	0x20000038
 80007fc:	2000037c 	.word	0x2000037c
 8000800:	20000330 	.word	0x20000330
 8000804:	08006218 	.word	0x08006218
 8000808:	08006238 	.word	0x08006238
 800080c:	08006258 	.word	0x08006258
 8000810:	08006284 	.word	0x08006284

08000814 <proc_un_cmd>:


void proc_un_cmd(char* message)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	}
	else
		send_UART("Invalid Normalized Voltage instruction syntax.");

	*/
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <proc_vr_cmd>:


void proc_vr_cmd(char* message)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Reference Speed instruction argument values.");
	}
	else
		send_UART("Invalid Reference Speed instruction syntax.");
	*/
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <proc_inc_cmd>:

void proc_inc_cmd(char* message)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
	}

	send_UART(message);
	*/
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
	}

	send_UART(message);
	*/
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <proc_hw_cmd>:

void proc_hw_cmd(char* message)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "HW %s %d", timeunit, &unit) == 2)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	f107 0208 	add.w	r2, r7, #8
 8000874:	491c      	ldr	r1, [pc, #112]	; (80008e8 <proc_hw_cmd+0x84>)
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f004 fe9e 	bl	80055b8 <siscanf>
 800087c:	4603      	mov	r3, r0
 800087e:	2b02      	cmp	r3, #2
 8000880:	d12b      	bne.n	80008da <proc_hw_cmd+0x76>
	{
		if(strcmp(timeunit, "ms") == 0 || strcmp(timeunit, "s") == 0 || strcmp(timeunit, "us") == 0)
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4919      	ldr	r1, [pc, #100]	; (80008ec <proc_hw_cmd+0x88>)
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fcd9 	bl	8000240 <strcmp>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d011      	beq.n	80008b8 <proc_hw_cmd+0x54>
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4915      	ldr	r1, [pc, #84]	; (80008f0 <proc_hw_cmd+0x8c>)
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fcd0 	bl	8000240 <strcmp>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d008      	beq.n	80008b8 <proc_hw_cmd+0x54>
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4912      	ldr	r1, [pc, #72]	; (80008f4 <proc_hw_cmd+0x90>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fcc7 	bl	8000240 <strcmp>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10c      	bne.n	80008d2 <proc_hw_cmd+0x6e>
		{
			strcpy(sp_config.timeunit, timeunit);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <proc_hw_cmd+0x94>)
 80008c0:	f004 fea8 	bl	8005614 <strcpy>
			sp_config.unit = unit;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <proc_hw_cmd+0x98>)
 80008c8:	6013      	str	r3, [r2, #0]
			send_UART("Sampling timeunit and units changed with success.");
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <proc_hw_cmd+0x9c>)
 80008cc:	f000 fe6e 	bl	80015ac <send_UART>
		else
			send_UART("Invalid Sample Period instruction argument values.");
	}
	else
		send_UART("Invalid Sample Period instruction syntax.");
}
 80008d0:	e006      	b.n	80008e0 <proc_hw_cmd+0x7c>
			send_UART("Invalid Sample Period instruction argument values.");
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <proc_hw_cmd+0xa0>)
 80008d4:	f000 fe6a 	bl	80015ac <send_UART>
}
 80008d8:	e002      	b.n	80008e0 <proc_hw_cmd+0x7c>
		send_UART("Invalid Sample Period instruction syntax.");
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <proc_hw_cmd+0xa4>)
 80008dc:	f000 fe66 	bl	80015ac <send_UART>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	080062a8 	.word	0x080062a8
 80008ec:	080062b4 	.word	0x080062b4
 80008f0:	080062b8 	.word	0x080062b8
 80008f4:	080062bc 	.word	0x080062bc
 80008f8:	2000003c 	.word	0x2000003c
 80008fc:	20000038 	.word	0x20000038
 8000900:	080062c0 	.word	0x080062c0
 8000904:	080062f4 	.word	0x080062f4
 8000908:	08006328 	.word	0x08006328

0800090c <proc_fsw_cmd>:

void proc_fsw_cmd(char* message)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
				send_UART("Invalid FSW instruction argument values.");
		}
		else
			send_UART("Invalid FSW instruction syntax.");
	*/
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <proc_sw_cmd>:

void proc_sw_cmd(char* message)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
	else
		send_UART("Invalid Sample instruction syntax.");
	*/
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <proc_stw_cmd>:

void proc_stw_cmd(char* message)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
		send_UART("Sampling Stopped.");
	}
	else
		send_UART("Invalid Stop Sampling instruction syntax.");
	*/
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <proc_kp_cmd>:

void proc_kp_cmd(char* message)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	int signval;

	if(sscanf((char*) message, "KP %d", &signval) == 1)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	461a      	mov	r2, r3
 8000956:	490e      	ldr	r1, [pc, #56]	; (8000990 <proc_kp_cmd+0x48>)
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f004 fe2d 	bl	80055b8 <siscanf>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10e      	bne.n	8000982 <proc_kp_cmd+0x3a>
	{
		if(signval >= -200 && signval <= 200)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800096a:	db06      	blt.n	800097a <proc_kp_cmd+0x32>
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2bc8      	cmp	r3, #200	; 0xc8
 8000970:	dc03      	bgt.n	800097a <proc_kp_cmd+0x32>
		{
			Kp = signval;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <proc_kp_cmd+0x4c>)
 8000976:	6013      	str	r3, [r2, #0]
		else
			send_UART("Invalid KP value.");
	}
	else
		send_UART("Invalid KP instruction syntax.");
}
 8000978:	e006      	b.n	8000988 <proc_kp_cmd+0x40>
			send_UART("Invalid KP value.");
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <proc_kp_cmd+0x50>)
 800097c:	f000 fe16 	bl	80015ac <send_UART>
}
 8000980:	e002      	b.n	8000988 <proc_kp_cmd+0x40>
		send_UART("Invalid KP instruction syntax.");
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <proc_kp_cmd+0x54>)
 8000984:	f000 fe12 	bl	80015ac <send_UART>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08006354 	.word	0x08006354
 8000994:	200000ec 	.word	0x200000ec
 8000998:	0800635c 	.word	0x0800635c
 800099c:	08006370 	.word	0x08006370

080009a0 <proc_kd_cmd>:

void proc_kd_cmd(char* message)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	int signval;

	if(sscanf((char*) message, "KD %d", &signval) == 1)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	461a      	mov	r2, r3
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <proc_kd_cmd+0x48>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f004 fe01 	bl	80055b8 <siscanf>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10e      	bne.n	80009da <proc_kd_cmd+0x3a>
	{
		if(signval >= -200 && signval <= 200)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80009c2:	db06      	blt.n	80009d2 <proc_kd_cmd+0x32>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2bc8      	cmp	r3, #200	; 0xc8
 80009c8:	dc03      	bgt.n	80009d2 <proc_kd_cmd+0x32>
		{
			Kd = signval;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <proc_kd_cmd+0x4c>)
 80009ce:	6013      	str	r3, [r2, #0]
		else
			send_UART("Invalid KD value.");
	}
	else
		send_UART("Invalid KD instruction syntax.");
}
 80009d0:	e006      	b.n	80009e0 <proc_kd_cmd+0x40>
			send_UART("Invalid KD value.");
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <proc_kd_cmd+0x50>)
 80009d4:	f000 fdea 	bl	80015ac <send_UART>
}
 80009d8:	e002      	b.n	80009e0 <proc_kd_cmd+0x40>
		send_UART("Invalid KD instruction syntax.");
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <proc_kd_cmd+0x54>)
 80009dc:	f000 fde6 	bl	80015ac <send_UART>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	08006390 	.word	0x08006390
 80009ec:	200000f4 	.word	0x200000f4
 80009f0:	08006398 	.word	0x08006398
 80009f4:	080063ac 	.word	0x080063ac

080009f8 <proc_ki_cmd>:

void proc_ki_cmd(char* message)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	int signval;

	if(sscanf((char*) message, "KI %d", &signval) == 1)
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	461a      	mov	r2, r3
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <proc_ki_cmd+0x48>)
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f004 fdd5 	bl	80055b8 <siscanf>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10e      	bne.n	8000a32 <proc_ki_cmd+0x3a>
	{
		if(signval >= -200 && signval <= 200)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8000a1a:	db06      	blt.n	8000a2a <proc_ki_cmd+0x32>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2bc8      	cmp	r3, #200	; 0xc8
 8000a20:	dc03      	bgt.n	8000a2a <proc_ki_cmd+0x32>
		{
			Ki = signval;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <proc_ki_cmd+0x4c>)
 8000a26:	6013      	str	r3, [r2, #0]
		else
			send_UART("Invalid KI value.");
	}
	else
		send_UART("Invalid KI instruction syntax.");
}
 8000a28:	e006      	b.n	8000a38 <proc_ki_cmd+0x40>
			send_UART("Invalid KI value.");
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <proc_ki_cmd+0x50>)
 8000a2c:	f000 fdbe 	bl	80015ac <send_UART>
}
 8000a30:	e002      	b.n	8000a38 <proc_ki_cmd+0x40>
		send_UART("Invalid KI instruction syntax.");
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <proc_ki_cmd+0x54>)
 8000a34:	f000 fdba 	bl	80015ac <send_UART>
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	080063cc 	.word	0x080063cc
 8000a44:	200000fc 	.word	0x200000fc
 8000a48:	080063d4 	.word	0x080063d4
 8000a4c:	080063e8 	.word	0x080063e8

08000a50 <update_pos>:
}
*/


void update_pos(int dir)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(dir)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d010      	beq.n	8000a80 <update_pos+0x30>
		pos_m += POS_UNIT;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <update_pos+0x68>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a6a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000ab0 <update_pos+0x60>
 8000a6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a76:	ee17 2a90 	vmov	r2, s15
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <update_pos+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
	else
		pos_m -= POS_UNIT;
}
 8000a7e:	e00f      	b.n	8000aa0 <update_pos+0x50>
		pos_m -= POS_UNIT;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <update_pos+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000ab0 <update_pos+0x60>
 8000a90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a98:	ee17 2a90 	vmov	r2, s15
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <update_pos+0x68>)
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	f3af 8000 	nop.w
 8000ab0:	b0d8fb59 	.word	0xb0d8fb59
 8000ab4:	3f7acee8 	.word	0x3f7acee8
 8000ab8:	20000324 	.word	0x20000324
 8000abc:	00000000 	.word	0x00000000

08000ac0 <ISR_PID>:

void ISR_PID()
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	y = pos_m;
 8000ac4:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <ISR_PID+0x170>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a5a      	ldr	r2, [pc, #360]	; (8000c34 <ISR_PID+0x174>)
 8000aca:	6013      	str	r3, [r2, #0]
	e = yr - y;
 8000acc:	4b5a      	ldr	r3, [pc, #360]	; (8000c38 <ISR_PID+0x178>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b58      	ldr	r3, [pc, #352]	; (8000c34 <ISR_PID+0x174>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ade:	4b57      	ldr	r3, [pc, #348]	; (8000c3c <ISR_PID+0x17c>)
 8000ae0:	edc3 7a00 	vstr	s15, [r3]

	if(aut)
 8000ae4:	4b56      	ldr	r3, [pc, #344]	; (8000c40 <ISR_PID+0x180>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 808e 	beq.w	8000c0a <ISR_PID+0x14a>
	{
		sum_e_bkp = sum_e;
 8000aee:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <ISR_PID+0x184>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a55      	ldr	r2, [pc, #340]	; (8000c48 <ISR_PID+0x188>)
 8000af4:	6013      	str	r3, [r2, #0]
		sum_e = sum_e + e_ant;
 8000af6:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <ISR_PID+0x184>)
 8000af8:	ed93 7a00 	vldr	s14, [r3]
 8000afc:	4b53      	ldr	r3, [pc, #332]	; (8000c4c <ISR_PID+0x18c>)
 8000afe:	edd3 7a00 	vldr	s15, [r3]
 8000b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b06:	4b4f      	ldr	r3, [pc, #316]	; (8000c44 <ISR_PID+0x184>)
 8000b08:	edc3 7a00 	vstr	s15, [r3]
		u_d = Kd_h * (y - y_ant) + a * u_d_ant;
 8000b0c:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <ISR_PID+0x174>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b4f      	ldr	r3, [pc, #316]	; (8000c50 <ISR_PID+0x190>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a4f      	ldr	r2, [pc, #316]	; (8000c54 <ISR_PID+0x194>)
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b26:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <ISR_PID+0x198>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b30:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8000c28 <ISR_PID+0x168>
 8000b34:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b40:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <ISR_PID+0x19c>)
 8000b42:	edc3 7a00 	vstr	s15, [r3]
		u = Kp_h * e + Ki_h * sum_e - u_d;
 8000b46:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <ISR_PID+0x1a0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	ee07 3a90 	vmov	s15, r3
 8000b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <ISR_PID+0x17c>)
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b5c:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <ISR_PID+0x1a4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <ISR_PID+0x184>)
 8000b6a:	edd3 7a00 	vldr	s15, [r3]
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <ISR_PID+0x19c>)
 8000b78:	edd3 7a00 	vldr	s15, [r3]
 8000b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b80:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <ISR_PID+0x1a8>)
 8000b82:	edc3 7a00 	vstr	s15, [r3]
		e_ant = e;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <ISR_PID+0x17c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a30      	ldr	r2, [pc, #192]	; (8000c4c <ISR_PID+0x18c>)
 8000b8c:	6013      	str	r3, [r2, #0]
		y_ant = y;
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <ISR_PID+0x174>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <ISR_PID+0x190>)
 8000b94:	6013      	str	r3, [r2, #0]
		u_d_ant = u_d;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <ISR_PID+0x19c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <ISR_PID+0x198>)
 8000b9c:	6013      	str	r3, [r2, #0]

		if (u > U_SAT_MAX)
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <ISR_PID+0x1a8>)
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb0:	dd07      	ble.n	8000bc2 <ISR_PID+0x102>
		{
			u = U_SAT_MAX;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <ISR_PID+0x1a8>)
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <ISR_PID+0x1ac>)
 8000bb6:	601a      	str	r2, [r3, #0]
			sum_e = sum_e_bkp;
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <ISR_PID+0x188>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <ISR_PID+0x184>)
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e010      	b.n	8000be4 <ISR_PID+0x124>
		}
		else if(u < U_SAT_MIN)
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <ISR_PID+0x1a8>)
 8000bc4:	edd3 7a00 	vldr	s15, [r3]
 8000bc8:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8000bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd4:	d506      	bpl.n	8000be4 <ISR_PID+0x124>
		{
			u = U_SAT_MIN;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <ISR_PID+0x1a8>)
 8000bd8:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <ISR_PID+0x1b0>)
 8000bda:	601a      	str	r2, [r3, #0]
			sum_e = sum_e_bkp;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <ISR_PID+0x188>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <ISR_PID+0x184>)
 8000be2:	6013      	str	r3, [r2, #0]
		}

		TIM2->CCR4 = u/6*100;
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <ISR_PID+0x1a8>)
 8000be6:	ed93 7a00 	vldr	s14, [r3]
 8000bea:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8000bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000c74 <ISR_PID+0x1b4>
 8000bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c02:	ee17 2a90 	vmov	r2, s15
 8000c06:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		e_ant = e;
		y_ant = y;
	}
}
 8000c08:	e007      	b.n	8000c1a <ISR_PID+0x15a>
		e_ant = e;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <ISR_PID+0x17c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <ISR_PID+0x18c>)
 8000c10:	6013      	str	r3, [r2, #0]
		y_ant = y;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <ISR_PID+0x174>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <ISR_PID+0x190>)
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	f3af 8000 	nop.w
 8000c28:	9999999a 	.word	0x9999999a
 8000c2c:	3fd99999 	.word	0x3fd99999
 8000c30:	20000324 	.word	0x20000324
 8000c34:	200000e0 	.word	0x200000e0
 8000c38:	200000e4 	.word	0x200000e4
 8000c3c:	200000d8 	.word	0x200000d8
 8000c40:	200000cc 	.word	0x200000cc
 8000c44:	200000d4 	.word	0x200000d4
 8000c48:	200000d0 	.word	0x200000d0
 8000c4c:	200000dc 	.word	0x200000dc
 8000c50:	200000e8 	.word	0x200000e8
 8000c54:	200000f8 	.word	0x200000f8
 8000c58:	2000010c 	.word	0x2000010c
 8000c5c:	20000108 	.word	0x20000108
 8000c60:	200000f0 	.word	0x200000f0
 8000c64:	20000100 	.word	0x20000100
 8000c68:	20000104 	.word	0x20000104
 8000c6c:	40c00000 	.word	0x40c00000
 8000c70:	c0c00000 	.word	0xc0c00000
 8000c74:	42c80000 	.word	0x42c80000

08000c78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a33      	ldr	r2, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MX_GPIO_Init+0x100>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|FW_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f240 4101 	movw	r1, #1025	; 0x401
 8000cdc:	4827      	ldr	r0, [pc, #156]	; (8000d7c <MX_GPIO_Init+0x104>)
 8000cde:	f001 f897 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RV_GPIO_Port, RV_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce8:	4825      	ldr	r0, [pc, #148]	; (8000d80 <MX_GPIO_Init+0x108>)
 8000cea:	f001 f891 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|FW_Pin;
 8000cee:	f240 4301 	movw	r3, #1025	; 0x401
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	481d      	ldr	r0, [pc, #116]	; (8000d7c <MX_GPIO_Init+0x104>)
 8000d08:	f000 febe 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SB_Pin;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SB_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4817      	ldr	r0, [pc, #92]	; (8000d80 <MX_GPIO_Init+0x108>)
 8000d22:	f000 feb1 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SA_Pin;
 8000d26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SA_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4810      	ldr	r0, [pc, #64]	; (8000d80 <MX_GPIO_Init+0x108>)
 8000d3e:	f000 fea3 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RV_Pin;
 8000d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RV_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <MX_GPIO_Init+0x108>)
 8000d5c:	f000 fe94 	bl	8001a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f000 fe4a 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d6a:	2028      	movs	r0, #40	; 0x28
 8000d6c:	f000 fe63 	bl	8001a36 <HAL_NVIC_EnableIRQ>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
	int dir_m = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 8000d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_GPIO_EXTI_Callback+0x28>)
 8000d94:	f001 f824 	bl	8001de0 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60fb      	str	r3, [r7, #12]
	update_pos(dir_m);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fe57 	bl	8000a50 <update_pos>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0c2      	sub	sp, #264	; 0x108
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fcc6 	bl	8001746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f835 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbe:	f7ff ff5b 	bl	8000c78 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000dc2:	f000 fb19 	bl	80013f8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000dc6:	f000 f94b 	bl	8001060 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dca:	f000 f9bf 	bl	800114c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <main+0x6c>)
 8000dd0:	f002 f9a4 	bl	800311c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(has_message_from_UART())
 8000dd4:	f000 fbba 	bl	800154c <has_message_from_UART>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0fa      	beq.n	8000dd4 <main+0x24>
	  {
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fc0d 	bl	8001600 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fc0d 	bl	8000608 <check_command>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 8000df4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000df8:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <main+0x70>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	1d3a      	adds	r2, r7, #4
 8000e00:	4610      	mov	r0, r2
 8000e02:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 8000e04:	bf00      	nop
 8000e06:	f000 fbad 	bl	8001564 <is_transmitting_to_UART>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1fa      	bne.n	8000e06 <main+0x56>

		  reset_UART();
 8000e10:	f000 fbb4 	bl	800157c <reset_UART>
		  send_UART(PROMPT);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <main+0x74>)
 8000e16:	f000 fbc9 	bl	80015ac <send_UART>
	  if(has_message_from_UART())
 8000e1a:	e7db      	b.n	8000dd4 <main+0x24>
 8000e1c:	20000330 	.word	0x20000330
 8000e20:	20000000 	.word	0x20000000
 8000e24:	08006408 	.word	0x08006408

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	; 0x50
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fbb6 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <SystemClock_Config+0xd4>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <SystemClock_Config+0xd4>)
 8000e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <SystemClock_Config+0xd4>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <SystemClock_Config+0xd8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a25      	ldr	r2, [pc, #148]	; (8000f00 <SystemClock_Config+0xd8>)
 8000e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <SystemClock_Config+0xd8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	2310      	movs	r3, #16
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e90:	2308      	movs	r3, #8
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e94:	23c0      	movs	r3, #192	; 0xc0
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 f833 	bl	8001f14 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000eb4:	f000 f826 	bl	8000f04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eb8:	f000 ffdc 	bl	8001e74 <HAL_PWREx_EnableOverDrive>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ec2:	f000 f81f 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ed8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000edc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2106      	movs	r1, #6
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fac3 	bl	8002470 <HAL_RCC_ClockConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ef0:	f000 f808 	bl	8000f04 <Error_Handler>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3750      	adds	r7, #80	; 0x50
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x44>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x44>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 fc0c 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM3_IRQHandler+0x10>)
 8000fb2:	f002 fb35 	bl	8003620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000330 	.word	0x20000330

08000fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SA_Pin);
 8000fc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fc8:	f000 ff3c 	bl	8001e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f004 faa8 	bl	8005554 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20080000 	.word	0x20080000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000110 	.word	0x20000110
 8001038:	20000460 	.word	0x20000460

0800103c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	; 0x38
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <MX_TIM2_Init+0xe8>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_TIM2_Init+0xe8>)
 800109c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80010a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010aa:	2263      	movs	r2, #99	; 0x63
 80010ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ba:	4823      	ldr	r0, [pc, #140]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010bc:	f001 ffd6 	bl	800306c <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010c6:	f7ff ff1d 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d4:	4619      	mov	r1, r3
 80010d6:	481c      	ldr	r0, [pc, #112]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010d8:	f002 fcd6 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010e2:	f7ff ff0f 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e6:	4818      	ldr	r0, [pc, #96]	; (8001148 <MX_TIM2_Init+0xe8>)
 80010e8:	f002 f8bf 	bl	800326a <HAL_TIM_PWM_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010f2:	f7ff ff07 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <MX_TIM2_Init+0xe8>)
 8001106:	f003 f96f 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001110:	f7ff fef8 	bl	8000f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	220c      	movs	r2, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM2_Init+0xe8>)
 800112c:	f002 fb98 	bl	8003860 <HAL_TIM_PWM_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001136:	f7ff fee5 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM2_Init+0xe8>)
 800113c:	f000 f88c 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3738      	adds	r7, #56	; 0x38
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000037c 	.word	0x2000037c

0800114c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_TIM3_Init+0x94>)
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <MX_TIM3_Init+0x98>)
 800116e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001172:	225f      	movs	r2, #95	; 0x5f
 8001174:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_TIM3_Init+0x94>)
 800117e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001182:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_TIM3_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001190:	4813      	ldr	r0, [pc, #76]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001192:	f001 ff6b 	bl	800306c <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800119c:	f7ff feb2 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_TIM3_Init+0x94>)
 80011ae:	f002 fc6b 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011b8:	f7ff fea4 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM3_Init+0x94>)
 80011ca:	f003 f90d 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f7ff fe96 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000330 	.word	0x20000330
 80011e4:	40000400 	.word	0x40000400

080011e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d10c      	bne.n	8001214 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_TIM_Base_MspInit+0x68>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_TIM_Base_MspInit+0x68>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_TIM_Base_MspInit+0x68>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001212:	e018      	b.n	8001246 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_TIM_Base_MspInit+0x6c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d113      	bne.n	8001246 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_TIM_Base_MspInit+0x68>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_TIM_Base_MspInit+0x68>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_TIM_Base_MspInit+0x68>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	201d      	movs	r0, #29
 800123c:	f000 fbdf 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001240:	201d      	movs	r0, #29
 8001242:	f000 fbf8 	bl	8001a36 <HAL_NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40000400 	.word	0x40000400

08001258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d11c      	bne.n	80012b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_TIM_MspPostInit+0x64>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_TIM_MspPostInit+0x64>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_TIM_MspPostInit+0x64>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001296:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <HAL_TIM_MspPostInit+0x68>)
 80012b0:	f000 fbea 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <MY_TIM3_Init>:
}

/* USER CODE BEGIN 1 */

void MY_TIM3_Init(struct sp_config_t sp_config)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	463b      	mov	r3, r7
 80012cc:	e883 0003 	stmia.w	r3, {r0, r1}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ee:	2301      	movs	r3, #1
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28

	if(!strncmp(sp_config.timeunit, "us", 2))
 80012f2:	463b      	mov	r3, r7
 80012f4:	3304      	adds	r3, #4
 80012f6:	2202      	movs	r2, #2
 80012f8:	4932      	ldr	r1, [pc, #200]	; (80013c4 <MY_TIM3_Init+0x100>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 f992 	bl	8005624 <strncmp>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d018      	beq.n	8001338 <MY_TIM3_Init+0x74>
	{
		//sp_period_s = 0.000001 * sp_config.unit;
	}
	else if(!strncmp(sp_config.timeunit, "ms", 2))
 8001306:	463b      	mov	r3, r7
 8001308:	3304      	adds	r3, #4
 800130a:	2202      	movs	r2, #2
 800130c:	492e      	ldr	r1, [pc, #184]	; (80013c8 <MY_TIM3_Init+0x104>)
 800130e:	4618      	mov	r0, r3
 8001310:	f004 f988 	bl	8005624 <strncmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d103      	bne.n	8001322 <MY_TIM3_Init+0x5e>
	{
		//sp_period_s = 0.001 * sp_config.unit;
		mul1 = 1000;
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001320:	e00a      	b.n	8001338 <MY_TIM3_Init+0x74>
	}
	else if(!strncmp(sp_config.timeunit, "s", 1))
 8001322:	793a      	ldrb	r2, [r7, #4]
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MY_TIM3_Init+0x108>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d104      	bne.n	8001338 <MY_TIM3_Init+0x74>
	{
		//sp_period_s = 1 * sp_config.unit;
		mul1 = 20000;
 800132e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
		mul2 = 50;
 8001334:	2332      	movs	r3, #50	; 0x32
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	htim3.Instance = TIM3;
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MY_TIM3_Init+0x10c>)
 800133a:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <MY_TIM3_Init+0x110>)
 800133c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = (2 * mul1) - 1;
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	3b01      	subs	r3, #1
 8001344:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <MY_TIM3_Init+0x10c>)
 8001346:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MY_TIM3_Init+0x10c>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = ((sp_config.unit * 48 * mul2)-1) & 65535;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001352:	fb02 f203 	mul.w	r2, r2, r3
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	3b01      	subs	r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <MY_TIM3_Init+0x10c>)
 8001364:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MY_TIM3_Init+0x10c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MY_TIM3_Init+0x10c>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001372:	4817      	ldr	r0, [pc, #92]	; (80013d0 <MY_TIM3_Init+0x10c>)
 8001374:	f001 fe7a 	bl	800306c <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MY_TIM3_Init+0xbe>
	{
		Error_Handler();
 800137e:	f7ff fdc1 	bl	8000f04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4619      	mov	r1, r3
 800138e:	4810      	ldr	r0, [pc, #64]	; (80013d0 <MY_TIM3_Init+0x10c>)
 8001390:	f002 fb7a 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MY_TIM3_Init+0xda>
	{
		Error_Handler();
 800139a:	f7ff fdb3 	bl	8000f04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <MY_TIM3_Init+0x10c>)
 80013ae:	f003 f81b 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MY_TIM3_Init+0xf8>
	{
		Error_Handler();
 80013b8:	f7ff fda4 	bl	8000f04 <Error_Handler>
	}
}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	0800640c 	.word	0x0800640c
 80013c8:	08006410 	.word	0x08006410
 80013cc:	08006414 	.word	0x08006414
 80013d0:	20000330 	.word	0x20000330
 80013d4:	40000400 	.word	0x40000400

080013d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		ISR_PID();
 80013e8:	f7ff fb6a 	bl	8000ac0 <ISR_PID>
	}
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000330 	.word	0x20000330

080013f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_USART3_UART_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_USART3_UART_Init+0x78>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_USART3_UART_Init+0x7c>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_USART3_UART_Init+0x80>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_USART3_UART_Init+0x84>)
 8001416:	220d      	movs	r2, #13
 8001418:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_USART3_UART_Init+0x88>)
 800141c:	4a19      	ldr	r2, [pc, #100]	; (8001484 <MX_USART3_UART_Init+0x8c>)
 800141e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_USART3_UART_Init+0x88>)
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_USART3_UART_Init+0x88>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART3_UART_Init+0x88>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART3_UART_Init+0x88>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART3_UART_Init+0x88>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART3_UART_Init+0x88>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART3_UART_Init+0x88>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_USART3_UART_Init+0x88>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART3_UART_Init+0x88>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001456:	480a      	ldr	r0, [pc, #40]	; (8001480 <MX_USART3_UART_Init+0x88>)
 8001458:	f003 f872 	bl	8004540 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8001462:	f7ff fd4f 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000220 	.word	0x20000220
 8001470:	20000328 	.word	0x20000328
 8001474:	2000021c 	.word	0x2000021c
 8001478:	2000032c 	.word	0x2000032c
 800147c:	20000224 	.word	0x20000224
 8001480:	200003c8 	.word	0x200003c8
 8001484:	40004800 	.word	0x40004800
 8001488:	001ab3f0 	.word	0x001ab3f0

0800148c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0ae      	sub	sp, #184	; 0xb8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2290      	movs	r2, #144	; 0x90
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 f87b 	bl	80055a8 <memset>
  if(uartHandle->Instance==USART3)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a22      	ldr	r2, [pc, #136]	; (8001540 <HAL_UART_MspInit+0xb4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d13c      	bne.n	8001536 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f9a6 	bl	800281c <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014d6:	f7ff fd15 	bl	8000f04 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_UART_MspInit+0xb8>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_UART_MspInit+0xb8>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_UART_MspInit+0xb8>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_UART_MspInit+0xb8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_UART_MspInit+0xb8>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_UART_MspInit+0xb8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800150a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001524:	2307      	movs	r3, #7
 8001526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_UART_MspInit+0xbc>)
 8001532:	f000 faa9 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	37b8      	adds	r7, #184	; 0xb8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40004800 	.word	0x40004800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020c00 	.word	0x40020c00

0800154c <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	return flagCPP;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <has_message_from_UART+0x14>)
 8001552:	781b      	ldrb	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000220 	.word	0x20000220

08001564 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	return flagCPE;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <is_transmitting_to_UART+0x14>)
 800156a:	781b      	ldrb	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000328 	.word	0x20000328

0800157c <reset_UART>:

void reset_UART()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8001580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001584:	2100      	movs	r1, #0
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <reset_UART+0x24>)
 8001588:	f004 f80e 	bl	80055a8 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 800158c:	2201      	movs	r2, #1
 800158e:	4904      	ldr	r1, [pc, #16]	; (80015a0 <reset_UART+0x24>)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <reset_UART+0x28>)
 8001592:	f003 f891 	bl	80046b8 <HAL_UART_Receive_IT>
	flagCPP = false;
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <reset_UART+0x2c>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000011c 	.word	0x2000011c
 80015a4:	200003c8 	.word	0x200003c8
 80015a8:	20000220 	.word	0x20000220

080015ac <send_UART>:

void send_UART(const char* msg_to_send)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <send_UART+0x44>)
 80015bc:	f004 f844 	bl	8005648 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <send_UART+0x44>)
 80015c2:	f7fe fe47 	bl	8000254 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <send_UART+0x44>)
 80015cc:	4413      	add	r3, r2
 80015ce:	4909      	ldr	r1, [pc, #36]	; (80015f4 <send_UART+0x48>)
 80015d0:	461a      	mov	r2, r3
 80015d2:	460b      	mov	r3, r1
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <send_UART+0x4c>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	4903      	ldr	r1, [pc, #12]	; (80015f0 <send_UART+0x44>)
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <send_UART+0x50>)
 80015e4:	f002 fffa 	bl	80045dc <HAL_UART_Transmit_IT>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000224 	.word	0x20000224
 80015f4:	08006418 	.word	0x08006418
 80015f8:	20000328 	.word	0x20000328
 80015fc:	200003c8 	.word	0x200003c8

08001600 <read_UART>:

void read_UART(char* msg_to_read)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	4903      	ldr	r1, [pc, #12]	; (800161c <read_UART+0x1c>)
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f004 f81a 	bl	8005648 <strncpy>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000011c 	.word	0x2000011c

08001620 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_UART_RxCpltCallback+0xc4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d154      	bne.n	80016da <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	2b0d      	cmp	r3, #13
 800163a:	d00b      	beq.n	8001654 <HAL_UART_RxCpltCallback+0x34>
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	2b5c      	cmp	r3, #92	; 0x5c
 8001646:	d005      	beq.n	8001654 <HAL_UART_RxCpltCallback+0x34>
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	2b2f      	cmp	r3, #47	; 0x2f
 8001652:	d106      	bne.n	8001662 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_UART_RxCpltCallback+0xc4>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e03c      	b.n	80016dc <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d10f      	bne.n	800168e <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d105      	bne.n	8001682 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e01c      	b.n	80016bc <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3b02      	subs	r3, #2
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e016      	b.n	80016bc <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	2b1b      	cmp	r3, #27
 8001698:	d104      	bne.n	80016a4 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	2b24      	cmp	r3, #36	; 0x24
 80016ae:	d105      	bne.n	80016bc <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 80016b8:	2224      	movs	r2, #36	; 0x24
 80016ba:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_UART_RxCpltCallback+0xc8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_UART_RxCpltCallback+0xcc>)
 80016cc:	4413      	add	r3, r2
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <HAL_UART_RxCpltCallback+0xd0>)
 80016d4:	f002 fff0 	bl	80046b8 <HAL_UART_Receive_IT>
 80016d8:	e000      	b.n	80016dc <HAL_UART_RxCpltCallback+0xbc>
		return;
 80016da:	bf00      	nop
	}
}
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000220 	.word	0x20000220
 80016e8:	2000021c 	.word	0x2000021c
 80016ec:	2000011c 	.word	0x2000011c
 80016f0:	200003c8 	.word	0x200003c8

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff fc8d 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f003 ff1d 	bl	8005560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff fb43 	bl	8000db0 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001738:	080065d0 	.word	0x080065d0
  ldr r2, =_sbss
 800173c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001740:	20000460 	.word	0x20000460

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>

08001746 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174a:	2003      	movs	r0, #3
 800174c:	f000 f94c 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001750:	200f      	movs	r0, #15
 8001752:	f000 f805 	bl	8001760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001756:	f7ff fbdb 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x54>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x58>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f975 	bl	8001a6e <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00e      	b.n	80017ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d80a      	bhi.n	80017aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 f92f 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4a06      	ldr	r2, [pc, #24]	; (80017bc <HAL_InitTick+0x5c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000040 	.word	0x20000040
 80017b8:	20000048 	.word	0x20000048
 80017bc:	20000044 	.word	0x20000044

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000048 	.word	0x20000048
 80017e4:	2000044c 	.word	0x2000044c

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000044c 	.word	0x2000044c

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <__NVIC_SetPriorityGrouping+0x40>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	4313      	orrs	r3, r2
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x40>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	05fa0000 	.word	0x05fa0000

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db12      	blt.n	80018d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	490a      	ldr	r1, [pc, #40]	; (80018e4 <__NVIC_DisableIRQ+0x44>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	3320      	adds	r3, #32
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018cc:	f3bf 8f4f 	dsb	sy
}
 80018d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d2:	f3bf 8f6f 	isb	sy
}
 80018d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff05 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff1a 	bl	8001848 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff0d 	bl	8001864 <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff1d 	bl	80018a0 <__NVIC_DisableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff94 	bl	80019a4 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e175      	b.n	8001d94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8164 	bne.w	8001d8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x56>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80be 	beq.w	8001d8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a65      	ldr	r2, [pc, #404]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c2a:	4a61      	ldr	r2, [pc, #388]	; (8001db0 <HAL_GPIO_Init+0x328>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_GPIO_Init+0x32c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d037      	beq.n	8001cc6 <HAL_GPIO_Init+0x23e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_GPIO_Init+0x330>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d031      	beq.n	8001cc2 <HAL_GPIO_Init+0x23a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x236>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a55      	ldr	r2, [pc, #340]	; (8001dc0 <HAL_GPIO_Init+0x338>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x232>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <HAL_GPIO_Init+0x33c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x22e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <HAL_GPIO_Init+0x340>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x22a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <HAL_GPIO_Init+0x344>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x226>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a51      	ldr	r2, [pc, #324]	; (8001dd0 <HAL_GPIO_Init+0x348>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x222>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a50      	ldr	r2, [pc, #320]	; (8001dd4 <HAL_GPIO_Init+0x34c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x21e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_GPIO_Init+0x350>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	e012      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	e010      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	e00e      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x240>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x328>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_GPIO_Init+0x354>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae86 	bls.w	8001aa8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40021c00 	.word	0x40021c00
 8001dd4:	40022000 	.word	0x40022000
 8001dd8:	40022400 	.word	0x40022400
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe ff8e 	bl	8000d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea2:	f7ff fca1 	bl	80017e8 <HAL_GetTick>
 8001ea6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ea8:	e009      	b.n	8001ebe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eaa:	f7ff fc9d 	bl	80017e8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb8:	d901      	bls.n	8001ebe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e022      	b.n	8001f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eca:	d1ee      	bne.n	8001eaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed8:	f7ff fc86 	bl	80017e8 <HAL_GetTick>
 8001edc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ede:	e009      	b.n	8001ef4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ee0:	f7ff fc82 	bl	80017e8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eee:	d901      	bls.n	8001ef4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e007      	b.n	8001f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f00:	d1ee      	bne.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40007000 	.word	0x40007000

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e29b      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8087 	beq.w	8002046 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f38:	4b96      	ldr	r3, [pc, #600]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f44:	4b93      	ldr	r3, [pc, #588]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d112      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62>
 8001f50:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5c:	d10b      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d06c      	beq.n	8002044 <HAL_RCC_OscConfig+0x130>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d168      	bne.n	8002044 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e275      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x7a>
 8001f80:	4b84      	ldr	r3, [pc, #528]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a83      	ldr	r2, [pc, #524]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e02e      	b.n	8001fec <HAL_RCC_OscConfig+0xd8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x9c>
 8001f96:	4b7f      	ldr	r3, [pc, #508]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7e      	ldr	r2, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a7b      	ldr	r2, [pc, #492]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xd8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xc0>
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b73      	ldr	r3, [pc, #460]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a72      	ldr	r2, [pc, #456]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xd8>
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6e      	ldr	r2, [pc, #440]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6b      	ldr	r2, [pc, #428]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fbf8 	bl	80017e8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fbf4 	bl	80017e8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e229      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe8>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fbe4 	bl	80017e8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fbe0 	bl	80017e8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e215      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x110>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d069      	beq.n	8002126 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002052:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b4d      	ldr	r3, [pc, #308]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x190>
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x17a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1e9      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	493d      	ldr	r1, [pc, #244]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e040      	b.n	8002126 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d023      	beq.n	80020f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a38      	ldr	r2, [pc, #224]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb96 	bl	80017e8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fb92 	bl	80017e8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1c7      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4929      	ldr	r1, [pc, #164]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
 80020f2:	e018      	b.n	8002126 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff fb72 	bl	80017e8 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002108:	f7ff fb6e 	bl	80017e8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1a3      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d038      	beq.n	80021a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d019      	beq.n	800216e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213e:	4a15      	ldr	r2, [pc, #84]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7ff fb4f 	bl	80017e8 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214e:	f7ff fb4b 	bl	80017e8 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e180      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x23a>
 800216c:	e01a      	b.n	80021a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7ff fb35 	bl	80017e8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002182:	f7ff fb31 	bl	80017e8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d903      	bls.n	8002198 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e166      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
 8002194:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800219a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ee      	bne.n	8002182 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80a4 	beq.w	80022fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b89      	ldr	r3, [pc, #548]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a88      	ldr	r2, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b86      	ldr	r3, [pc, #536]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021da:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x4d4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d118      	bne.n	8002218 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021e6:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x4d4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7f      	ldr	r2, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x4d4>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f2:	f7ff faf9 	bl	80017e8 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7ff faf5 	bl	80017e8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	; 0x64
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e12a      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220c:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x4d4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x31a>
 8002220:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a6f      	ldr	r2, [pc, #444]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6713      	str	r3, [r2, #112]	; 0x70
 800222c:	e02d      	b.n	800228a <HAL_RCC_OscConfig+0x376>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x33c>
 8002236:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a6a      	ldr	r2, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
 8002242:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a67      	ldr	r2, [pc, #412]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
 800224e:	e01c      	b.n	800228a <HAL_RCC_OscConfig+0x376>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b05      	cmp	r3, #5
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_OscConfig+0x35e>
 8002258:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a61      	ldr	r2, [pc, #388]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a5e      	ldr	r2, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	e00b      	b.n	800228a <HAL_RCC_OscConfig+0x376>
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a5b      	ldr	r2, [pc, #364]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d015      	beq.n	80022be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7ff faa9 	bl	80017e8 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7ff faa5 	bl	80017e8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0d8      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ee      	beq.n	800229a <HAL_RCC_OscConfig+0x386>
 80022bc:	e014      	b.n	80022e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7ff fa93 	bl	80017e8 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7ff fa8f 	bl	80017e8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0c2      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a3c      	ldr	r2, [pc, #240]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80ae 	beq.w	8002460 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002304:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d06d      	beq.n	80023ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d14b      	bne.n	80023b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fa60 	bl	80017e8 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff fa5c 	bl	80017e8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e091      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	3b01      	subs	r3, #1
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	071b      	lsls	r3, r3, #28
 8002376:	491b      	ldr	r1, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff fa2e 	bl	80017e8 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff fa2a 	bl	80017e8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e05f      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x47c>
 80023ae:	e057      	b.n	8002460 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80023b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff fa14 	bl	80017e8 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff fa10 	bl	80017e8 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e045      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4b0>
 80023e2:	e03d      	b.n	8002460 <HAL_RCC_OscConfig+0x54c>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_RCC_OscConfig+0x558>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d030      	beq.n	800245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d129      	bne.n	800245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d122      	bne.n	800245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002422:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002424:	4293      	cmp	r3, r2
 8002426:	d119      	bne.n	800245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d10f      	bne.n	800245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0d0      	b.n	800262a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	4965      	ldr	r1, [pc, #404]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0b8      	b.n	800262a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d0:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a58      	ldr	r2, [pc, #352]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80024d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e8:	4b53      	ldr	r3, [pc, #332]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a52      	ldr	r2, [pc, #328]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b50      	ldr	r3, [pc, #320]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	494d      	ldr	r1, [pc, #308]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d040      	beq.n	8002594 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d115      	bne.n	8002552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e07f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e073      	b.n	800262a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e06b      	b.n	800262a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b39      	ldr	r3, [pc, #228]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4936      	ldr	r1, [pc, #216]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7ff f940 	bl	80017e8 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff f93c 	bl	80017e8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e053      	b.n	800262a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d210      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 020f 	bic.w	r2, r3, #15
 80025aa:	4922      	ldr	r1, [pc, #136]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e032      	b.n	800262a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4916      	ldr	r1, [pc, #88]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	490e      	ldr	r1, [pc, #56]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002602:	f000 f821 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8002606:	4602      	mov	r2, r0
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	490a      	ldr	r1, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	5ccb      	ldrb	r3, [r1, r3]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a09      	ldr	r2, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1d0>)
 800261c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1d4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f89c 	bl	8001760 <HAL_InitTick>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00
 8002638:	40023800 	.word	0x40023800
 800263c:	08006428 	.word	0x08006428
 8002640:	20000040 	.word	0x20000040
 8002644:	20000044 	.word	0x20000044

08002648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800264e:	2100      	movs	r1, #0
 8002650:	6079      	str	r1, [r7, #4]
 8002652:	2100      	movs	r1, #0
 8002654:	60f9      	str	r1, [r7, #12]
 8002656:	2100      	movs	r1, #0
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800265a:	2100      	movs	r1, #0
 800265c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265e:	4952      	ldr	r1, [pc, #328]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002660:	6889      	ldr	r1, [r1, #8]
 8002662:	f001 010c 	and.w	r1, r1, #12
 8002666:	2908      	cmp	r1, #8
 8002668:	d00d      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x3e>
 800266a:	2908      	cmp	r1, #8
 800266c:	f200 8094 	bhi.w	8002798 <HAL_RCC_GetSysClockFreq+0x150>
 8002670:	2900      	cmp	r1, #0
 8002672:	d002      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x32>
 8002674:	2904      	cmp	r1, #4
 8002676:	d003      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x38>
 8002678:	e08e      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_GetSysClockFreq+0x164>)
 800267c:	60bb      	str	r3, [r7, #8]
      break;
 800267e:	e08e      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002680:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002682:	60bb      	str	r3, [r7, #8]
      break;
 8002684:	e08b      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002686:	4948      	ldr	r1, [pc, #288]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002688:	6849      	ldr	r1, [r1, #4]
 800268a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800268e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002690:	4945      	ldr	r1, [pc, #276]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002692:	6849      	ldr	r1, [r1, #4]
 8002694:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002698:	2900      	cmp	r1, #0
 800269a:	d024      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269c:	4942      	ldr	r1, [pc, #264]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800269e:	6849      	ldr	r1, [r1, #4]
 80026a0:	0989      	lsrs	r1, r1, #6
 80026a2:	4608      	mov	r0, r1
 80026a4:	f04f 0100 	mov.w	r1, #0
 80026a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80026ac:	f04f 0500 	mov.w	r5, #0
 80026b0:	ea00 0204 	and.w	r2, r0, r4
 80026b4:	ea01 0305 	and.w	r3, r1, r5
 80026b8:	493d      	ldr	r1, [pc, #244]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80026ba:	fb01 f003 	mul.w	r0, r1, r3
 80026be:	2100      	movs	r1, #0
 80026c0:	fb01 f102 	mul.w	r1, r1, r2
 80026c4:	1844      	adds	r4, r0, r1
 80026c6:	493a      	ldr	r1, [pc, #232]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80026c8:	fba2 0101 	umull	r0, r1, r2, r1
 80026cc:	1863      	adds	r3, r4, r1
 80026ce:	4619      	mov	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	f7fd fe1a 	bl	8000310 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	e04a      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	461a      	mov	r2, r3
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	ea02 0400 	and.w	r4, r2, r0
 80026fe:	ea03 0501 	and.w	r5, r3, r1
 8002702:	4620      	mov	r0, r4
 8002704:	4629      	mov	r1, r5
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	014b      	lsls	r3, r1, #5
 8002710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002714:	0142      	lsls	r2, r0, #5
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	1b00      	subs	r0, r0, r4
 800271c:	eb61 0105 	sbc.w	r1, r1, r5
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	018b      	lsls	r3, r1, #6
 800272a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800272e:	0182      	lsls	r2, r0, #6
 8002730:	1a12      	subs	r2, r2, r0
 8002732:	eb63 0301 	sbc.w	r3, r3, r1
 8002736:	f04f 0000 	mov.w	r0, #0
 800273a:	f04f 0100 	mov.w	r1, #0
 800273e:	00d9      	lsls	r1, r3, #3
 8002740:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002744:	00d0      	lsls	r0, r2, #3
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	1912      	adds	r2, r2, r4
 800274c:	eb45 0303 	adc.w	r3, r5, r3
 8002750:	f04f 0000 	mov.w	r0, #0
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	0299      	lsls	r1, r3, #10
 800275a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800275e:	0290      	lsls	r0, r2, #10
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	461a      	mov	r2, r3
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	f7fd fdce 	bl	8000310 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4613      	mov	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	3301      	adds	r3, #1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	60bb      	str	r3, [r7, #8]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_GetSysClockFreq+0x164>)
 800279a:	60bb      	str	r3, [r7, #8]
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	68bb      	ldr	r3, [r7, #8]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bdb0      	pop	{r4, r5, r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	017d7840 	.word	0x017d7840

080027b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000040 	.word	0x20000040

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08006438 	.word	0x08006438

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f8:	f7ff ffdc 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	08006438 	.word	0x08006438

0800281c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d012      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002844:	4b69      	ldr	r3, [pc, #420]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a68      	ldr	r2, [pc, #416]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800284e:	6093      	str	r3, [r2, #8]
 8002850:	4b66      	ldr	r3, [pc, #408]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	4964      	ldr	r1, [pc, #400]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d017      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800287c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	4959      	ldr	r1, [pc, #356]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d017      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028b2:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	494a      	ldr	r1, [pc, #296]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d0:	d101      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 808b 	beq.w	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	4a39      	ldr	r2, [pc, #228]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6413      	str	r3, [r2, #64]	; 0x40
 800290c:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002924:	f7fe ff60 	bl	80017e8 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe ff5c 	bl	80017e8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e38f      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800294a:	4b28      	ldr	r3, [pc, #160]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d035      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d02e      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002970:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002988:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d114      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe ff24 	bl	80017e8 <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	e00a      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe ff20 	bl	80017e8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e351      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0ee      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029d2:	d111      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029e2:	400b      	ands	r3, r1
 80029e4:	4901      	ldr	r1, [pc, #4]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40007000 	.word	0x40007000
 80029f4:	0ffffcff 	.word	0x0ffffcff
 80029f8:	4bb3      	ldr	r3, [pc, #716]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4ab2      	ldr	r2, [pc, #712]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a02:	6093      	str	r3, [r2, #8]
 8002a04:	4bb0      	ldr	r3, [pc, #704]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	49ad      	ldr	r1, [pc, #692]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a22:	4ba9      	ldr	r3, [pc, #676]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a28:	4aa7      	ldr	r2, [pc, #668]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a32:	4ba5      	ldr	r3, [pc, #660]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	49a2      	ldr	r1, [pc, #648]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a50:	4b9d      	ldr	r3, [pc, #628]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5e:	499a      	ldr	r1, [pc, #616]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a72:	4b95      	ldr	r3, [pc, #596]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a80:	4991      	ldr	r1, [pc, #580]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a94:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa2:	4989      	ldr	r1, [pc, #548]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ab6:	4b84      	ldr	r3, [pc, #528]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4980      	ldr	r1, [pc, #512]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad8:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4978      	ldr	r1, [pc, #480]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002afa:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f023 020c 	bic.w	r2, r3, #12
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b08:	496f      	ldr	r1, [pc, #444]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	4967      	ldr	r1, [pc, #412]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b3e:	4b62      	ldr	r3, [pc, #392]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	495e      	ldr	r1, [pc, #376]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	4956      	ldr	r1, [pc, #344]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b82:	4b51      	ldr	r3, [pc, #324]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ba4:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	4945      	ldr	r1, [pc, #276]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bc6:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd4:	493c      	ldr	r1, [pc, #240]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002be8:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d011      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c18:	492b      	ldr	r1, [pc, #172]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c28:	d101      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4a:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	491b      	ldr	r1, [pc, #108]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7c:	4912      	ldr	r1, [pc, #72]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca0:	4909      	ldr	r1, [pc, #36]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	4986      	ldr	r1, [pc, #536]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ce0:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf0:	497d      	ldr	r1, [pc, #500]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d006      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80d6 	beq.w	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d0c:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d18:	f7fe fd66 	bl	80017e8 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d20:	f7fe fd62 	bl	80017e8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e195      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d021      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11d      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d66:	0e1b      	lsrs	r3, r3, #24
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	019a      	lsls	r2, r3, #6
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	4958      	ldr	r1, [pc, #352]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02e      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db8:	d129      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dba:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dc8:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dce:	0f1b      	lsrs	r3, r3, #28
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	019a      	lsls	r2, r3, #6
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	071b      	lsls	r3, r3, #28
 8002dee:	493e      	ldr	r1, [pc, #248]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfc:	f023 021f 	bic.w	r2, r3, #31
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	3b01      	subs	r3, #1
 8002e06:	4938      	ldr	r1, [pc, #224]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01d      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e1a:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	0e1b      	lsrs	r3, r3, #24
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2e:	0f1b      	lsrs	r3, r3, #28
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	019a      	lsls	r2, r3, #6
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	431a      	orrs	r2, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	071b      	lsls	r3, r3, #28
 8002e4e:	4926      	ldr	r1, [pc, #152]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d011      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	019a      	lsls	r2, r3, #6
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	071b      	lsls	r3, r3, #28
 8002e7e:	491a      	ldr	r1, [pc, #104]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e92:	f7fe fca9 	bl	80017e8 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e9a:	f7fe fca5 	bl	80017e8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0d8      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	f040 80ce 	bne.w	800305c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fc8c 	bl	80017e8 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ed2:	e00b      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ed4:	f7fe fc88 	bl	80017e8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d904      	bls.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0bb      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eec:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef8:	d0ec      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02e      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d12a      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f22:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f30:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	0f1b      	lsrs	r3, r3, #28
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	019a      	lsls	r2, r3, #6
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	061b      	lsls	r3, r3, #24
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	4944      	ldr	r1, [pc, #272]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f5e:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	493d      	ldr	r1, [pc, #244]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d022      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8c:	d11d      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	0e1b      	lsrs	r3, r3, #24
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f9c:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	0f1b      	lsrs	r3, r3, #28
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	019a      	lsls	r2, r3, #6
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	061b      	lsls	r3, r3, #24
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	071b      	lsls	r3, r3, #28
 8002fc2:	4929      	ldr	r1, [pc, #164]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d028      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	0e1b      	lsrs	r3, r3, #24
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	0c1b      	lsrs	r3, r3, #16
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	019a      	lsls	r2, r3, #6
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	041b      	lsls	r3, r3, #16
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	4917      	ldr	r1, [pc, #92]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	4911      	ldr	r1, [pc, #68]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003034:	f7fe fbd8 	bl	80017e8 <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800303c:	f7fe fbd4 	bl	80017e8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e007      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305a:	d1ef      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800

0800306c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e049      	b.n	8003112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe f8a8 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f000 fdde 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e054      	b.n	80031de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_TIM_Base_Start_IT+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d022      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x80>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315e:	d01d      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x80>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d018      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x80>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x80>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00e      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x80>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_TIM_Base_Start_IT+0xe0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d009      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x80>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_TIM_Base_Start_IT+0xe4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x80>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIM_Base_Start_IT+0xe8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d115      	bne.n	80031c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_TIM_Base_Start_IT+0xec>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d015      	beq.n	80031da <HAL_TIM_Base_Start_IT+0xbe>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d011      	beq.n	80031da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c6:	e008      	b.n	80031da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e000      	b.n	80031dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	40010400 	.word	0x40010400
 8003200:	40014000 	.word	0x40014000
 8003204:	40001800 	.word	0x40001800
 8003208:	00010007 	.word	0x00010007

0800320c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	f241 1311 	movw	r3, #4369	; 0x1111
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10f      	bne.n	8003254 <HAL_TIM_Base_Stop_IT+0x48>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1a      	ldr	r2, [r3, #32]
 800323a:	f240 4344 	movw	r3, #1092	; 0x444
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_TIM_Base_Stop_IT+0x48>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e049      	b.n	8003310 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f841 	bl	8003318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f000 fcdf 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_TIM_PWM_Start+0x24>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e03c      	b.n	80033ca <HAL_TIM_PWM_Start+0x9e>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d109      	bne.n	800336a <HAL_TIM_PWM_Start+0x3e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	e02f      	b.n	80033ca <HAL_TIM_PWM_Start+0x9e>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d109      	bne.n	8003384 <HAL_TIM_PWM_Start+0x58>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e022      	b.n	80033ca <HAL_TIM_PWM_Start+0x9e>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d109      	bne.n	800339e <HAL_TIM_PWM_Start+0x72>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e015      	b.n	80033ca <HAL_TIM_PWM_Start+0x9e>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d109      	bne.n	80033b8 <HAL_TIM_PWM_Start+0x8c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e008      	b.n	80033ca <HAL_TIM_PWM_Start+0x9e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e092      	b.n	80034f8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_PWM_Start+0xb6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e0:	e023      	b.n	800342a <HAL_TIM_PWM_Start+0xfe>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0xc6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f0:	e01b      	b.n	800342a <HAL_TIM_PWM_Start+0xfe>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0xd6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003400:	e013      	b.n	800342a <HAL_TIM_PWM_Start+0xfe>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0xe6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003410:	e00b      	b.n	800342a <HAL_TIM_PWM_Start+0xfe>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b10      	cmp	r3, #16
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Start+0xf6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003420:	e003      	b.n	800342a <HAL_TIM_PWM_Start+0xfe>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2201      	movs	r2, #1
 8003430:	6839      	ldr	r1, [r7, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 ffb2 	bl	800439c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a30      	ldr	r2, [pc, #192]	; (8003500 <HAL_TIM_PWM_Start+0x1d4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_PWM_Start+0x120>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2f      	ldr	r2, [pc, #188]	; (8003504 <HAL_TIM_PWM_Start+0x1d8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_TIM_PWM_Start+0x124>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_TIM_PWM_Start+0x126>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a25      	ldr	r2, [pc, #148]	; (8003500 <HAL_TIM_PWM_Start+0x1d4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x18a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003478:	d01d      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x18a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_TIM_PWM_Start+0x1dc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x18a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a20      	ldr	r2, [pc, #128]	; (800350c <HAL_TIM_PWM_Start+0x1e0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x18a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_TIM_PWM_Start+0x1e4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x18a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_TIM_PWM_Start+0x1d8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x18a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_TIM_PWM_Start+0x1e8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x18a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <HAL_TIM_PWM_Start+0x1ec>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d115      	bne.n	80034e2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_TIM_PWM_Start+0x1f0>)
 80034be:	4013      	ands	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d015      	beq.n	80034f4 <HAL_TIM_PWM_Start+0x1c8>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ce:	d011      	beq.n	80034f4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	e008      	b.n	80034f4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e000      	b.n	80034f6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40010000 	.word	0x40010000
 8003504:	40010400 	.word	0x40010400
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40014000 	.word	0x40014000
 8003518:	40001800 	.word	0x40001800
 800351c:	00010007 	.word	0x00010007

08003520 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	6839      	ldr	r1, [r7, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 ff32 	bl	800439c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a36      	ldr	r2, [pc, #216]	; (8003618 <HAL_TIM_PWM_Stop+0xf8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_PWM_Stop+0x2c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a35      	ldr	r2, [pc, #212]	; (800361c <HAL_TIM_PWM_Stop+0xfc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_TIM_PWM_Stop+0x30>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_TIM_PWM_Stop+0x32>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <HAL_TIM_PWM_Stop+0x66>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	f240 4344 	movw	r3, #1092	; 0x444
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_TIM_PWM_Stop+0x66>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <HAL_TIM_PWM_Stop+0x96>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	f240 4344 	movw	r3, #1092	; 0x444
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_PWM_Stop+0x96>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Stop+0xa6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c4:	e023      	b.n	800360e <HAL_TIM_PWM_Stop+0xee>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Stop+0xb6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	e01b      	b.n	800360e <HAL_TIM_PWM_Stop+0xee>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Stop+0xc6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e4:	e013      	b.n	800360e <HAL_TIM_PWM_Stop+0xee>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Stop+0xd6>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f4:	e00b      	b.n	800360e <HAL_TIM_PWM_Stop+0xee>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_PWM_Stop+0xe6>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	e003      	b.n	800360e <HAL_TIM_PWM_Stop+0xee>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40010000 	.word	0x40010000
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0202 	mvn.w	r2, #2
 800364c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fae4 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fad6 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fae7 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0204 	mvn.w	r2, #4
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 faba 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 faac 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fabd 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d122      	bne.n	8003724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d11b      	bne.n	8003724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0208 	mvn.w	r2, #8
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2204      	movs	r2, #4
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa90 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa82 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fa93 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	d122      	bne.n	8003778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d11b      	bne.n	8003778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0210 	mvn.w	r2, #16
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2208      	movs	r2, #8
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fa66 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa58 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fa69 	bl	8003c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0201 	mvn.w	r2, #1
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fe1a 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fea4 	bl	8004518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037de:	d10e      	bne.n	80037fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d107      	bne.n	80037fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fe97 	bl	800452c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d10e      	bne.n	800382a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d107      	bne.n	800382a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa17 	bl	8003c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b20      	cmp	r3, #32
 8003836:	d10e      	bne.n	8003856 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b20      	cmp	r3, #32
 8003844:	d107      	bne.n	8003856 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f06f 0220 	mvn.w	r2, #32
 800384e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fe57 	bl	8004504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800387a:	2302      	movs	r3, #2
 800387c:	e0ff      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b14      	cmp	r3, #20
 800388a:	f200 80f0 	bhi.w	8003a6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038e9 	.word	0x080038e9
 8003898:	08003a6f 	.word	0x08003a6f
 800389c:	08003a6f 	.word	0x08003a6f
 80038a0:	08003a6f 	.word	0x08003a6f
 80038a4:	08003929 	.word	0x08003929
 80038a8:	08003a6f 	.word	0x08003a6f
 80038ac:	08003a6f 	.word	0x08003a6f
 80038b0:	08003a6f 	.word	0x08003a6f
 80038b4:	0800396b 	.word	0x0800396b
 80038b8:	08003a6f 	.word	0x08003a6f
 80038bc:	08003a6f 	.word	0x08003a6f
 80038c0:	08003a6f 	.word	0x08003a6f
 80038c4:	080039ab 	.word	0x080039ab
 80038c8:	08003a6f 	.word	0x08003a6f
 80038cc:	08003a6f 	.word	0x08003a6f
 80038d0:	08003a6f 	.word	0x08003a6f
 80038d4:	080039ed 	.word	0x080039ed
 80038d8:	08003a6f 	.word	0x08003a6f
 80038dc:	08003a6f 	.word	0x08003a6f
 80038e0:	08003a6f 	.word	0x08003a6f
 80038e4:	08003a2d 	.word	0x08003a2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fa5c 	bl	8003dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0208 	orr.w	r2, r2, #8
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0204 	bic.w	r2, r2, #4
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	619a      	str	r2, [r3, #24]
      break;
 8003926:	e0a5      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 faae 	bl	8003e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6999      	ldr	r1, [r3, #24]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	021a      	lsls	r2, r3, #8
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	619a      	str	r2, [r3, #24]
      break;
 8003968:	e084      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fb05 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0208 	orr.w	r2, r2, #8
 8003984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0204 	bic.w	r2, r2, #4
 8003994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	61da      	str	r2, [r3, #28]
      break;
 80039a8:	e064      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fb5b 	bl	800406c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	021a      	lsls	r2, r3, #8
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	61da      	str	r2, [r3, #28]
      break;
 80039ea:	e043      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fb92 	bl	800411c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0208 	orr.w	r2, r2, #8
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a2a:	e023      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fbc4 	bl	80041c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	021a      	lsls	r2, r3, #8
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a6c:	e002      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
      break;
 8003a72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop

08003a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e0b4      	b.n	8003c0e <HAL_TIM_ConfigClockSource+0x186>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <HAL_TIM_ConfigClockSource+0x190>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003adc:	d03e      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0xd4>
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	f200 8087 	bhi.w	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	f000 8086 	beq.w	8003bfa <HAL_TIM_ConfigClockSource+0x172>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d87f      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d01a      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xa6>
 8003af8:	2b70      	cmp	r3, #112	; 0x70
 8003afa:	d87b      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b60      	cmp	r3, #96	; 0x60
 8003afe:	d050      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b00:	2b60      	cmp	r3, #96	; 0x60
 8003b02:	d877      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b50      	cmp	r3, #80	; 0x50
 8003b06:	d03c      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0xfa>
 8003b08:	2b50      	cmp	r3, #80	; 0x50
 8003b0a:	d873      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d058      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d86f      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d064      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	2b30      	cmp	r3, #48	; 0x30
 8003b1a:	d86b      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d060      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d867      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d05a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	e062      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f000 fc0d 	bl	800435c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	609a      	str	r2, [r3, #8]
      break;
 8003b5a:	e04f      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f000 fbf6 	bl	800435c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b7e:	609a      	str	r2, [r3, #8]
      break;
 8003b80:	e03c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 fb6a 	bl	8004268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2150      	movs	r1, #80	; 0x50
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fbc3 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e02c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fb89 	bl	80042c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2160      	movs	r1, #96	; 0x60
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fbb3 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e01c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 fb4a 	bl	8004268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fba3 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003be0:	e00c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f000 fb9a 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8003bf2:	e003      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e000      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	fffeff88 	.word	0xfffeff88

08003c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a40      	ldr	r2, [pc, #256]	; (8003d80 <TIM_Base_SetConfig+0x114>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8a:	d00f      	beq.n	8003cac <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <TIM_Base_SetConfig+0x118>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00b      	beq.n	8003cac <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <TIM_Base_SetConfig+0x11c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <TIM_Base_SetConfig+0x120>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3a      	ldr	r2, [pc, #232]	; (8003d90 <TIM_Base_SetConfig+0x124>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <TIM_Base_SetConfig+0x114>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02b      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d027      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <TIM_Base_SetConfig+0x118>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d023      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <TIM_Base_SetConfig+0x11c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01f      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2a      	ldr	r2, [pc, #168]	; (8003d8c <TIM_Base_SetConfig+0x120>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01b      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <TIM_Base_SetConfig+0x124>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d017      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <TIM_Base_SetConfig+0x128>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a27      	ldr	r2, [pc, #156]	; (8003d98 <TIM_Base_SetConfig+0x12c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00f      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <TIM_Base_SetConfig+0x130>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <TIM_Base_SetConfig+0x134>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <TIM_Base_SetConfig+0x138>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a23      	ldr	r2, [pc, #140]	; (8003da8 <TIM_Base_SetConfig+0x13c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <TIM_Base_SetConfig+0x114>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_Base_SetConfig+0xf8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <TIM_Base_SetConfig+0x124>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	615a      	str	r2, [r3, #20]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800
 8003da0:	40001800 	.word	0x40001800
 8003da4:	40001c00 	.word	0x40001c00
 8003da8:	40002000 	.word	0x40002000

08003dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <TIM_OC1_SetConfig+0xd8>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0302 	bic.w	r3, r3, #2
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <TIM_OC1_SetConfig+0xdc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_OC1_SetConfig+0x64>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <TIM_OC1_SetConfig+0xe0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10c      	bne.n	8003e2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0308 	bic.w	r3, r3, #8
 8003e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <TIM_OC1_SetConfig+0xdc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_OC1_SetConfig+0x8e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <TIM_OC1_SetConfig+0xe0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d111      	bne.n	8003e5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	621a      	str	r2, [r3, #32]
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	fffeff8f 	.word	0xfffeff8f
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010400 	.word	0x40010400

08003e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <TIM_OC2_SetConfig+0xe4>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0320 	bic.w	r3, r3, #32
 8003eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <TIM_OC2_SetConfig+0xe8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_OC2_SetConfig+0x68>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <TIM_OC2_SetConfig+0xec>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10d      	bne.n	8003f14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <TIM_OC2_SetConfig+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC2_SetConfig+0x94>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <TIM_OC2_SetConfig+0xec>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d113      	bne.n	8003f4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	feff8fff 	.word	0xfeff8fff
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <TIM_OC3_SetConfig+0xe0>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a22      	ldr	r2, [pc, #136]	; (8004064 <TIM_OC3_SetConfig+0xe4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC3_SetConfig+0x66>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a21      	ldr	r2, [pc, #132]	; (8004068 <TIM_OC3_SetConfig+0xe8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10d      	bne.n	8004002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a17      	ldr	r2, [pc, #92]	; (8004064 <TIM_OC3_SetConfig+0xe4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_OC3_SetConfig+0x92>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <TIM_OC3_SetConfig+0xe8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	fffeff8f 	.word	0xfffeff8f
 8004064:	40010000 	.word	0x40010000
 8004068:	40010400 	.word	0x40010400

0800406c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <TIM_OC4_SetConfig+0xa4>)
 8004098:	4013      	ands	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a13      	ldr	r2, [pc, #76]	; (8004114 <TIM_OC4_SetConfig+0xa8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_OC4_SetConfig+0x68>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <TIM_OC4_SetConfig+0xac>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d109      	bne.n	80040e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	feff8fff 	.word	0xfeff8fff
 8004114:	40010000 	.word	0x40010000
 8004118:	40010400 	.word	0x40010400

0800411c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <TIM_OC5_SetConfig+0x98>)
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800415c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <TIM_OC5_SetConfig+0x9c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC5_SetConfig+0x5e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <TIM_OC5_SetConfig+0xa0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d109      	bne.n	800418e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	fffeff8f 	.word	0xfffeff8f
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4b1c      	ldr	r3, [pc, #112]	; (800425c <TIM_OC6_SetConfig+0x9c>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	051b      	lsls	r3, r3, #20
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a13      	ldr	r2, [pc, #76]	; (8004260 <TIM_OC6_SetConfig+0xa0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC6_SetConfig+0x60>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <TIM_OC6_SetConfig+0xa4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d109      	bne.n	8004234 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	029b      	lsls	r3, r3, #10
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	feff8fff 	.word	0xfeff8fff
 8004260:	40010000 	.word	0x40010000
 8004264:	40010400 	.word	0x40010400

08004268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 030a 	bic.w	r3, r3, #10
 80042a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0210 	bic.w	r2, r3, #16
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	031b      	lsls	r3, r3, #12
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	f043 0307 	orr.w	r3, r3, #7
 8004348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	021a      	lsls	r2, r3, #8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	431a      	orrs	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2201      	movs	r2, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1a      	ldr	r2, [r3, #32]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	43db      	mvns	r3, r3
 80043be:	401a      	ands	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e06d      	b.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d108      	bne.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800443a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a20      	ldr	r2, [pc, #128]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004472:	d01d      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a16      	ldr	r2, [pc, #88]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10c      	bne.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40014000 	.word	0x40014000
 8004500:	40001800 	.word	0x40001800

08004504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e040      	b.n	80045d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc ff92 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f8f4 	bl	800476c <UART_SetConfig>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e022      	b.n	80045d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fb4a 	bl	8004c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fbd1 	bl	8004d74 <UART_CheckIdleState>
 80045d2:	4603      	mov	r3, r0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045dc:	b480      	push	{r7}
 80045de:	b08b      	sub	sp, #44	; 0x2c
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d156      	bne.n	80046a0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_UART_Transmit_IT+0x22>
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e04f      	b.n	80046a2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_UART_Transmit_IT+0x34>
 800460c:	2302      	movs	r3, #2
 800460e:	e048      	b.n	80046a2 <HAL_UART_Transmit_IT+0xc6>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2221      	movs	r2, #33	; 0x21
 8004640:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464a:	d107      	bne.n	800465c <HAL_UART_Transmit_IT+0x80>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <HAL_UART_Transmit_IT+0xd4>)
 8004658:	669a      	str	r2, [r3, #104]	; 0x68
 800465a:	e002      	b.n	8004662 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_UART_Transmit_IT+0xd8>)
 8004660:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	613b      	str	r3, [r7, #16]
   return(result);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	69f9      	ldr	r1, [r7, #28]
 800468e:	6a3a      	ldr	r2, [r7, #32]
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	61bb      	str	r3, [r7, #24]
   return(result);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	372c      	adds	r7, #44	; 0x2c
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	080051db 	.word	0x080051db
 80046b4:	08005125 	.word	0x08005125

080046b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d13d      	bne.n	800474a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_UART_Receive_IT+0x22>
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e036      	b.n	800474c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UART_Receive_IT+0x34>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e02f      	b.n	800474c <HAL_UART_Receive_IT+0x94>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d018      	beq.n	800473a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	613b      	str	r3, [r7, #16]
   return(result);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	623b      	str	r3, [r7, #32]
 8004728:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	61bb      	str	r3, [r7, #24]
   return(result);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e6      	bne.n	8004708 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	461a      	mov	r2, r3
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fc25 	bl	8004f90 <UART_Start_Receive_IT>
 8004746:	4603      	mov	r3, r0
 8004748:	e000      	b.n	800474c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4ba7      	ldr	r3, [pc, #668]	; (8004a34 <UART_SetConfig+0x2c8>)
 8004798:	4013      	ands	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a95      	ldr	r2, [pc, #596]	; (8004a38 <UART_SetConfig+0x2cc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d120      	bne.n	800482a <UART_SetConfig+0xbe>
 80047e8:	4b94      	ldr	r3, [pc, #592]	; (8004a3c <UART_SetConfig+0x2d0>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d816      	bhi.n	8004824 <UART_SetConfig+0xb8>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x90>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	08004819 	.word	0x08004819
 8004804:	08004813 	.word	0x08004813
 8004808:	0800481f 	.word	0x0800481f
 800480c:	2301      	movs	r3, #1
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e14f      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004812:	2302      	movs	r3, #2
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e14c      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004818:	2304      	movs	r3, #4
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e149      	b.n	8004ab2 <UART_SetConfig+0x346>
 800481e:	2308      	movs	r3, #8
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e146      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e143      	b.n	8004ab2 <UART_SetConfig+0x346>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a84      	ldr	r2, [pc, #528]	; (8004a40 <UART_SetConfig+0x2d4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d132      	bne.n	800489a <UART_SetConfig+0x12e>
 8004834:	4b81      	ldr	r3, [pc, #516]	; (8004a3c <UART_SetConfig+0x2d0>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d828      	bhi.n	8004894 <UART_SetConfig+0x128>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0xdc>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	0800487d 	.word	0x0800487d
 800484c:	08004895 	.word	0x08004895
 8004850:	08004895 	.word	0x08004895
 8004854:	08004895 	.word	0x08004895
 8004858:	08004889 	.word	0x08004889
 800485c:	08004895 	.word	0x08004895
 8004860:	08004895 	.word	0x08004895
 8004864:	08004895 	.word	0x08004895
 8004868:	08004883 	.word	0x08004883
 800486c:	08004895 	.word	0x08004895
 8004870:	08004895 	.word	0x08004895
 8004874:	08004895 	.word	0x08004895
 8004878:	0800488f 	.word	0x0800488f
 800487c:	2300      	movs	r3, #0
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e117      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e114      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e111      	b.n	8004ab2 <UART_SetConfig+0x346>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e10e      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e10b      	b.n	8004ab2 <UART_SetConfig+0x346>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a69      	ldr	r2, [pc, #420]	; (8004a44 <UART_SetConfig+0x2d8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d120      	bne.n	80048e6 <UART_SetConfig+0x17a>
 80048a4:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <UART_SetConfig+0x2d0>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ae:	2b30      	cmp	r3, #48	; 0x30
 80048b0:	d013      	beq.n	80048da <UART_SetConfig+0x16e>
 80048b2:	2b30      	cmp	r3, #48	; 0x30
 80048b4:	d814      	bhi.n	80048e0 <UART_SetConfig+0x174>
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d009      	beq.n	80048ce <UART_SetConfig+0x162>
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d810      	bhi.n	80048e0 <UART_SetConfig+0x174>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <UART_SetConfig+0x15c>
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d006      	beq.n	80048d4 <UART_SetConfig+0x168>
 80048c6:	e00b      	b.n	80048e0 <UART_SetConfig+0x174>
 80048c8:	2300      	movs	r3, #0
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e0f1      	b.n	8004ab2 <UART_SetConfig+0x346>
 80048ce:	2302      	movs	r3, #2
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e0ee      	b.n	8004ab2 <UART_SetConfig+0x346>
 80048d4:	2304      	movs	r3, #4
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e0eb      	b.n	8004ab2 <UART_SetConfig+0x346>
 80048da:	2308      	movs	r3, #8
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e0e8      	b.n	8004ab2 <UART_SetConfig+0x346>
 80048e0:	2310      	movs	r3, #16
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e0e5      	b.n	8004ab2 <UART_SetConfig+0x346>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a57      	ldr	r2, [pc, #348]	; (8004a48 <UART_SetConfig+0x2dc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d120      	bne.n	8004932 <UART_SetConfig+0x1c6>
 80048f0:	4b52      	ldr	r3, [pc, #328]	; (8004a3c <UART_SetConfig+0x2d0>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048fa:	2bc0      	cmp	r3, #192	; 0xc0
 80048fc:	d013      	beq.n	8004926 <UART_SetConfig+0x1ba>
 80048fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004900:	d814      	bhi.n	800492c <UART_SetConfig+0x1c0>
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0x1ae>
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d810      	bhi.n	800492c <UART_SetConfig+0x1c0>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <UART_SetConfig+0x1a8>
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d006      	beq.n	8004920 <UART_SetConfig+0x1b4>
 8004912:	e00b      	b.n	800492c <UART_SetConfig+0x1c0>
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e0cb      	b.n	8004ab2 <UART_SetConfig+0x346>
 800491a:	2302      	movs	r3, #2
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0c8      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004920:	2304      	movs	r3, #4
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0c5      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004926:	2308      	movs	r3, #8
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e0c2      	b.n	8004ab2 <UART_SetConfig+0x346>
 800492c:	2310      	movs	r3, #16
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e0bf      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a45      	ldr	r2, [pc, #276]	; (8004a4c <UART_SetConfig+0x2e0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d125      	bne.n	8004988 <UART_SetConfig+0x21c>
 800493c:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <UART_SetConfig+0x2d0>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494a:	d017      	beq.n	800497c <UART_SetConfig+0x210>
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d817      	bhi.n	8004982 <UART_SetConfig+0x216>
 8004952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004956:	d00b      	beq.n	8004970 <UART_SetConfig+0x204>
 8004958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495c:	d811      	bhi.n	8004982 <UART_SetConfig+0x216>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <UART_SetConfig+0x1fe>
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d006      	beq.n	8004976 <UART_SetConfig+0x20a>
 8004968:	e00b      	b.n	8004982 <UART_SetConfig+0x216>
 800496a:	2300      	movs	r3, #0
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e0a0      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004970:	2302      	movs	r3, #2
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e09d      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004976:	2304      	movs	r3, #4
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e09a      	b.n	8004ab2 <UART_SetConfig+0x346>
 800497c:	2308      	movs	r3, #8
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e097      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004982:	2310      	movs	r3, #16
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e094      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a30      	ldr	r2, [pc, #192]	; (8004a50 <UART_SetConfig+0x2e4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d125      	bne.n	80049de <UART_SetConfig+0x272>
 8004992:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <UART_SetConfig+0x2d0>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800499c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a0:	d017      	beq.n	80049d2 <UART_SetConfig+0x266>
 80049a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a6:	d817      	bhi.n	80049d8 <UART_SetConfig+0x26c>
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ac:	d00b      	beq.n	80049c6 <UART_SetConfig+0x25a>
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d811      	bhi.n	80049d8 <UART_SetConfig+0x26c>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <UART_SetConfig+0x254>
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d006      	beq.n	80049cc <UART_SetConfig+0x260>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x26c>
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e075      	b.n	8004ab2 <UART_SetConfig+0x346>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e072      	b.n	8004ab2 <UART_SetConfig+0x346>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e06f      	b.n	8004ab2 <UART_SetConfig+0x346>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e06c      	b.n	8004ab2 <UART_SetConfig+0x346>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e069      	b.n	8004ab2 <UART_SetConfig+0x346>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <UART_SetConfig+0x2e8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d137      	bne.n	8004a58 <UART_SetConfig+0x2ec>
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <UART_SetConfig+0x2d0>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f6:	d017      	beq.n	8004a28 <UART_SetConfig+0x2bc>
 80049f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049fc:	d817      	bhi.n	8004a2e <UART_SetConfig+0x2c2>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a02:	d00b      	beq.n	8004a1c <UART_SetConfig+0x2b0>
 8004a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a08:	d811      	bhi.n	8004a2e <UART_SetConfig+0x2c2>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <UART_SetConfig+0x2aa>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d006      	beq.n	8004a22 <UART_SetConfig+0x2b6>
 8004a14:	e00b      	b.n	8004a2e <UART_SetConfig+0x2c2>
 8004a16:	2300      	movs	r3, #0
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e04a      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e047      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004a22:	2304      	movs	r3, #4
 8004a24:	77fb      	strb	r3, [r7, #31]
 8004a26:	e044      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e041      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004a2e:	2310      	movs	r3, #16
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e03e      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004a34:	efff69f3 	.word	0xefff69f3
 8004a38:	40011000 	.word	0x40011000
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40004400 	.word	0x40004400
 8004a44:	40004800 	.word	0x40004800
 8004a48:	40004c00 	.word	0x40004c00
 8004a4c:	40005000 	.word	0x40005000
 8004a50:	40011400 	.word	0x40011400
 8004a54:	40007800 	.word	0x40007800
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a71      	ldr	r2, [pc, #452]	; (8004c24 <UART_SetConfig+0x4b8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d125      	bne.n	8004aae <UART_SetConfig+0x342>
 8004a62:	4b71      	ldr	r3, [pc, #452]	; (8004c28 <UART_SetConfig+0x4bc>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a70:	d017      	beq.n	8004aa2 <UART_SetConfig+0x336>
 8004a72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a76:	d817      	bhi.n	8004aa8 <UART_SetConfig+0x33c>
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	d00b      	beq.n	8004a96 <UART_SetConfig+0x32a>
 8004a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a82:	d811      	bhi.n	8004aa8 <UART_SetConfig+0x33c>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <UART_SetConfig+0x324>
 8004a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8c:	d006      	beq.n	8004a9c <UART_SetConfig+0x330>
 8004a8e:	e00b      	b.n	8004aa8 <UART_SetConfig+0x33c>
 8004a90:	2300      	movs	r3, #0
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e00d      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004a96:	2302      	movs	r3, #2
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e00a      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e007      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e004      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e001      	b.n	8004ab2 <UART_SetConfig+0x346>
 8004aae:	2310      	movs	r3, #16
 8004ab0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d15a      	bne.n	8004b72 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004abc:	7ffb      	ldrb	r3, [r7, #31]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d827      	bhi.n	8004b12 <UART_SetConfig+0x3a6>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x35c>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004af5 	.word	0x08004af5
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	08004b13 	.word	0x08004b13
 8004ad8:	08004b03 	.word	0x08004b03
 8004adc:	08004b13 	.word	0x08004b13
 8004ae0:	08004b13 	.word	0x08004b13
 8004ae4:	08004b13 	.word	0x08004b13
 8004ae8:	08004b0b 	.word	0x08004b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aec:	f7fd fe6e 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004af0:	61b8      	str	r0, [r7, #24]
        break;
 8004af2:	e013      	b.n	8004b1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af4:	f7fd fe7e 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8004af8:	61b8      	str	r0, [r7, #24]
        break;
 8004afa:	e00f      	b.n	8004b1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004afc:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <UART_SetConfig+0x4c0>)
 8004afe:	61bb      	str	r3, [r7, #24]
        break;
 8004b00:	e00c      	b.n	8004b1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b02:	f7fd fda1 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8004b06:	61b8      	str	r0, [r7, #24]
        break;
 8004b08:	e008      	b.n	8004b1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0e:	61bb      	str	r3, [r7, #24]
        break;
 8004b10:	e004      	b.n	8004b1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	77bb      	strb	r3, [r7, #30]
        break;
 8004b1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d074      	beq.n	8004c0c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	005a      	lsls	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	441a      	add	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d916      	bls.n	8004b6c <UART_SetConfig+0x400>
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d212      	bcs.n	8004b6c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f023 030f 	bic.w	r3, r3, #15
 8004b4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	89fb      	ldrh	r3, [r7, #14]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	89fa      	ldrh	r2, [r7, #14]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e04f      	b.n	8004c0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	77bb      	strb	r3, [r7, #30]
 8004b70:	e04c      	b.n	8004c0c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b72:	7ffb      	ldrb	r3, [r7, #31]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d828      	bhi.n	8004bca <UART_SetConfig+0x45e>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x414>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bcb 	.word	0x08004bcb
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7fd fe12 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004ba8:	61b8      	str	r0, [r7, #24]
        break;
 8004baa:	e013      	b.n	8004bd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7fd fe22 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	61b8      	str	r0, [r7, #24]
        break;
 8004bb2:	e00f      	b.n	8004bd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <UART_SetConfig+0x4c0>)
 8004bb6:	61bb      	str	r3, [r7, #24]
        break;
 8004bb8:	e00c      	b.n	8004bd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bba:	f7fd fd45 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8004bbe:	61b8      	str	r0, [r7, #24]
        break;
 8004bc0:	e008      	b.n	8004bd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	61bb      	str	r3, [r7, #24]
        break;
 8004bc8:	e004      	b.n	8004bd4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d018      	beq.n	8004c0c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	085a      	lsrs	r2, r3, #1
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	441a      	add	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	d909      	bls.n	8004c08 <UART_SetConfig+0x49c>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d205      	bcs.n	8004c08 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	e001      	b.n	8004c0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c18:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40007c00 	.word	0x40007c00
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	00f42400 	.word	0x00f42400

08004c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01a      	beq.n	8004d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d10a      	bne.n	8004d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  }
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d84:	f7fc fd30 	bl	80017e8 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d10e      	bne.n	8004db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f82d 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e023      	b.n	8004dfe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d10e      	bne.n	8004de2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f817 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e00d      	b.n	8004dfe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b09c      	sub	sp, #112	; 0x70
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e16:	e0a5      	b.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	f000 80a1 	beq.w	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e22:	f7fc fce1 	bl	80017e8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d13e      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e6      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	663b      	str	r3, [r7, #96]	; 0x60
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e067      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d04f      	beq.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d147      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004edc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e6      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f30:	623a      	str	r2, [r7, #32]
 8004f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	69f9      	ldr	r1, [r7, #28]
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e010      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	f43f af4a 	beq.w	8004e18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3770      	adds	r7, #112	; 0x70
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b097      	sub	sp, #92	; 0x5c
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d10e      	bne.n	8004fe2 <UART_Start_Receive_IT+0x52>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <UART_Start_Receive_IT+0x48>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fd6:	e02d      	b.n	8005034 <UART_Start_Receive_IT+0xa4>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	22ff      	movs	r2, #255	; 0xff
 8004fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fe0:	e028      	b.n	8005034 <UART_Start_Receive_IT+0xa4>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <UART_Start_Receive_IT+0x76>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <UART_Start_Receive_IT+0x6c>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	22ff      	movs	r2, #255	; 0xff
 8004ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ffa:	e01b      	b.n	8005034 <UART_Start_Receive_IT+0xa4>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	227f      	movs	r2, #127	; 0x7f
 8005000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005004:	e016      	b.n	8005034 <UART_Start_Receive_IT+0xa4>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800500e:	d10d      	bne.n	800502c <UART_Start_Receive_IT+0x9c>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <UART_Start_Receive_IT+0x92>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	227f      	movs	r2, #127	; 0x7f
 800501c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005020:	e008      	b.n	8005034 <UART_Start_Receive_IT+0xa4>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	223f      	movs	r2, #63	; 0x3f
 8005026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800502a:	e003      	b.n	8005034 <UART_Start_Receive_IT+0xa4>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2222      	movs	r2, #34	; 0x22
 8005040:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3308      	adds	r3, #8
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	657b      	str	r3, [r7, #84]	; 0x54
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3308      	adds	r3, #8
 8005060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005062:	64ba      	str	r2, [r7, #72]	; 0x48
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e5      	bne.n	8005042 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	d107      	bne.n	8005090 <UART_Start_Receive_IT+0x100>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a24      	ldr	r2, [pc, #144]	; (800511c <UART_Start_Receive_IT+0x18c>)
 800508c:	665a      	str	r2, [r3, #100]	; 0x64
 800508e:	e002      	b.n	8005096 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a23      	ldr	r2, [pc, #140]	; (8005120 <UART_Start_Receive_IT+0x190>)
 8005094:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d019      	beq.n	80050da <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80050ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	637b      	str	r3, [r7, #52]	; 0x34
 80050c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e6      	bne.n	80050a6 <UART_Start_Receive_IT+0x116>
 80050d8:	e018      	b.n	800510c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	613b      	str	r3, [r7, #16]
   return(result);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f043 0320 	orr.w	r3, r3, #32
 80050ee:	653b      	str	r3, [r7, #80]	; 0x50
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f8:	623b      	str	r3, [r7, #32]
 80050fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	69f9      	ldr	r1, [r7, #28]
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	61bb      	str	r3, [r7, #24]
   return(result);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	375c      	adds	r7, #92	; 0x5c
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	080053f7 	.word	0x080053f7
 8005120:	0800529b 	.word	0x0800529b

08005124 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b08f      	sub	sp, #60	; 0x3c
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005130:	2b21      	cmp	r3, #33	; 0x21
 8005132:	d14c      	bne.n	80051ce <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d132      	bne.n	80051a6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	61fb      	str	r3, [r7, #28]
   return(result);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005160:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e6      	bne.n	8005140 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005186:	633b      	str	r3, [r7, #48]	; 0x30
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6979      	ldr	r1, [r7, #20]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	613b      	str	r3, [r7, #16]
   return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e6      	bne.n	8005172 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80051a4:	e013      	b.n	80051ce <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051ce:	bf00      	nop
 80051d0:	373c      	adds	r7, #60	; 0x3c
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051da:	b480      	push	{r7}
 80051dc:	b091      	sub	sp, #68	; 0x44
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e6:	2b21      	cmp	r3, #33	; 0x21
 80051e8:	d151      	bne.n	800528e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d132      	bne.n	800525c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	623b      	str	r3, [r7, #32]
   return(result);
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520a:	63bb      	str	r3, [r7, #56]	; 0x38
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	633b      	str	r3, [r7, #48]	; 0x30
 8005216:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800521a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e6      	bne.n	80051f6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	60fb      	str	r3, [r7, #12]
   return(result);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	69b9      	ldr	r1, [r7, #24]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	617b      	str	r3, [r7, #20]
   return(result);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e6      	bne.n	8005228 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800525a:	e018      	b.n	800528e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	1c9a      	adds	r2, r3, #2
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800528e:	bf00      	nop
 8005290:	3744      	adds	r7, #68	; 0x44
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b096      	sub	sp, #88	; 0x58
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	2b22      	cmp	r3, #34	; 0x22
 80052b2:	f040 8094 	bne.w	80053de <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80052c4:	b2d9      	uxtb	r1, r3
 80052c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	400a      	ands	r2, r1
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d177      	bne.n	80053ee <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005312:	653b      	str	r3, [r7, #80]	; 0x50
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
 800531e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e6      	bne.n	80052fe <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	623b      	str	r3, [r7, #32]
   return(result);
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005350:	633a      	str	r2, [r7, #48]	; 0x30
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005374:	2b01      	cmp	r3, #1
 8005376:	d12e      	bne.n	80053d6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	60fb      	str	r3, [r7, #12]
   return(result);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	64bb      	str	r3, [r7, #72]	; 0x48
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	69b9      	ldr	r1, [r7, #24]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	617b      	str	r3, [r7, #20]
   return(result);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e6      	bne.n	800537e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d103      	bne.n	80053c6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2210      	movs	r2, #16
 80053c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff f9c0 	bl	8004754 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053d4:	e00b      	b.n	80053ee <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fc f922 	bl	8001620 <HAL_UART_RxCpltCallback>
}
 80053dc:	e007      	b.n	80053ee <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0208 	orr.w	r2, r2, #8
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	bf00      	nop
 80053f0:	3758      	adds	r7, #88	; 0x58
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b096      	sub	sp, #88	; 0x58
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005404:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540c:	2b22      	cmp	r3, #34	; 0x22
 800540e:	f040 8094 	bne.w	800553a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005422:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005426:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800542a:	4013      	ands	r3, r2
 800542c:	b29a      	uxth	r2, r3
 800542e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005430:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d177      	bne.n	800554a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005478:	643b      	str	r3, [r7, #64]	; 0x40
 800547a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800547e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e6      	bne.n	800545a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3308      	adds	r3, #8
 8005492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	61fb      	str	r3, [r7, #28]
   return(result);
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3308      	adds	r3, #8
 80054aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e5      	bne.n	800548c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d12e      	bne.n	8005532 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	647b      	str	r3, [r7, #68]	; 0x44
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6979      	ldr	r1, [r7, #20]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	613b      	str	r3, [r7, #16]
   return(result);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b10      	cmp	r3, #16
 8005518:	d103      	bne.n	8005522 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2210      	movs	r2, #16
 8005520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff f912 	bl	8004754 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005530:	e00b      	b.n	800554a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fc f874 	bl	8001620 <HAL_UART_RxCpltCallback>
}
 8005538:	e007      	b.n	800554a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0208 	orr.w	r2, r2, #8
 8005548:	619a      	str	r2, [r3, #24]
}
 800554a:	bf00      	nop
 800554c:	3758      	adds	r7, #88	; 0x58
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <__errno>:
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <__errno+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	2000004c 	.word	0x2000004c

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4d0d      	ldr	r5, [pc, #52]	; (8005598 <__libc_init_array+0x38>)
 8005564:	4c0d      	ldr	r4, [pc, #52]	; (800559c <__libc_init_array+0x3c>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	2600      	movs	r6, #0
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	4d0b      	ldr	r5, [pc, #44]	; (80055a0 <__libc_init_array+0x40>)
 8005572:	4c0c      	ldr	r4, [pc, #48]	; (80055a4 <__libc_init_array+0x44>)
 8005574:	f000 fe16 	bl	80061a4 <_init>
 8005578:	1b64      	subs	r4, r4, r5
 800557a:	10a4      	asrs	r4, r4, #2
 800557c:	2600      	movs	r6, #0
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	f855 3b04 	ldr.w	r3, [r5], #4
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	080065c8 	.word	0x080065c8
 800559c:	080065c8 	.word	0x080065c8
 80055a0:	080065c8 	.word	0x080065c8
 80055a4:	080065cc 	.word	0x080065cc

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <siscanf>:
 80055b8:	b40e      	push	{r1, r2, r3}
 80055ba:	b510      	push	{r4, lr}
 80055bc:	b09f      	sub	sp, #124	; 0x7c
 80055be:	ac21      	add	r4, sp, #132	; 0x84
 80055c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80055c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80055c8:	9201      	str	r2, [sp, #4]
 80055ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 80055ce:	9004      	str	r0, [sp, #16]
 80055d0:	9008      	str	r0, [sp, #32]
 80055d2:	f7fa fe3f 	bl	8000254 <strlen>
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <siscanf+0x50>)
 80055d8:	9005      	str	r0, [sp, #20]
 80055da:	9009      	str	r0, [sp, #36]	; 0x24
 80055dc:	930d      	str	r3, [sp, #52]	; 0x34
 80055de:	480b      	ldr	r0, [pc, #44]	; (800560c <siscanf+0x54>)
 80055e0:	9a01      	ldr	r2, [sp, #4]
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	9403      	str	r4, [sp, #12]
 80055e6:	2300      	movs	r3, #0
 80055e8:	9311      	str	r3, [sp, #68]	; 0x44
 80055ea:	9316      	str	r3, [sp, #88]	; 0x58
 80055ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80055f4:	a904      	add	r1, sp, #16
 80055f6:	4623      	mov	r3, r4
 80055f8:	f000 f894 	bl	8005724 <__ssvfiscanf_r>
 80055fc:	b01f      	add	sp, #124	; 0x7c
 80055fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005602:	b003      	add	sp, #12
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	08005611 	.word	0x08005611
 800560c:	2000004c 	.word	0x2000004c

08005610 <__seofread>:
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr

08005614 <strcpy>:
 8005614:	4603      	mov	r3, r0
 8005616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800561a:	f803 2b01 	strb.w	r2, [r3], #1
 800561e:	2a00      	cmp	r2, #0
 8005620:	d1f9      	bne.n	8005616 <strcpy+0x2>
 8005622:	4770      	bx	lr

08005624 <strncmp>:
 8005624:	b510      	push	{r4, lr}
 8005626:	b16a      	cbz	r2, 8005644 <strncmp+0x20>
 8005628:	3901      	subs	r1, #1
 800562a:	1884      	adds	r4, r0, r2
 800562c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005630:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005634:	4293      	cmp	r3, r2
 8005636:	d103      	bne.n	8005640 <strncmp+0x1c>
 8005638:	42a0      	cmp	r0, r4
 800563a:	d001      	beq.n	8005640 <strncmp+0x1c>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f5      	bne.n	800562c <strncmp+0x8>
 8005640:	1a98      	subs	r0, r3, r2
 8005642:	bd10      	pop	{r4, pc}
 8005644:	4610      	mov	r0, r2
 8005646:	e7fc      	b.n	8005642 <strncmp+0x1e>

08005648 <strncpy>:
 8005648:	b510      	push	{r4, lr}
 800564a:	3901      	subs	r1, #1
 800564c:	4603      	mov	r3, r0
 800564e:	b132      	cbz	r2, 800565e <strncpy+0x16>
 8005650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005654:	f803 4b01 	strb.w	r4, [r3], #1
 8005658:	3a01      	subs	r2, #1
 800565a:	2c00      	cmp	r4, #0
 800565c:	d1f7      	bne.n	800564e <strncpy+0x6>
 800565e:	441a      	add	r2, r3
 8005660:	2100      	movs	r1, #0
 8005662:	4293      	cmp	r3, r2
 8005664:	d100      	bne.n	8005668 <strncpy+0x20>
 8005666:	bd10      	pop	{r4, pc}
 8005668:	f803 1b01 	strb.w	r1, [r3], #1
 800566c:	e7f9      	b.n	8005662 <strncpy+0x1a>

0800566e <_sungetc_r>:
 800566e:	b538      	push	{r3, r4, r5, lr}
 8005670:	1c4b      	adds	r3, r1, #1
 8005672:	4614      	mov	r4, r2
 8005674:	d103      	bne.n	800567e <_sungetc_r+0x10>
 8005676:	f04f 35ff 	mov.w	r5, #4294967295
 800567a:	4628      	mov	r0, r5
 800567c:	bd38      	pop	{r3, r4, r5, pc}
 800567e:	8993      	ldrh	r3, [r2, #12]
 8005680:	f023 0320 	bic.w	r3, r3, #32
 8005684:	8193      	strh	r3, [r2, #12]
 8005686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005688:	6852      	ldr	r2, [r2, #4]
 800568a:	b2cd      	uxtb	r5, r1
 800568c:	b18b      	cbz	r3, 80056b2 <_sungetc_r+0x44>
 800568e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005690:	4293      	cmp	r3, r2
 8005692:	dd08      	ble.n	80056a6 <_sungetc_r+0x38>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	1e5a      	subs	r2, r3, #1
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800569e:	6863      	ldr	r3, [r4, #4]
 80056a0:	3301      	adds	r3, #1
 80056a2:	6063      	str	r3, [r4, #4]
 80056a4:	e7e9      	b.n	800567a <_sungetc_r+0xc>
 80056a6:	4621      	mov	r1, r4
 80056a8:	f000 fc3e 	bl	8005f28 <__submore>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d0f1      	beq.n	8005694 <_sungetc_r+0x26>
 80056b0:	e7e1      	b.n	8005676 <_sungetc_r+0x8>
 80056b2:	6921      	ldr	r1, [r4, #16]
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	b151      	cbz	r1, 80056ce <_sungetc_r+0x60>
 80056b8:	4299      	cmp	r1, r3
 80056ba:	d208      	bcs.n	80056ce <_sungetc_r+0x60>
 80056bc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80056c0:	42a9      	cmp	r1, r5
 80056c2:	d104      	bne.n	80056ce <_sungetc_r+0x60>
 80056c4:	3b01      	subs	r3, #1
 80056c6:	3201      	adds	r2, #1
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	6062      	str	r2, [r4, #4]
 80056cc:	e7d5      	b.n	800567a <_sungetc_r+0xc>
 80056ce:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80056d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d6:	6363      	str	r3, [r4, #52]	; 0x34
 80056d8:	2303      	movs	r3, #3
 80056da:	63a3      	str	r3, [r4, #56]	; 0x38
 80056dc:	4623      	mov	r3, r4
 80056de:	f803 5f46 	strb.w	r5, [r3, #70]!
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	2301      	movs	r3, #1
 80056e6:	e7dc      	b.n	80056a2 <_sungetc_r+0x34>

080056e8 <__ssrefill_r>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	460c      	mov	r4, r1
 80056ec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80056ee:	b169      	cbz	r1, 800570c <__ssrefill_r+0x24>
 80056f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056f4:	4299      	cmp	r1, r3
 80056f6:	d001      	beq.n	80056fc <__ssrefill_r+0x14>
 80056f8:	f000 fc60 	bl	8005fbc <_free_r>
 80056fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	2000      	movs	r0, #0
 8005702:	6360      	str	r0, [r4, #52]	; 0x34
 8005704:	b113      	cbz	r3, 800570c <__ssrefill_r+0x24>
 8005706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd10      	pop	{r4, pc}
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	6023      	str	r3, [r4, #0]
 8005710:	2300      	movs	r3, #0
 8005712:	6063      	str	r3, [r4, #4]
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f043 0320 	orr.w	r3, r3, #32
 800571a:	81a3      	strh	r3, [r4, #12]
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	e7f3      	b.n	800570a <__ssrefill_r+0x22>
	...

08005724 <__ssvfiscanf_r>:
 8005724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005728:	460c      	mov	r4, r1
 800572a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800572e:	2100      	movs	r1, #0
 8005730:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005734:	49b2      	ldr	r1, [pc, #712]	; (8005a00 <__ssvfiscanf_r+0x2dc>)
 8005736:	91a0      	str	r1, [sp, #640]	; 0x280
 8005738:	f10d 0804 	add.w	r8, sp, #4
 800573c:	49b1      	ldr	r1, [pc, #708]	; (8005a04 <__ssvfiscanf_r+0x2e0>)
 800573e:	4fb2      	ldr	r7, [pc, #712]	; (8005a08 <__ssvfiscanf_r+0x2e4>)
 8005740:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8005a0c <__ssvfiscanf_r+0x2e8>
 8005744:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005748:	4606      	mov	r6, r0
 800574a:	91a1      	str	r1, [sp, #644]	; 0x284
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	f892 a000 	ldrb.w	sl, [r2]
 8005752:	f1ba 0f00 	cmp.w	sl, #0
 8005756:	f000 8151 	beq.w	80059fc <__ssvfiscanf_r+0x2d8>
 800575a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800575e:	f013 0308 	ands.w	r3, r3, #8
 8005762:	f102 0501 	add.w	r5, r2, #1
 8005766:	d019      	beq.n	800579c <__ssvfiscanf_r+0x78>
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	dd0f      	ble.n	800578e <__ssvfiscanf_r+0x6a>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	5cba      	ldrb	r2, [r7, r2]
 8005774:	0712      	lsls	r2, r2, #28
 8005776:	d401      	bmi.n	800577c <__ssvfiscanf_r+0x58>
 8005778:	462a      	mov	r2, r5
 800577a:	e7e8      	b.n	800574e <__ssvfiscanf_r+0x2a>
 800577c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800577e:	3201      	adds	r2, #1
 8005780:	9245      	str	r2, [sp, #276]	; 0x114
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	3301      	adds	r3, #1
 8005786:	3a01      	subs	r2, #1
 8005788:	6062      	str	r2, [r4, #4]
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	e7ec      	b.n	8005768 <__ssvfiscanf_r+0x44>
 800578e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005790:	4621      	mov	r1, r4
 8005792:	4630      	mov	r0, r6
 8005794:	4798      	blx	r3
 8005796:	2800      	cmp	r0, #0
 8005798:	d0e9      	beq.n	800576e <__ssvfiscanf_r+0x4a>
 800579a:	e7ed      	b.n	8005778 <__ssvfiscanf_r+0x54>
 800579c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80057a0:	f040 8083 	bne.w	80058aa <__ssvfiscanf_r+0x186>
 80057a4:	9341      	str	r3, [sp, #260]	; 0x104
 80057a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80057a8:	7853      	ldrb	r3, [r2, #1]
 80057aa:	2b2a      	cmp	r3, #42	; 0x2a
 80057ac:	bf02      	ittt	eq
 80057ae:	2310      	moveq	r3, #16
 80057b0:	1c95      	addeq	r5, r2, #2
 80057b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80057b4:	220a      	movs	r2, #10
 80057b6:	46ab      	mov	fp, r5
 80057b8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80057bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80057c0:	2b09      	cmp	r3, #9
 80057c2:	d91d      	bls.n	8005800 <__ssvfiscanf_r+0xdc>
 80057c4:	4891      	ldr	r0, [pc, #580]	; (8005a0c <__ssvfiscanf_r+0x2e8>)
 80057c6:	2203      	movs	r2, #3
 80057c8:	f7fa fd52 	bl	8000270 <memchr>
 80057cc:	b140      	cbz	r0, 80057e0 <__ssvfiscanf_r+0xbc>
 80057ce:	2301      	movs	r3, #1
 80057d0:	eba0 0009 	sub.w	r0, r0, r9
 80057d4:	fa03 f000 	lsl.w	r0, r3, r0
 80057d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80057da:	4318      	orrs	r0, r3
 80057dc:	9041      	str	r0, [sp, #260]	; 0x104
 80057de:	465d      	mov	r5, fp
 80057e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80057e4:	2b78      	cmp	r3, #120	; 0x78
 80057e6:	d806      	bhi.n	80057f6 <__ssvfiscanf_r+0xd2>
 80057e8:	2b57      	cmp	r3, #87	; 0x57
 80057ea:	d810      	bhi.n	800580e <__ssvfiscanf_r+0xea>
 80057ec:	2b25      	cmp	r3, #37	; 0x25
 80057ee:	d05c      	beq.n	80058aa <__ssvfiscanf_r+0x186>
 80057f0:	d856      	bhi.n	80058a0 <__ssvfiscanf_r+0x17c>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d074      	beq.n	80058e0 <__ssvfiscanf_r+0x1bc>
 80057f6:	2303      	movs	r3, #3
 80057f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80057fa:	230a      	movs	r3, #10
 80057fc:	9342      	str	r3, [sp, #264]	; 0x108
 80057fe:	e081      	b.n	8005904 <__ssvfiscanf_r+0x1e0>
 8005800:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005802:	fb02 1303 	mla	r3, r2, r3, r1
 8005806:	3b30      	subs	r3, #48	; 0x30
 8005808:	9343      	str	r3, [sp, #268]	; 0x10c
 800580a:	465d      	mov	r5, fp
 800580c:	e7d3      	b.n	80057b6 <__ssvfiscanf_r+0x92>
 800580e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005812:	2a20      	cmp	r2, #32
 8005814:	d8ef      	bhi.n	80057f6 <__ssvfiscanf_r+0xd2>
 8005816:	a101      	add	r1, pc, #4	; (adr r1, 800581c <__ssvfiscanf_r+0xf8>)
 8005818:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800581c:	080058ef 	.word	0x080058ef
 8005820:	080057f7 	.word	0x080057f7
 8005824:	080057f7 	.word	0x080057f7
 8005828:	0800594d 	.word	0x0800594d
 800582c:	080057f7 	.word	0x080057f7
 8005830:	080057f7 	.word	0x080057f7
 8005834:	080057f7 	.word	0x080057f7
 8005838:	080057f7 	.word	0x080057f7
 800583c:	080057f7 	.word	0x080057f7
 8005840:	080057f7 	.word	0x080057f7
 8005844:	080057f7 	.word	0x080057f7
 8005848:	08005963 	.word	0x08005963
 800584c:	08005939 	.word	0x08005939
 8005850:	080058a7 	.word	0x080058a7
 8005854:	080058a7 	.word	0x080058a7
 8005858:	080058a7 	.word	0x080058a7
 800585c:	080057f7 	.word	0x080057f7
 8005860:	0800593d 	.word	0x0800593d
 8005864:	080057f7 	.word	0x080057f7
 8005868:	080057f7 	.word	0x080057f7
 800586c:	080057f7 	.word	0x080057f7
 8005870:	080057f7 	.word	0x080057f7
 8005874:	08005973 	.word	0x08005973
 8005878:	08005945 	.word	0x08005945
 800587c:	080058e7 	.word	0x080058e7
 8005880:	080057f7 	.word	0x080057f7
 8005884:	080057f7 	.word	0x080057f7
 8005888:	0800596f 	.word	0x0800596f
 800588c:	080057f7 	.word	0x080057f7
 8005890:	08005939 	.word	0x08005939
 8005894:	080057f7 	.word	0x080057f7
 8005898:	080057f7 	.word	0x080057f7
 800589c:	080058ef 	.word	0x080058ef
 80058a0:	3b45      	subs	r3, #69	; 0x45
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d8a7      	bhi.n	80057f6 <__ssvfiscanf_r+0xd2>
 80058a6:	2305      	movs	r3, #5
 80058a8:	e02b      	b.n	8005902 <__ssvfiscanf_r+0x1de>
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dd0d      	ble.n	80058cc <__ssvfiscanf_r+0x1a8>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	4552      	cmp	r2, sl
 80058b6:	f040 80a1 	bne.w	80059fc <__ssvfiscanf_r+0x2d8>
 80058ba:	3301      	adds	r3, #1
 80058bc:	6862      	ldr	r2, [r4, #4]
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80058c2:	3a01      	subs	r2, #1
 80058c4:	3301      	adds	r3, #1
 80058c6:	6062      	str	r2, [r4, #4]
 80058c8:	9345      	str	r3, [sp, #276]	; 0x114
 80058ca:	e755      	b.n	8005778 <__ssvfiscanf_r+0x54>
 80058cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80058ce:	4621      	mov	r1, r4
 80058d0:	4630      	mov	r0, r6
 80058d2:	4798      	blx	r3
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d0eb      	beq.n	80058b0 <__ssvfiscanf_r+0x18c>
 80058d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80058da:	2800      	cmp	r0, #0
 80058dc:	f040 8084 	bne.w	80059e8 <__ssvfiscanf_r+0x2c4>
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	e086      	b.n	80059f4 <__ssvfiscanf_r+0x2d0>
 80058e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80058e8:	f042 0220 	orr.w	r2, r2, #32
 80058ec:	9241      	str	r2, [sp, #260]	; 0x104
 80058ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80058f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f4:	9241      	str	r2, [sp, #260]	; 0x104
 80058f6:	2210      	movs	r2, #16
 80058f8:	2b6f      	cmp	r3, #111	; 0x6f
 80058fa:	9242      	str	r2, [sp, #264]	; 0x108
 80058fc:	bf34      	ite	cc
 80058fe:	2303      	movcc	r3, #3
 8005900:	2304      	movcs	r3, #4
 8005902:	9347      	str	r3, [sp, #284]	; 0x11c
 8005904:	6863      	ldr	r3, [r4, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	dd41      	ble.n	800598e <__ssvfiscanf_r+0x26a>
 800590a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800590c:	0659      	lsls	r1, r3, #25
 800590e:	d404      	bmi.n	800591a <__ssvfiscanf_r+0x1f6>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	5cba      	ldrb	r2, [r7, r2]
 8005916:	0712      	lsls	r2, r2, #28
 8005918:	d440      	bmi.n	800599c <__ssvfiscanf_r+0x278>
 800591a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800591c:	2b02      	cmp	r3, #2
 800591e:	dc4f      	bgt.n	80059c0 <__ssvfiscanf_r+0x29c>
 8005920:	466b      	mov	r3, sp
 8005922:	4622      	mov	r2, r4
 8005924:	a941      	add	r1, sp, #260	; 0x104
 8005926:	4630      	mov	r0, r6
 8005928:	f000 f874 	bl	8005a14 <_scanf_chars>
 800592c:	2801      	cmp	r0, #1
 800592e:	d065      	beq.n	80059fc <__ssvfiscanf_r+0x2d8>
 8005930:	2802      	cmp	r0, #2
 8005932:	f47f af21 	bne.w	8005778 <__ssvfiscanf_r+0x54>
 8005936:	e7cf      	b.n	80058d8 <__ssvfiscanf_r+0x1b4>
 8005938:	220a      	movs	r2, #10
 800593a:	e7dd      	b.n	80058f8 <__ssvfiscanf_r+0x1d4>
 800593c:	2300      	movs	r3, #0
 800593e:	9342      	str	r3, [sp, #264]	; 0x108
 8005940:	2303      	movs	r3, #3
 8005942:	e7de      	b.n	8005902 <__ssvfiscanf_r+0x1de>
 8005944:	2308      	movs	r3, #8
 8005946:	9342      	str	r3, [sp, #264]	; 0x108
 8005948:	2304      	movs	r3, #4
 800594a:	e7da      	b.n	8005902 <__ssvfiscanf_r+0x1de>
 800594c:	4629      	mov	r1, r5
 800594e:	4640      	mov	r0, r8
 8005950:	f000 f9ac 	bl	8005cac <__sccl>
 8005954:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595a:	9341      	str	r3, [sp, #260]	; 0x104
 800595c:	4605      	mov	r5, r0
 800595e:	2301      	movs	r3, #1
 8005960:	e7cf      	b.n	8005902 <__ssvfiscanf_r+0x1de>
 8005962:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005968:	9341      	str	r3, [sp, #260]	; 0x104
 800596a:	2300      	movs	r3, #0
 800596c:	e7c9      	b.n	8005902 <__ssvfiscanf_r+0x1de>
 800596e:	2302      	movs	r3, #2
 8005970:	e7c7      	b.n	8005902 <__ssvfiscanf_r+0x1de>
 8005972:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005974:	06c3      	lsls	r3, r0, #27
 8005976:	f53f aeff 	bmi.w	8005778 <__ssvfiscanf_r+0x54>
 800597a:	9b00      	ldr	r3, [sp, #0]
 800597c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800597e:	1d19      	adds	r1, r3, #4
 8005980:	9100      	str	r1, [sp, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	07c0      	lsls	r0, r0, #31
 8005986:	bf4c      	ite	mi
 8005988:	801a      	strhmi	r2, [r3, #0]
 800598a:	601a      	strpl	r2, [r3, #0]
 800598c:	e6f4      	b.n	8005778 <__ssvfiscanf_r+0x54>
 800598e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005990:	4621      	mov	r1, r4
 8005992:	4630      	mov	r0, r6
 8005994:	4798      	blx	r3
 8005996:	2800      	cmp	r0, #0
 8005998:	d0b7      	beq.n	800590a <__ssvfiscanf_r+0x1e6>
 800599a:	e79d      	b.n	80058d8 <__ssvfiscanf_r+0x1b4>
 800599c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800599e:	3201      	adds	r2, #1
 80059a0:	9245      	str	r2, [sp, #276]	; 0x114
 80059a2:	6862      	ldr	r2, [r4, #4]
 80059a4:	3a01      	subs	r2, #1
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	6062      	str	r2, [r4, #4]
 80059aa:	dd02      	ble.n	80059b2 <__ssvfiscanf_r+0x28e>
 80059ac:	3301      	adds	r3, #1
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	e7ae      	b.n	8005910 <__ssvfiscanf_r+0x1ec>
 80059b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80059b4:	4621      	mov	r1, r4
 80059b6:	4630      	mov	r0, r6
 80059b8:	4798      	blx	r3
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d0a8      	beq.n	8005910 <__ssvfiscanf_r+0x1ec>
 80059be:	e78b      	b.n	80058d8 <__ssvfiscanf_r+0x1b4>
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	dc06      	bgt.n	80059d2 <__ssvfiscanf_r+0x2ae>
 80059c4:	466b      	mov	r3, sp
 80059c6:	4622      	mov	r2, r4
 80059c8:	a941      	add	r1, sp, #260	; 0x104
 80059ca:	4630      	mov	r0, r6
 80059cc:	f000 f87a 	bl	8005ac4 <_scanf_i>
 80059d0:	e7ac      	b.n	800592c <__ssvfiscanf_r+0x208>
 80059d2:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <__ssvfiscanf_r+0x2ec>)
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f43f aecf 	beq.w	8005778 <__ssvfiscanf_r+0x54>
 80059da:	466b      	mov	r3, sp
 80059dc:	4622      	mov	r2, r4
 80059de:	a941      	add	r1, sp, #260	; 0x104
 80059e0:	4630      	mov	r0, r6
 80059e2:	f3af 8000 	nop.w
 80059e6:	e7a1      	b.n	800592c <__ssvfiscanf_r+0x208>
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059ee:	bf18      	it	ne
 80059f0:	f04f 30ff 	movne.w	r0, #4294967295
 80059f4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80059fe:	e7f9      	b.n	80059f4 <__ssvfiscanf_r+0x2d0>
 8005a00:	0800566f 	.word	0x0800566f
 8005a04:	080056e9 	.word	0x080056e9
 8005a08:	08006460 	.word	0x08006460
 8005a0c:	08006440 	.word	0x08006440
 8005a10:	00000000 	.word	0x00000000

08005a14 <_scanf_chars>:
 8005a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a18:	4615      	mov	r5, r2
 8005a1a:	688a      	ldr	r2, [r1, #8]
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b932      	cbnz	r2, 8005a30 <_scanf_chars+0x1c>
 8005a22:	698a      	ldr	r2, [r1, #24]
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2201      	moveq	r2, #1
 8005a2a:	f04f 32ff 	movne.w	r2, #4294967295
 8005a2e:	608a      	str	r2, [r1, #8]
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005ac0 <_scanf_chars+0xac>
 8005a36:	06d1      	lsls	r1, r2, #27
 8005a38:	bf5f      	itttt	pl
 8005a3a:	681a      	ldrpl	r2, [r3, #0]
 8005a3c:	1d11      	addpl	r1, r2, #4
 8005a3e:	6019      	strpl	r1, [r3, #0]
 8005a40:	6816      	ldrpl	r6, [r2, #0]
 8005a42:	2700      	movs	r7, #0
 8005a44:	69a0      	ldr	r0, [r4, #24]
 8005a46:	b188      	cbz	r0, 8005a6c <_scanf_chars+0x58>
 8005a48:	2801      	cmp	r0, #1
 8005a4a:	d107      	bne.n	8005a5c <_scanf_chars+0x48>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	6963      	ldr	r3, [r4, #20]
 8005a52:	5c9b      	ldrb	r3, [r3, r2]
 8005a54:	b953      	cbnz	r3, 8005a6c <_scanf_chars+0x58>
 8005a56:	bb27      	cbnz	r7, 8005aa2 <_scanf_chars+0x8e>
 8005a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a5c:	2802      	cmp	r0, #2
 8005a5e:	d120      	bne.n	8005aa2 <_scanf_chars+0x8e>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005a68:	071b      	lsls	r3, r3, #28
 8005a6a:	d41a      	bmi.n	8005aa2 <_scanf_chars+0x8e>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	06da      	lsls	r2, r3, #27
 8005a70:	bf5e      	ittt	pl
 8005a72:	682b      	ldrpl	r3, [r5, #0]
 8005a74:	781b      	ldrbpl	r3, [r3, #0]
 8005a76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005a7a:	682a      	ldr	r2, [r5, #0]
 8005a7c:	686b      	ldr	r3, [r5, #4]
 8005a7e:	3201      	adds	r2, #1
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	68a2      	ldr	r2, [r4, #8]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	3a01      	subs	r2, #1
 8005a88:	606b      	str	r3, [r5, #4]
 8005a8a:	3701      	adds	r7, #1
 8005a8c:	60a2      	str	r2, [r4, #8]
 8005a8e:	b142      	cbz	r2, 8005aa2 <_scanf_chars+0x8e>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dcd7      	bgt.n	8005a44 <_scanf_chars+0x30>
 8005a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4798      	blx	r3
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0d0      	beq.n	8005a44 <_scanf_chars+0x30>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	f013 0310 	ands.w	r3, r3, #16
 8005aa8:	d105      	bne.n	8005ab6 <_scanf_chars+0xa2>
 8005aaa:	68e2      	ldr	r2, [r4, #12]
 8005aac:	3201      	adds	r2, #1
 8005aae:	60e2      	str	r2, [r4, #12]
 8005ab0:	69a2      	ldr	r2, [r4, #24]
 8005ab2:	b102      	cbz	r2, 8005ab6 <_scanf_chars+0xa2>
 8005ab4:	7033      	strb	r3, [r6, #0]
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	441f      	add	r7, r3
 8005aba:	6127      	str	r7, [r4, #16]
 8005abc:	2000      	movs	r0, #0
 8005abe:	e7cb      	b.n	8005a58 <_scanf_chars+0x44>
 8005ac0:	08006460 	.word	0x08006460

08005ac4 <_scanf_i>:
 8005ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac8:	4698      	mov	r8, r3
 8005aca:	4b74      	ldr	r3, [pc, #464]	; (8005c9c <_scanf_i+0x1d8>)
 8005acc:	460c      	mov	r4, r1
 8005ace:	4682      	mov	sl, r0
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	ab03      	add	r3, sp, #12
 8005ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ade:	4b70      	ldr	r3, [pc, #448]	; (8005ca0 <_scanf_i+0x1dc>)
 8005ae0:	69a1      	ldr	r1, [r4, #24]
 8005ae2:	4a70      	ldr	r2, [pc, #448]	; (8005ca4 <_scanf_i+0x1e0>)
 8005ae4:	2903      	cmp	r1, #3
 8005ae6:	bf18      	it	ne
 8005ae8:	461a      	movne	r2, r3
 8005aea:	68a3      	ldr	r3, [r4, #8]
 8005aec:	9201      	str	r2, [sp, #4]
 8005aee:	1e5a      	subs	r2, r3, #1
 8005af0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005af4:	bf88      	it	hi
 8005af6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005afa:	4627      	mov	r7, r4
 8005afc:	bf82      	ittt	hi
 8005afe:	eb03 0905 	addhi.w	r9, r3, r5
 8005b02:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005b06:	60a3      	strhi	r3, [r4, #8]
 8005b08:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005b0c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005b10:	bf98      	it	ls
 8005b12:	f04f 0900 	movls.w	r9, #0
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	463d      	mov	r5, r7
 8005b1a:	f04f 0b00 	mov.w	fp, #0
 8005b1e:	6831      	ldr	r1, [r6, #0]
 8005b20:	ab03      	add	r3, sp, #12
 8005b22:	7809      	ldrb	r1, [r1, #0]
 8005b24:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f7fa fba1 	bl	8000270 <memchr>
 8005b2e:	b328      	cbz	r0, 8005b7c <_scanf_i+0xb8>
 8005b30:	f1bb 0f01 	cmp.w	fp, #1
 8005b34:	d159      	bne.n	8005bea <_scanf_i+0x126>
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	b92a      	cbnz	r2, 8005b46 <_scanf_i+0x82>
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	6022      	str	r2, [r4, #0]
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005b4c:	6022      	str	r2, [r4, #0]
 8005b4e:	68a2      	ldr	r2, [r4, #8]
 8005b50:	1e51      	subs	r1, r2, #1
 8005b52:	60a1      	str	r1, [r4, #8]
 8005b54:	b192      	cbz	r2, 8005b7c <_scanf_i+0xb8>
 8005b56:	6832      	ldr	r2, [r6, #0]
 8005b58:	1c51      	adds	r1, r2, #1
 8005b5a:	6031      	str	r1, [r6, #0]
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	f805 2b01 	strb.w	r2, [r5], #1
 8005b62:	6872      	ldr	r2, [r6, #4]
 8005b64:	3a01      	subs	r2, #1
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	6072      	str	r2, [r6, #4]
 8005b6a:	dc07      	bgt.n	8005b7c <_scanf_i+0xb8>
 8005b6c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005b70:	4631      	mov	r1, r6
 8005b72:	4650      	mov	r0, sl
 8005b74:	4790      	blx	r2
 8005b76:	2800      	cmp	r0, #0
 8005b78:	f040 8085 	bne.w	8005c86 <_scanf_i+0x1c2>
 8005b7c:	f10b 0b01 	add.w	fp, fp, #1
 8005b80:	f1bb 0f03 	cmp.w	fp, #3
 8005b84:	d1cb      	bne.n	8005b1e <_scanf_i+0x5a>
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	b90b      	cbnz	r3, 8005b8e <_scanf_i+0xca>
 8005b8a:	230a      	movs	r3, #10
 8005b8c:	6063      	str	r3, [r4, #4]
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	4945      	ldr	r1, [pc, #276]	; (8005ca8 <_scanf_i+0x1e4>)
 8005b92:	6960      	ldr	r0, [r4, #20]
 8005b94:	1ac9      	subs	r1, r1, r3
 8005b96:	f000 f889 	bl	8005cac <__sccl>
 8005b9a:	f04f 0b00 	mov.w	fp, #0
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d03d      	beq.n	8005c22 <_scanf_i+0x15e>
 8005ba6:	6831      	ldr	r1, [r6, #0]
 8005ba8:	6960      	ldr	r0, [r4, #20]
 8005baa:	f891 c000 	ldrb.w	ip, [r1]
 8005bae:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d035      	beq.n	8005c22 <_scanf_i+0x15e>
 8005bb6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005bba:	d124      	bne.n	8005c06 <_scanf_i+0x142>
 8005bbc:	0510      	lsls	r0, r2, #20
 8005bbe:	d522      	bpl.n	8005c06 <_scanf_i+0x142>
 8005bc0:	f10b 0b01 	add.w	fp, fp, #1
 8005bc4:	f1b9 0f00 	cmp.w	r9, #0
 8005bc8:	d003      	beq.n	8005bd2 <_scanf_i+0x10e>
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f109 39ff 	add.w	r9, r9, #4294967295
 8005bd0:	60a3      	str	r3, [r4, #8]
 8005bd2:	6873      	ldr	r3, [r6, #4]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	6073      	str	r3, [r6, #4]
 8005bda:	dd1b      	ble.n	8005c14 <_scanf_i+0x150>
 8005bdc:	6833      	ldr	r3, [r6, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	60a3      	str	r3, [r4, #8]
 8005be8:	e7d9      	b.n	8005b9e <_scanf_i+0xda>
 8005bea:	f1bb 0f02 	cmp.w	fp, #2
 8005bee:	d1ae      	bne.n	8005b4e <_scanf_i+0x8a>
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005bf6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005bfa:	d1bf      	bne.n	8005b7c <_scanf_i+0xb8>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	6063      	str	r3, [r4, #4]
 8005c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c04:	e7a2      	b.n	8005b4c <_scanf_i+0x88>
 8005c06:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005c0a:	6022      	str	r2, [r4, #0]
 8005c0c:	780b      	ldrb	r3, [r1, #0]
 8005c0e:	f805 3b01 	strb.w	r3, [r5], #1
 8005c12:	e7de      	b.n	8005bd2 <_scanf_i+0x10e>
 8005c14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	4798      	blx	r3
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d0df      	beq.n	8005be2 <_scanf_i+0x11e>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	05d9      	lsls	r1, r3, #23
 8005c26:	d50d      	bpl.n	8005c44 <_scanf_i+0x180>
 8005c28:	42bd      	cmp	r5, r7
 8005c2a:	d909      	bls.n	8005c40 <_scanf_i+0x17c>
 8005c2c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c34:	4632      	mov	r2, r6
 8005c36:	4650      	mov	r0, sl
 8005c38:	4798      	blx	r3
 8005c3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c3e:	464d      	mov	r5, r9
 8005c40:	42bd      	cmp	r5, r7
 8005c42:	d028      	beq.n	8005c96 <_scanf_i+0x1d2>
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	f012 0210 	ands.w	r2, r2, #16
 8005c4a:	d113      	bne.n	8005c74 <_scanf_i+0x1b0>
 8005c4c:	702a      	strb	r2, [r5, #0]
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	9e01      	ldr	r6, [sp, #4]
 8005c52:	4639      	mov	r1, r7
 8005c54:	4650      	mov	r0, sl
 8005c56:	47b0      	blx	r6
 8005c58:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5c:	6821      	ldr	r1, [r4, #0]
 8005c5e:	1d1a      	adds	r2, r3, #4
 8005c60:	f8c8 2000 	str.w	r2, [r8]
 8005c64:	f011 0f20 	tst.w	r1, #32
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	d00f      	beq.n	8005c8c <_scanf_i+0x1c8>
 8005c6c:	6018      	str	r0, [r3, #0]
 8005c6e:	68e3      	ldr	r3, [r4, #12]
 8005c70:	3301      	adds	r3, #1
 8005c72:	60e3      	str	r3, [r4, #12]
 8005c74:	1bed      	subs	r5, r5, r7
 8005c76:	44ab      	add	fp, r5
 8005c78:	6925      	ldr	r5, [r4, #16]
 8005c7a:	445d      	add	r5, fp
 8005c7c:	6125      	str	r5, [r4, #16]
 8005c7e:	2000      	movs	r0, #0
 8005c80:	b007      	add	sp, #28
 8005c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c86:	f04f 0b00 	mov.w	fp, #0
 8005c8a:	e7ca      	b.n	8005c22 <_scanf_i+0x15e>
 8005c8c:	07ca      	lsls	r2, r1, #31
 8005c8e:	bf4c      	ite	mi
 8005c90:	8018      	strhmi	r0, [r3, #0]
 8005c92:	6018      	strpl	r0, [r3, #0]
 8005c94:	e7eb      	b.n	8005c6e <_scanf_i+0x1aa>
 8005c96:	2001      	movs	r0, #1
 8005c98:	e7f2      	b.n	8005c80 <_scanf_i+0x1bc>
 8005c9a:	bf00      	nop
 8005c9c:	0800641c 	.word	0x0800641c
 8005ca0:	08005f25 	.word	0x08005f25
 8005ca4:	08005e29 	.word	0x08005e29
 8005ca8:	0800645d 	.word	0x0800645d

08005cac <__sccl>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	780b      	ldrb	r3, [r1, #0]
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	2b5e      	cmp	r3, #94	; 0x5e
 8005cb4:	bf0b      	itete	eq
 8005cb6:	784b      	ldrbeq	r3, [r1, #1]
 8005cb8:	1c48      	addne	r0, r1, #1
 8005cba:	1c88      	addeq	r0, r1, #2
 8005cbc:	2200      	movne	r2, #0
 8005cbe:	bf08      	it	eq
 8005cc0:	2201      	moveq	r2, #1
 8005cc2:	1e61      	subs	r1, r4, #1
 8005cc4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005cc8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005ccc:	42a9      	cmp	r1, r5
 8005cce:	d1fb      	bne.n	8005cc8 <__sccl+0x1c>
 8005cd0:	b90b      	cbnz	r3, 8005cd6 <__sccl+0x2a>
 8005cd2:	3801      	subs	r0, #1
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
 8005cd6:	f082 0101 	eor.w	r1, r2, #1
 8005cda:	54e1      	strb	r1, [r4, r3]
 8005cdc:	1c42      	adds	r2, r0, #1
 8005cde:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005ce2:	2d2d      	cmp	r5, #45	; 0x2d
 8005ce4:	f102 36ff 	add.w	r6, r2, #4294967295
 8005ce8:	4610      	mov	r0, r2
 8005cea:	d006      	beq.n	8005cfa <__sccl+0x4e>
 8005cec:	2d5d      	cmp	r5, #93	; 0x5d
 8005cee:	d0f1      	beq.n	8005cd4 <__sccl+0x28>
 8005cf0:	b90d      	cbnz	r5, 8005cf6 <__sccl+0x4a>
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	e7ee      	b.n	8005cd4 <__sccl+0x28>
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	e7ef      	b.n	8005cda <__sccl+0x2e>
 8005cfa:	7816      	ldrb	r6, [r2, #0]
 8005cfc:	2e5d      	cmp	r6, #93	; 0x5d
 8005cfe:	d0fa      	beq.n	8005cf6 <__sccl+0x4a>
 8005d00:	42b3      	cmp	r3, r6
 8005d02:	dcf8      	bgt.n	8005cf6 <__sccl+0x4a>
 8005d04:	4618      	mov	r0, r3
 8005d06:	3001      	adds	r0, #1
 8005d08:	4286      	cmp	r6, r0
 8005d0a:	5421      	strb	r1, [r4, r0]
 8005d0c:	dcfb      	bgt.n	8005d06 <__sccl+0x5a>
 8005d0e:	43d8      	mvns	r0, r3
 8005d10:	4430      	add	r0, r6
 8005d12:	1c5d      	adds	r5, r3, #1
 8005d14:	42b3      	cmp	r3, r6
 8005d16:	bfa8      	it	ge
 8005d18:	2000      	movge	r0, #0
 8005d1a:	182b      	adds	r3, r5, r0
 8005d1c:	3202      	adds	r2, #2
 8005d1e:	e7de      	b.n	8005cde <__sccl+0x32>

08005d20 <_strtol_l.isra.0>:
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d26:	d001      	beq.n	8005d2c <_strtol_l.isra.0+0xc>
 8005d28:	2b24      	cmp	r3, #36	; 0x24
 8005d2a:	d906      	bls.n	8005d3a <_strtol_l.isra.0+0x1a>
 8005d2c:	f7ff fc12 	bl	8005554 <__errno>
 8005d30:	2316      	movs	r3, #22
 8005d32:	6003      	str	r3, [r0, #0]
 8005d34:	2000      	movs	r0, #0
 8005d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3a:	4f3a      	ldr	r7, [pc, #232]	; (8005e24 <_strtol_l.isra.0+0x104>)
 8005d3c:	468e      	mov	lr, r1
 8005d3e:	4676      	mov	r6, lr
 8005d40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005d44:	5de5      	ldrb	r5, [r4, r7]
 8005d46:	f015 0508 	ands.w	r5, r5, #8
 8005d4a:	d1f8      	bne.n	8005d3e <_strtol_l.isra.0+0x1e>
 8005d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8005d4e:	d134      	bne.n	8005dba <_strtol_l.isra.0+0x9a>
 8005d50:	f89e 4000 	ldrb.w	r4, [lr]
 8005d54:	f04f 0801 	mov.w	r8, #1
 8005d58:	f106 0e02 	add.w	lr, r6, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d05c      	beq.n	8005e1a <_strtol_l.isra.0+0xfa>
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d10c      	bne.n	8005d7e <_strtol_l.isra.0+0x5e>
 8005d64:	2c30      	cmp	r4, #48	; 0x30
 8005d66:	d10a      	bne.n	8005d7e <_strtol_l.isra.0+0x5e>
 8005d68:	f89e 4000 	ldrb.w	r4, [lr]
 8005d6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d70:	2c58      	cmp	r4, #88	; 0x58
 8005d72:	d14d      	bne.n	8005e10 <_strtol_l.isra.0+0xf0>
 8005d74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f10e 0e02 	add.w	lr, lr, #2
 8005d7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005d82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d86:	2600      	movs	r6, #0
 8005d88:	fbbc f9f3 	udiv	r9, ip, r3
 8005d8c:	4635      	mov	r5, r6
 8005d8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005d96:	2f09      	cmp	r7, #9
 8005d98:	d818      	bhi.n	8005dcc <_strtol_l.isra.0+0xac>
 8005d9a:	463c      	mov	r4, r7
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	dd24      	ble.n	8005dea <_strtol_l.isra.0+0xca>
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	db1f      	blt.n	8005de4 <_strtol_l.isra.0+0xc4>
 8005da4:	45a9      	cmp	r9, r5
 8005da6:	d31d      	bcc.n	8005de4 <_strtol_l.isra.0+0xc4>
 8005da8:	d101      	bne.n	8005dae <_strtol_l.isra.0+0x8e>
 8005daa:	45a2      	cmp	sl, r4
 8005dac:	db1a      	blt.n	8005de4 <_strtol_l.isra.0+0xc4>
 8005dae:	fb05 4503 	mla	r5, r5, r3, r4
 8005db2:	2601      	movs	r6, #1
 8005db4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005db8:	e7eb      	b.n	8005d92 <_strtol_l.isra.0+0x72>
 8005dba:	2c2b      	cmp	r4, #43	; 0x2b
 8005dbc:	bf08      	it	eq
 8005dbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005dc2:	46a8      	mov	r8, r5
 8005dc4:	bf08      	it	eq
 8005dc6:	f106 0e02 	addeq.w	lr, r6, #2
 8005dca:	e7c7      	b.n	8005d5c <_strtol_l.isra.0+0x3c>
 8005dcc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005dd0:	2f19      	cmp	r7, #25
 8005dd2:	d801      	bhi.n	8005dd8 <_strtol_l.isra.0+0xb8>
 8005dd4:	3c37      	subs	r4, #55	; 0x37
 8005dd6:	e7e1      	b.n	8005d9c <_strtol_l.isra.0+0x7c>
 8005dd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005ddc:	2f19      	cmp	r7, #25
 8005dde:	d804      	bhi.n	8005dea <_strtol_l.isra.0+0xca>
 8005de0:	3c57      	subs	r4, #87	; 0x57
 8005de2:	e7db      	b.n	8005d9c <_strtol_l.isra.0+0x7c>
 8005de4:	f04f 36ff 	mov.w	r6, #4294967295
 8005de8:	e7e4      	b.n	8005db4 <_strtol_l.isra.0+0x94>
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	da05      	bge.n	8005dfa <_strtol_l.isra.0+0xda>
 8005dee:	2322      	movs	r3, #34	; 0x22
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	4665      	mov	r5, ip
 8005df4:	b942      	cbnz	r2, 8005e08 <_strtol_l.isra.0+0xe8>
 8005df6:	4628      	mov	r0, r5
 8005df8:	e79d      	b.n	8005d36 <_strtol_l.isra.0+0x16>
 8005dfa:	f1b8 0f00 	cmp.w	r8, #0
 8005dfe:	d000      	beq.n	8005e02 <_strtol_l.isra.0+0xe2>
 8005e00:	426d      	negs	r5, r5
 8005e02:	2a00      	cmp	r2, #0
 8005e04:	d0f7      	beq.n	8005df6 <_strtol_l.isra.0+0xd6>
 8005e06:	b10e      	cbz	r6, 8005e0c <_strtol_l.isra.0+0xec>
 8005e08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	e7f2      	b.n	8005df6 <_strtol_l.isra.0+0xd6>
 8005e10:	2430      	movs	r4, #48	; 0x30
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1b3      	bne.n	8005d7e <_strtol_l.isra.0+0x5e>
 8005e16:	2308      	movs	r3, #8
 8005e18:	e7b1      	b.n	8005d7e <_strtol_l.isra.0+0x5e>
 8005e1a:	2c30      	cmp	r4, #48	; 0x30
 8005e1c:	d0a4      	beq.n	8005d68 <_strtol_l.isra.0+0x48>
 8005e1e:	230a      	movs	r3, #10
 8005e20:	e7ad      	b.n	8005d7e <_strtol_l.isra.0+0x5e>
 8005e22:	bf00      	nop
 8005e24:	08006460 	.word	0x08006460

08005e28 <_strtol_r>:
 8005e28:	f7ff bf7a 	b.w	8005d20 <_strtol_l.isra.0>

08005e2c <_strtoul_l.isra.0>:
 8005e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e30:	4e3b      	ldr	r6, [pc, #236]	; (8005f20 <_strtoul_l.isra.0+0xf4>)
 8005e32:	4686      	mov	lr, r0
 8005e34:	468c      	mov	ip, r1
 8005e36:	4660      	mov	r0, ip
 8005e38:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005e3c:	5da5      	ldrb	r5, [r4, r6]
 8005e3e:	f015 0508 	ands.w	r5, r5, #8
 8005e42:	d1f8      	bne.n	8005e36 <_strtoul_l.isra.0+0xa>
 8005e44:	2c2d      	cmp	r4, #45	; 0x2d
 8005e46:	d134      	bne.n	8005eb2 <_strtoul_l.isra.0+0x86>
 8005e48:	f89c 4000 	ldrb.w	r4, [ip]
 8005e4c:	f04f 0801 	mov.w	r8, #1
 8005e50:	f100 0c02 	add.w	ip, r0, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05e      	beq.n	8005f16 <_strtoul_l.isra.0+0xea>
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d10c      	bne.n	8005e76 <_strtoul_l.isra.0+0x4a>
 8005e5c:	2c30      	cmp	r4, #48	; 0x30
 8005e5e:	d10a      	bne.n	8005e76 <_strtoul_l.isra.0+0x4a>
 8005e60:	f89c 0000 	ldrb.w	r0, [ip]
 8005e64:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005e68:	2858      	cmp	r0, #88	; 0x58
 8005e6a:	d14f      	bne.n	8005f0c <_strtoul_l.isra.0+0xe0>
 8005e6c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005e70:	2310      	movs	r3, #16
 8005e72:	f10c 0c02 	add.w	ip, ip, #2
 8005e76:	f04f 37ff 	mov.w	r7, #4294967295
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	fbb7 f7f3 	udiv	r7, r7, r3
 8005e80:	fb03 f907 	mul.w	r9, r3, r7
 8005e84:	ea6f 0909 	mvn.w	r9, r9
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005e8e:	2e09      	cmp	r6, #9
 8005e90:	d818      	bhi.n	8005ec4 <_strtoul_l.isra.0+0x98>
 8005e92:	4634      	mov	r4, r6
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	dd24      	ble.n	8005ee2 <_strtoul_l.isra.0+0xb6>
 8005e98:	2d00      	cmp	r5, #0
 8005e9a:	db1f      	blt.n	8005edc <_strtoul_l.isra.0+0xb0>
 8005e9c:	4287      	cmp	r7, r0
 8005e9e:	d31d      	bcc.n	8005edc <_strtoul_l.isra.0+0xb0>
 8005ea0:	d101      	bne.n	8005ea6 <_strtoul_l.isra.0+0x7a>
 8005ea2:	45a1      	cmp	r9, r4
 8005ea4:	db1a      	blt.n	8005edc <_strtoul_l.isra.0+0xb0>
 8005ea6:	fb00 4003 	mla	r0, r0, r3, r4
 8005eaa:	2501      	movs	r5, #1
 8005eac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005eb0:	e7eb      	b.n	8005e8a <_strtoul_l.isra.0+0x5e>
 8005eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8005eb4:	bf08      	it	eq
 8005eb6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005eba:	46a8      	mov	r8, r5
 8005ebc:	bf08      	it	eq
 8005ebe:	f100 0c02 	addeq.w	ip, r0, #2
 8005ec2:	e7c7      	b.n	8005e54 <_strtoul_l.isra.0+0x28>
 8005ec4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005ec8:	2e19      	cmp	r6, #25
 8005eca:	d801      	bhi.n	8005ed0 <_strtoul_l.isra.0+0xa4>
 8005ecc:	3c37      	subs	r4, #55	; 0x37
 8005ece:	e7e1      	b.n	8005e94 <_strtoul_l.isra.0+0x68>
 8005ed0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005ed4:	2e19      	cmp	r6, #25
 8005ed6:	d804      	bhi.n	8005ee2 <_strtoul_l.isra.0+0xb6>
 8005ed8:	3c57      	subs	r4, #87	; 0x57
 8005eda:	e7db      	b.n	8005e94 <_strtoul_l.isra.0+0x68>
 8005edc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ee0:	e7e4      	b.n	8005eac <_strtoul_l.isra.0+0x80>
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	da07      	bge.n	8005ef6 <_strtoul_l.isra.0+0xca>
 8005ee6:	2322      	movs	r3, #34	; 0x22
 8005ee8:	f8ce 3000 	str.w	r3, [lr]
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	b942      	cbnz	r2, 8005f04 <_strtoul_l.isra.0+0xd8>
 8005ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ef6:	f1b8 0f00 	cmp.w	r8, #0
 8005efa:	d000      	beq.n	8005efe <_strtoul_l.isra.0+0xd2>
 8005efc:	4240      	negs	r0, r0
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d0f7      	beq.n	8005ef2 <_strtoul_l.isra.0+0xc6>
 8005f02:	b10d      	cbz	r5, 8005f08 <_strtoul_l.isra.0+0xdc>
 8005f04:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	e7f2      	b.n	8005ef2 <_strtoul_l.isra.0+0xc6>
 8005f0c:	2430      	movs	r4, #48	; 0x30
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1b1      	bne.n	8005e76 <_strtoul_l.isra.0+0x4a>
 8005f12:	2308      	movs	r3, #8
 8005f14:	e7af      	b.n	8005e76 <_strtoul_l.isra.0+0x4a>
 8005f16:	2c30      	cmp	r4, #48	; 0x30
 8005f18:	d0a2      	beq.n	8005e60 <_strtoul_l.isra.0+0x34>
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	e7ab      	b.n	8005e76 <_strtoul_l.isra.0+0x4a>
 8005f1e:	bf00      	nop
 8005f20:	08006460 	.word	0x08006460

08005f24 <_strtoul_r>:
 8005f24:	f7ff bf82 	b.w	8005e2c <_strtoul_l.isra.0>

08005f28 <__submore>:
 8005f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f34:	4299      	cmp	r1, r3
 8005f36:	d11d      	bne.n	8005f74 <__submore+0x4c>
 8005f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f3c:	f000 f88e 	bl	800605c <_malloc_r>
 8005f40:	b918      	cbnz	r0, 8005f4a <__submore+0x22>
 8005f42:	f04f 30ff 	mov.w	r0, #4294967295
 8005f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005f54:	6360      	str	r0, [r4, #52]	; 0x34
 8005f56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005f5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005f5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005f62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005f6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005f6e:	6020      	str	r0, [r4, #0]
 8005f70:	2000      	movs	r0, #0
 8005f72:	e7e8      	b.n	8005f46 <__submore+0x1e>
 8005f74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005f76:	0077      	lsls	r7, r6, #1
 8005f78:	463a      	mov	r2, r7
 8005f7a:	f000 f8c9 	bl	8006110 <_realloc_r>
 8005f7e:	4605      	mov	r5, r0
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d0de      	beq.n	8005f42 <__submore+0x1a>
 8005f84:	eb00 0806 	add.w	r8, r0, r6
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	f000 f807 	bl	8005fa0 <memcpy>
 8005f92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005f96:	f8c4 8000 	str.w	r8, [r4]
 8005f9a:	e7e9      	b.n	8005f70 <__submore+0x48>

08005f9c <__retarget_lock_acquire_recursive>:
 8005f9c:	4770      	bx	lr

08005f9e <__retarget_lock_release_recursive>:
 8005f9e:	4770      	bx	lr

08005fa0 <memcpy>:
 8005fa0:	440a      	add	r2, r1
 8005fa2:	4291      	cmp	r1, r2
 8005fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fa8:	d100      	bne.n	8005fac <memcpy+0xc>
 8005faa:	4770      	bx	lr
 8005fac:	b510      	push	{r4, lr}
 8005fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fb6:	4291      	cmp	r1, r2
 8005fb8:	d1f9      	bne.n	8005fae <memcpy+0xe>
 8005fba:	bd10      	pop	{r4, pc}

08005fbc <_free_r>:
 8005fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d048      	beq.n	8006054 <_free_r+0x98>
 8005fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc6:	9001      	str	r0, [sp, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f1a1 0404 	sub.w	r4, r1, #4
 8005fce:	bfb8      	it	lt
 8005fd0:	18e4      	addlt	r4, r4, r3
 8005fd2:	f000 f8d3 	bl	800617c <__malloc_lock>
 8005fd6:	4a20      	ldr	r2, [pc, #128]	; (8006058 <_free_r+0x9c>)
 8005fd8:	9801      	ldr	r0, [sp, #4]
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	4615      	mov	r5, r2
 8005fde:	b933      	cbnz	r3, 8005fee <_free_r+0x32>
 8005fe0:	6063      	str	r3, [r4, #4]
 8005fe2:	6014      	str	r4, [r2, #0]
 8005fe4:	b003      	add	sp, #12
 8005fe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fea:	f000 b8cd 	b.w	8006188 <__malloc_unlock>
 8005fee:	42a3      	cmp	r3, r4
 8005ff0:	d90b      	bls.n	800600a <_free_r+0x4e>
 8005ff2:	6821      	ldr	r1, [r4, #0]
 8005ff4:	1862      	adds	r2, r4, r1
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	bf04      	itt	eq
 8005ffa:	681a      	ldreq	r2, [r3, #0]
 8005ffc:	685b      	ldreq	r3, [r3, #4]
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	bf04      	itt	eq
 8006002:	1852      	addeq	r2, r2, r1
 8006004:	6022      	streq	r2, [r4, #0]
 8006006:	602c      	str	r4, [r5, #0]
 8006008:	e7ec      	b.n	8005fe4 <_free_r+0x28>
 800600a:	461a      	mov	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b10b      	cbz	r3, 8006014 <_free_r+0x58>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d9fa      	bls.n	800600a <_free_r+0x4e>
 8006014:	6811      	ldr	r1, [r2, #0]
 8006016:	1855      	adds	r5, r2, r1
 8006018:	42a5      	cmp	r5, r4
 800601a:	d10b      	bne.n	8006034 <_free_r+0x78>
 800601c:	6824      	ldr	r4, [r4, #0]
 800601e:	4421      	add	r1, r4
 8006020:	1854      	adds	r4, r2, r1
 8006022:	42a3      	cmp	r3, r4
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	d1dd      	bne.n	8005fe4 <_free_r+0x28>
 8006028:	681c      	ldr	r4, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	6053      	str	r3, [r2, #4]
 800602e:	4421      	add	r1, r4
 8006030:	6011      	str	r1, [r2, #0]
 8006032:	e7d7      	b.n	8005fe4 <_free_r+0x28>
 8006034:	d902      	bls.n	800603c <_free_r+0x80>
 8006036:	230c      	movs	r3, #12
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	e7d3      	b.n	8005fe4 <_free_r+0x28>
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	1961      	adds	r1, r4, r5
 8006040:	428b      	cmp	r3, r1
 8006042:	bf04      	itt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	bf04      	itt	eq
 800604c:	1949      	addeq	r1, r1, r5
 800604e:	6021      	streq	r1, [r4, #0]
 8006050:	6054      	str	r4, [r2, #4]
 8006052:	e7c7      	b.n	8005fe4 <_free_r+0x28>
 8006054:	b003      	add	sp, #12
 8006056:	bd30      	pop	{r4, r5, pc}
 8006058:	20000114 	.word	0x20000114

0800605c <_malloc_r>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	1ccd      	adds	r5, r1, #3
 8006060:	f025 0503 	bic.w	r5, r5, #3
 8006064:	3508      	adds	r5, #8
 8006066:	2d0c      	cmp	r5, #12
 8006068:	bf38      	it	cc
 800606a:	250c      	movcc	r5, #12
 800606c:	2d00      	cmp	r5, #0
 800606e:	4606      	mov	r6, r0
 8006070:	db01      	blt.n	8006076 <_malloc_r+0x1a>
 8006072:	42a9      	cmp	r1, r5
 8006074:	d903      	bls.n	800607e <_malloc_r+0x22>
 8006076:	230c      	movs	r3, #12
 8006078:	6033      	str	r3, [r6, #0]
 800607a:	2000      	movs	r0, #0
 800607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800607e:	f000 f87d 	bl	800617c <__malloc_lock>
 8006082:	4921      	ldr	r1, [pc, #132]	; (8006108 <_malloc_r+0xac>)
 8006084:	680a      	ldr	r2, [r1, #0]
 8006086:	4614      	mov	r4, r2
 8006088:	b99c      	cbnz	r4, 80060b2 <_malloc_r+0x56>
 800608a:	4f20      	ldr	r7, [pc, #128]	; (800610c <_malloc_r+0xb0>)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b923      	cbnz	r3, 800609a <_malloc_r+0x3e>
 8006090:	4621      	mov	r1, r4
 8006092:	4630      	mov	r0, r6
 8006094:	f000 f862 	bl	800615c <_sbrk_r>
 8006098:	6038      	str	r0, [r7, #0]
 800609a:	4629      	mov	r1, r5
 800609c:	4630      	mov	r0, r6
 800609e:	f000 f85d 	bl	800615c <_sbrk_r>
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	d123      	bne.n	80060ee <_malloc_r+0x92>
 80060a6:	230c      	movs	r3, #12
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 f86c 	bl	8006188 <__malloc_unlock>
 80060b0:	e7e3      	b.n	800607a <_malloc_r+0x1e>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	1b5b      	subs	r3, r3, r5
 80060b6:	d417      	bmi.n	80060e8 <_malloc_r+0x8c>
 80060b8:	2b0b      	cmp	r3, #11
 80060ba:	d903      	bls.n	80060c4 <_malloc_r+0x68>
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	441c      	add	r4, r3
 80060c0:	6025      	str	r5, [r4, #0]
 80060c2:	e004      	b.n	80060ce <_malloc_r+0x72>
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	42a2      	cmp	r2, r4
 80060c8:	bf0c      	ite	eq
 80060ca:	600b      	streq	r3, [r1, #0]
 80060cc:	6053      	strne	r3, [r2, #4]
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f85a 	bl	8006188 <__malloc_unlock>
 80060d4:	f104 000b 	add.w	r0, r4, #11
 80060d8:	1d23      	adds	r3, r4, #4
 80060da:	f020 0007 	bic.w	r0, r0, #7
 80060de:	1ac2      	subs	r2, r0, r3
 80060e0:	d0cc      	beq.n	800607c <_malloc_r+0x20>
 80060e2:	1a1b      	subs	r3, r3, r0
 80060e4:	50a3      	str	r3, [r4, r2]
 80060e6:	e7c9      	b.n	800607c <_malloc_r+0x20>
 80060e8:	4622      	mov	r2, r4
 80060ea:	6864      	ldr	r4, [r4, #4]
 80060ec:	e7cc      	b.n	8006088 <_malloc_r+0x2c>
 80060ee:	1cc4      	adds	r4, r0, #3
 80060f0:	f024 0403 	bic.w	r4, r4, #3
 80060f4:	42a0      	cmp	r0, r4
 80060f6:	d0e3      	beq.n	80060c0 <_malloc_r+0x64>
 80060f8:	1a21      	subs	r1, r4, r0
 80060fa:	4630      	mov	r0, r6
 80060fc:	f000 f82e 	bl	800615c <_sbrk_r>
 8006100:	3001      	adds	r0, #1
 8006102:	d1dd      	bne.n	80060c0 <_malloc_r+0x64>
 8006104:	e7cf      	b.n	80060a6 <_malloc_r+0x4a>
 8006106:	bf00      	nop
 8006108:	20000114 	.word	0x20000114
 800610c:	20000118 	.word	0x20000118

08006110 <_realloc_r>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	4607      	mov	r7, r0
 8006114:	4614      	mov	r4, r2
 8006116:	460e      	mov	r6, r1
 8006118:	b921      	cbnz	r1, 8006124 <_realloc_r+0x14>
 800611a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800611e:	4611      	mov	r1, r2
 8006120:	f7ff bf9c 	b.w	800605c <_malloc_r>
 8006124:	b922      	cbnz	r2, 8006130 <_realloc_r+0x20>
 8006126:	f7ff ff49 	bl	8005fbc <_free_r>
 800612a:	4625      	mov	r5, r4
 800612c:	4628      	mov	r0, r5
 800612e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006130:	f000 f830 	bl	8006194 <_malloc_usable_size_r>
 8006134:	42a0      	cmp	r0, r4
 8006136:	d20f      	bcs.n	8006158 <_realloc_r+0x48>
 8006138:	4621      	mov	r1, r4
 800613a:	4638      	mov	r0, r7
 800613c:	f7ff ff8e 	bl	800605c <_malloc_r>
 8006140:	4605      	mov	r5, r0
 8006142:	2800      	cmp	r0, #0
 8006144:	d0f2      	beq.n	800612c <_realloc_r+0x1c>
 8006146:	4631      	mov	r1, r6
 8006148:	4622      	mov	r2, r4
 800614a:	f7ff ff29 	bl	8005fa0 <memcpy>
 800614e:	4631      	mov	r1, r6
 8006150:	4638      	mov	r0, r7
 8006152:	f7ff ff33 	bl	8005fbc <_free_r>
 8006156:	e7e9      	b.n	800612c <_realloc_r+0x1c>
 8006158:	4635      	mov	r5, r6
 800615a:	e7e7      	b.n	800612c <_realloc_r+0x1c>

0800615c <_sbrk_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4d06      	ldr	r5, [pc, #24]	; (8006178 <_sbrk_r+0x1c>)
 8006160:	2300      	movs	r3, #0
 8006162:	4604      	mov	r4, r0
 8006164:	4608      	mov	r0, r1
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	f7fa ff32 	bl	8000fd0 <_sbrk>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_sbrk_r+0x1a>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_sbrk_r+0x1a>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	20000450 	.word	0x20000450

0800617c <__malloc_lock>:
 800617c:	4801      	ldr	r0, [pc, #4]	; (8006184 <__malloc_lock+0x8>)
 800617e:	f7ff bf0d 	b.w	8005f9c <__retarget_lock_acquire_recursive>
 8006182:	bf00      	nop
 8006184:	20000458 	.word	0x20000458

08006188 <__malloc_unlock>:
 8006188:	4801      	ldr	r0, [pc, #4]	; (8006190 <__malloc_unlock+0x8>)
 800618a:	f7ff bf08 	b.w	8005f9e <__retarget_lock_release_recursive>
 800618e:	bf00      	nop
 8006190:	20000458 	.word	0x20000458

08006194 <_malloc_usable_size_r>:
 8006194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006198:	1f18      	subs	r0, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfbc      	itt	lt
 800619e:	580b      	ldrlt	r3, [r1, r0]
 80061a0:	18c0      	addlt	r0, r0, r3
 80061a2:	4770      	bx	lr

080061a4 <_init>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	bf00      	nop
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr

080061b0 <_fini>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr

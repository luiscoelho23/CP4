
CP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  0800b6e0  0800b6e0  0001b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf14  0800bf14  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf14  0800bf14  0001bf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf1c  0800bf1c  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf1c  0800bf1c  0001bf1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf20  0800bf20  0001bf20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800bf24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000027c  0800c1a0  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800c1a0  00020628  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017434  00000000  00000000  000202aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba6  00000000  00000000  000376de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0003a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  0003b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d40  00000000  00000000  0003c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013990  00000000  00000000  00065d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd1c8  00000000  00000000  00079710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001768d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b8  00000000  00000000  0017692c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000027c 	.word	0x2000027c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b6c4 	.word	0x0800b6c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000280 	.word	0x20000280
 800023c:	0800b6c4 	.word	0x0800b6c4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <check_command>:
float y_arr_tr[20] = {1, 1.2, 1.4, 1.6, 1.8, 2, 1.8, 1.6, 1.4, 1.2, 1, 0.8, 0.6, 0.4, 0.2, 0, 0.2, 0.4, 0.6, 0.8};

struct sp_config_t sp_config = {1, "s"};

unsigned char check_command(char* message)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "STW", 3)))
 80009fc:	2203      	movs	r2, #3
 80009fe:	494f      	ldr	r1, [pc, #316]	; (8000b3c <check_command+0x14c>)
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f006 fd9a 	bl	800753a <strncmp>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <check_command+0x22>
		cmd = STW;
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	e08e      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "FSW", 3)))
 8000a12:	2203      	movs	r2, #3
 8000a14:	494a      	ldr	r1, [pc, #296]	; (8000b40 <check_command+0x150>)
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f006 fd8f 	bl	800753a <strncmp>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <check_command+0x38>
		cmd = FSW;
 8000a22:	2308      	movs	r3, #8
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	e083      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "KP", 2)))
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4946      	ldr	r1, [pc, #280]	; (8000b44 <check_command+0x154>)
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f006 fd84 	bl	800753a <strncmp>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <check_command+0x4e>
        cmd = KP;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e078      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "KD", 2)))
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4941      	ldr	r1, [pc, #260]	; (8000b48 <check_command+0x158>)
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f006 fd79 	bl	800753a <strncmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <check_command+0x64>
		cmd = KD;
 8000a4e:	230d      	movs	r3, #13
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e06d      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "KI", 2)))
 8000a54:	2202      	movs	r2, #2
 8000a56:	493d      	ldr	r1, [pc, #244]	; (8000b4c <check_command+0x15c>)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f006 fd6e 	bl	800753a <strncmp>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <check_command+0x7a>
		cmd = KI;
 8000a64:	230e      	movs	r3, #14
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e062      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "PR", 2)))
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4938      	ldr	r1, [pc, #224]	; (8000b50 <check_command+0x160>)
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f006 fd63 	bl	800753a <strncmp>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <check_command+0x90>
		cmd = PR;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e057      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "UN", 2)))
 8000a80:	2202      	movs	r2, #2
 8000a82:	4934      	ldr	r1, [pc, #208]	; (8000b54 <check_command+0x164>)
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f006 fd58 	bl	800753a <strncmp>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <check_command+0xa6>
        cmd = UN;
 8000a90:	2303      	movs	r3, #3
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e04c      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "EN", 2)))
 8000a96:	2202      	movs	r2, #2
 8000a98:	492f      	ldr	r1, [pc, #188]	; (8000b58 <check_command+0x168>)
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f006 fd4d 	bl	800753a <strncmp>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <check_command+0xbc>
        cmd = EN;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e041      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "CS", 2)))
 8000aac:	2202      	movs	r2, #2
 8000aae:	492b      	ldr	r1, [pc, #172]	; (8000b5c <check_command+0x16c>)
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f006 fd42 	bl	800753a <strncmp>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <check_command+0xd2>
        cmd = CS;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e036      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "VR", 2)))
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4926      	ldr	r1, [pc, #152]	; (8000b60 <check_command+0x170>)
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f006 fd37 	bl	800753a <strncmp>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <check_command+0xe8>
        cmd = VR;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e02b      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "HW", 2)))
 8000ad8:	2202      	movs	r2, #2
 8000ada:	4922      	ldr	r1, [pc, #136]	; (8000b64 <check_command+0x174>)
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f006 fd2c 	bl	800753a <strncmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <check_command+0xfe>
		cmd = HW;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	e020      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "SW", 2)))
 8000aee:	2202      	movs	r2, #2
 8000af0:	491d      	ldr	r1, [pc, #116]	; (8000b68 <check_command+0x178>)
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f006 fd21 	bl	800753a <strncmp>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <check_command+0x114>
		cmd = SW;
 8000afe:	2309      	movs	r3, #9
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e015      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "/", 1)))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <check_command+0x17c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <check_command+0x128>
		cmd = INC;
 8000b12:	2305      	movs	r3, #5
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	e00b      	b.n	8000b30 <check_command+0x140>
    else if((!strncmp((char*) message, "\\", 1)))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <check_command+0x180>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <check_command+0x13c>
		cmd = DEC;
 8000b26:	2306      	movs	r3, #6
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e001      	b.n	8000b30 <check_command+0x140>
    else
    	cmd = INV;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]

    return cmd;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	0800b6e0 	.word	0x0800b6e0
 8000b40:	0800b6e4 	.word	0x0800b6e4
 8000b44:	0800b6e8 	.word	0x0800b6e8
 8000b48:	0800b6ec 	.word	0x0800b6ec
 8000b4c:	0800b6f0 	.word	0x0800b6f0
 8000b50:	0800b6f4 	.word	0x0800b6f4
 8000b54:	0800b6f8 	.word	0x0800b6f8
 8000b58:	0800b6fc 	.word	0x0800b6fc
 8000b5c:	0800b700 	.word	0x0800b700
 8000b60:	0800b704 	.word	0x0800b704
 8000b64:	0800b708 	.word	0x0800b708
 8000b68:	0800b70c 	.word	0x0800b70c
 8000b6c:	0800b710 	.word	0x0800b710
 8000b70:	0800b714 	.word	0x0800b714

08000b74 <proc_inv_cmd>:
		proc_ki_cmd
};


void proc_inv_cmd(char* message)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <proc_inv_cmd+0x18>)
 8000b7e:	f001 f973 	bl	8001e68 <send_UART>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	0800b718 	.word	0x0800b718

08000b90 <proc_cs_cmd>:


void proc_cs_cmd(char* message)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Control System instruction argument values.");
	}
	else
		send_UART("Invalid Control System instruction syntax.");
	*/
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	int val;

	if(sscanf((char*) message, "EN %d", &val) == 1)
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	491f      	ldr	r1, [pc, #124]	; (8000c30 <proc_en_cmd+0x8c>)
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f006 fc47 	bl	8007448 <siscanf>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d12f      	bne.n	8000c20 <proc_en_cmd+0x7c>
	{
		if(val == 0 || val == 1)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <proc_en_cmd+0x28>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d125      	bne.n	8000c18 <proc_en_cmd+0x74>
		{
			if(val)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d014      	beq.n	8000bfc <proc_en_cmd+0x58>
			{
				MY_TIM3_Init(sp_config);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <proc_en_cmd+0x90>)
 8000bd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bd8:	f000 ffc4 	bl	8001b64 <MY_TIM3_Init>
				set_Kh_values();
 8000bdc:	f000 f9e4 	bl	8000fa8 <set_Kh_values>

				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000be0:	210c      	movs	r1, #12
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <proc_en_cmd+0x94>)
 8000be4:	f003 f8e6 	bl	8003db4 <HAL_TIM_PWM_Start>
				HAL_TIM_Base_Start_IT(&htim3);
 8000be8:	4814      	ldr	r0, [pc, #80]	; (8000c3c <proc_en_cmd+0x98>)
 8000bea:	f002 ffdb 	bl	8003ba4 <HAL_TIM_Base_Start_IT>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bee:	2028      	movs	r0, #40	; 0x28
 8000bf0:	f001 fbb9 	bl	8002366 <HAL_NVIC_EnableIRQ>

				send_UART("System enabled with success.");
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <proc_en_cmd+0x9c>)
 8000bf6:	f001 f937 	bl	8001e68 <send_UART>
			if(val)
 8000bfa:	e015      	b.n	8000c28 <proc_en_cmd+0x84>
			}
			else
			{
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000bfc:	210c      	movs	r1, #12
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <proc_en_cmd+0x94>)
 8000c00:	f003 f9d2 	bl	8003fa8 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim3);
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <proc_en_cmd+0x98>)
 8000c06:	f003 f845 	bl	8003c94 <HAL_TIM_Base_Stop_IT>
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000c0a:	2028      	movs	r0, #40	; 0x28
 8000c0c:	f001 fbb9 	bl	8002382 <HAL_NVIC_DisableIRQ>

				send_UART("System disabled with success.");
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <proc_en_cmd+0xa0>)
 8000c12:	f001 f929 	bl	8001e68 <send_UART>
			if(val)
 8000c16:	e007      	b.n	8000c28 <proc_en_cmd+0x84>
			}
		}
		else
			send_UART("Invalid Enable instruction argument values.");
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <proc_en_cmd+0xa4>)
 8000c1a:	f001 f925 	bl	8001e68 <send_UART>
	}
	else
		send_UART("Invalid Enable instruction syntax.");
}
 8000c1e:	e003      	b.n	8000c28 <proc_en_cmd+0x84>
		send_UART("Invalid Enable instruction syntax.");
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <proc_en_cmd+0xa8>)
 8000c22:	f001 f921 	bl	8001e68 <send_UART>
}
 8000c26:	e7ff      	b.n	8000c28 <proc_en_cmd+0x84>
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	0800b740 	.word	0x0800b740
 8000c34:	20000094 	.word	0x20000094
 8000c38:	20000544 	.word	0x20000544
 8000c3c:	200004f8 	.word	0x200004f8
 8000c40:	0800b748 	.word	0x0800b748
 8000c44:	0800b768 	.word	0x0800b768
 8000c48:	0800b788 	.word	0x0800b788
 8000c4c:	0800b7b4 	.word	0x0800b7b4

08000c50 <proc_un_cmd>:


void proc_un_cmd(char* message)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	}
	else
		send_UART("Invalid Normalized Voltage instruction syntax.");

	*/
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <proc_vr_cmd>:


void proc_vr_cmd(char* message)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Reference Speed instruction argument values.");
	}
	else
		send_UART("Invalid Reference Speed instruction syntax.");
	*/
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <proc_inc_cmd>:

void proc_inc_cmd(char* message)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
	}

	send_UART(message);
	*/
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
	}

	send_UART(message);
	*/
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <proc_hw_cmd>:

void proc_hw_cmd(char* message)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "HW %s %d", timeunit, &unit) == 2)
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	f107 0208 	add.w	r2, r7, #8
 8000cb0:	491c      	ldr	r1, [pc, #112]	; (8000d24 <proc_hw_cmd+0x84>)
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f006 fbc8 	bl	8007448 <siscanf>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d12b      	bne.n	8000d16 <proc_hw_cmd+0x76>
	{
		if(!strcmp(timeunit, "ms") || !strcmp(timeunit, "s") || !strcmp(timeunit, "us"))
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4919      	ldr	r1, [pc, #100]	; (8000d28 <proc_hw_cmd+0x88>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fabb 	bl	8000240 <strcmp>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d011      	beq.n	8000cf4 <proc_hw_cmd+0x54>
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <proc_hw_cmd+0x8c>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fab2 	bl	8000240 <strcmp>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d008      	beq.n	8000cf4 <proc_hw_cmd+0x54>
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4912      	ldr	r1, [pc, #72]	; (8000d30 <proc_hw_cmd+0x90>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff faa9 	bl	8000240 <strcmp>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10c      	bne.n	8000d0e <proc_hw_cmd+0x6e>
		{
			strcpy(sp_config.timeunit, timeunit);
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <proc_hw_cmd+0x94>)
 8000cfc:	f006 fc15 	bl	800752a <strcpy>
			sp_config.unit = unit;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <proc_hw_cmd+0x98>)
 8000d04:	6013      	str	r3, [r2, #0]
			send_UART("Sampling timeunit and units changed with success.");
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <proc_hw_cmd+0x9c>)
 8000d08:	f001 f8ae 	bl	8001e68 <send_UART>
		else
			send_UART("Invalid Sample Period instruction argument values.");
	}
	else
		send_UART("Invalid Sample Period instruction syntax.");
}
 8000d0c:	e006      	b.n	8000d1c <proc_hw_cmd+0x7c>
			send_UART("Invalid Sample Period instruction argument values.");
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <proc_hw_cmd+0xa0>)
 8000d10:	f001 f8aa 	bl	8001e68 <send_UART>
}
 8000d14:	e002      	b.n	8000d1c <proc_hw_cmd+0x7c>
		send_UART("Invalid Sample Period instruction syntax.");
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <proc_hw_cmd+0xa4>)
 8000d18:	f001 f8a6 	bl	8001e68 <send_UART>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	0800b7d8 	.word	0x0800b7d8
 8000d28:	0800b7e4 	.word	0x0800b7e4
 8000d2c:	0800b7e8 	.word	0x0800b7e8
 8000d30:	0800b7ec 	.word	0x0800b7ec
 8000d34:	20000098 	.word	0x20000098
 8000d38:	20000094 	.word	0x20000094
 8000d3c:	0800b7f0 	.word	0x0800b7f0
 8000d40:	0800b824 	.word	0x0800b824
 8000d44:	0800b858 	.word	0x0800b858

08000d48 <proc_fsw_cmd>:

void proc_fsw_cmd(char* message)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
				send_UART("Invalid FSW instruction argument values.");
		}
		else
			send_UART("Invalid FSW instruction syntax.");
	*/
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <proc_sw_cmd>:

void proc_sw_cmd(char* message)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
	else
		send_UART("Invalid Sample instruction syntax.");
	*/
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <proc_stw_cmd>:

void proc_stw_cmd(char* message)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
		send_UART("Sampling Stopped.");
	}
	else
		send_UART("Invalid Stop Sampling instruction syntax.");
	*/
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <proc_pr_cmd>:
void proc_pr_cmd(char* message)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	float signval;

	if(sscanf((char*) message, "PR %f", &signval) == 1)
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	461a      	mov	r2, r3
 8000d92:	4915      	ldr	r1, [pc, #84]	; (8000de8 <proc_pr_cmd+0x64>)
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f006 fb57 	bl	8007448 <siscanf>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d11c      	bne.n	8000dda <proc_pr_cmd+0x56>
	{
		if(signval >= -720 && signval <= 720)
 8000da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000da4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000dec <proc_pr_cmd+0x68>
 8000da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	db0f      	blt.n	8000dd2 <proc_pr_cmd+0x4e>
 8000db2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000df0 <proc_pr_cmd+0x6c>
 8000dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc2:	d806      	bhi.n	8000dd2 <proc_pr_cmd+0x4e>
		{
			yr = signval;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <proc_pr_cmd+0x70>)
 8000dc8:	6013      	str	r3, [r2, #0]
			send_UART("Desired position changed with success.");
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <proc_pr_cmd+0x74>)
 8000dcc:	f001 f84c 	bl	8001e68 <send_UART>
		else
			send_UART("Invalid desired position value.");
	}
	else
		send_UART("Invalid PR instruction syntax.");
}
 8000dd0:	e006      	b.n	8000de0 <proc_pr_cmd+0x5c>
			send_UART("Invalid desired position value.");
 8000dd2:	480a      	ldr	r0, [pc, #40]	; (8000dfc <proc_pr_cmd+0x78>)
 8000dd4:	f001 f848 	bl	8001e68 <send_UART>
}
 8000dd8:	e002      	b.n	8000de0 <proc_pr_cmd+0x5c>
		send_UART("Invalid PR instruction syntax.");
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <proc_pr_cmd+0x7c>)
 8000ddc:	f001 f844 	bl	8001e68 <send_UART>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800b884 	.word	0x0800b884
 8000dec:	c4340000 	.word	0xc4340000
 8000df0:	44340000 	.word	0x44340000
 8000df4:	20000040 	.word	0x20000040
 8000df8:	0800b88c 	.word	0x0800b88c
 8000dfc:	0800b8b4 	.word	0x0800b8b4
 8000e00:	0800b8d4 	.word	0x0800b8d4

08000e04 <proc_kp_cmd>:

void proc_kp_cmd(char* message)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	float signval;

	if(sscanf((char*) message, "KP %f", &signval) == 1)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	461a      	mov	r2, r3
 8000e12:	4918      	ldr	r1, [pc, #96]	; (8000e74 <proc_kp_cmd+0x70>)
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f006 fb17 	bl	8007448 <siscanf>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d121      	bne.n	8000e64 <proc_kp_cmd+0x60>
	{
		if(signval >= -200 && signval <= 200)
 8000e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e78 <proc_kp_cmd+0x74>
 8000e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	db14      	blt.n	8000e5c <proc_kp_cmd+0x58>
 8000e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e36:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000e7c <proc_kp_cmd+0x78>
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	d80b      	bhi.n	8000e5c <proc_kp_cmd+0x58>
		{
			Kp = signval;
 8000e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e4c:	ee17 2a90 	vmov	r2, s15
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <proc_kp_cmd+0x7c>)
 8000e52:	601a      	str	r2, [r3, #0]
			send_UART("Kp value changed with success.");
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <proc_kp_cmd+0x80>)
 8000e56:	f001 f807 	bl	8001e68 <send_UART>
		else
			send_UART("Invalid Kp value.");
	}
	else
		send_UART("Invalid KP instruction syntax.");
}
 8000e5a:	e006      	b.n	8000e6a <proc_kp_cmd+0x66>
			send_UART("Invalid Kp value.");
 8000e5c:	480a      	ldr	r0, [pc, #40]	; (8000e88 <proc_kp_cmd+0x84>)
 8000e5e:	f001 f803 	bl	8001e68 <send_UART>
}
 8000e62:	e002      	b.n	8000e6a <proc_kp_cmd+0x66>
		send_UART("Invalid KP instruction syntax.");
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <proc_kp_cmd+0x88>)
 8000e66:	f000 ffff 	bl	8001e68 <send_UART>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	0800b8f4 	.word	0x0800b8f4
 8000e78:	c3480000 	.word	0xc3480000
 8000e7c:	43480000 	.word	0x43480000
 8000e80:	200002b0 	.word	0x200002b0
 8000e84:	0800b8fc 	.word	0x0800b8fc
 8000e88:	0800b91c 	.word	0x0800b91c
 8000e8c:	0800b930 	.word	0x0800b930

08000e90 <proc_kd_cmd>:

void proc_kd_cmd(char* message)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	float signval;

	if(sscanf((char*) message, "KD %f", &signval) == 1)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4918      	ldr	r1, [pc, #96]	; (8000f00 <proc_kd_cmd+0x70>)
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f006 fad1 	bl	8007448 <siscanf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d121      	bne.n	8000ef0 <proc_kd_cmd+0x60>
	{
		if(signval >= -200 && signval <= 200)
 8000eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f04 <proc_kd_cmd+0x74>
 8000eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	db14      	blt.n	8000ee8 <proc_kd_cmd+0x58>
 8000ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000f08 <proc_kd_cmd+0x78>
 8000ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	d80b      	bhi.n	8000ee8 <proc_kd_cmd+0x58>
		{
			Kd = signval;
 8000ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed8:	ee17 2a90 	vmov	r2, s15
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <proc_kd_cmd+0x7c>)
 8000ede:	601a      	str	r2, [r3, #0]
			send_UART("Kd value changed with success.");
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <proc_kd_cmd+0x80>)
 8000ee2:	f000 ffc1 	bl	8001e68 <send_UART>
		else
			send_UART("Invalid Kd value.");
	}
	else
		send_UART("Invalid KD instruction syntax.");
}
 8000ee6:	e006      	b.n	8000ef6 <proc_kd_cmd+0x66>
			send_UART("Invalid Kd value.");
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <proc_kd_cmd+0x84>)
 8000eea:	f000 ffbd 	bl	8001e68 <send_UART>
}
 8000eee:	e002      	b.n	8000ef6 <proc_kd_cmd+0x66>
		send_UART("Invalid KD instruction syntax.");
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <proc_kd_cmd+0x88>)
 8000ef2:	f000 ffb9 	bl	8001e68 <send_UART>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	0800b950 	.word	0x0800b950
 8000f04:	c3480000 	.word	0xc3480000
 8000f08:	43480000 	.word	0x43480000
 8000f0c:	200002b8 	.word	0x200002b8
 8000f10:	0800b958 	.word	0x0800b958
 8000f14:	0800b978 	.word	0x0800b978
 8000f18:	0800b98c 	.word	0x0800b98c

08000f1c <proc_ki_cmd>:

void proc_ki_cmd(char* message)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	float signval;

	if(sscanf((char*) message, "KI %f", &signval) == 1)
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4918      	ldr	r1, [pc, #96]	; (8000f8c <proc_ki_cmd+0x70>)
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f006 fa8b 	bl	8007448 <siscanf>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d121      	bne.n	8000f7c <proc_ki_cmd+0x60>
	{
		if(signval >= -200 && signval <= 200)
 8000f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f90 <proc_ki_cmd+0x74>
 8000f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	db14      	blt.n	8000f74 <proc_ki_cmd+0x58>
 8000f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000f94 <proc_ki_cmd+0x78>
 8000f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	d80b      	bhi.n	8000f74 <proc_ki_cmd+0x58>
		{
			Ki = signval;
 8000f5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f64:	ee17 2a90 	vmov	r2, s15
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <proc_ki_cmd+0x7c>)
 8000f6a:	601a      	str	r2, [r3, #0]
			send_UART("Ki value changed with success.");
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <proc_ki_cmd+0x80>)
 8000f6e:	f000 ff7b 	bl	8001e68 <send_UART>
		else
			send_UART("Invalid Ki value.");
	}
	else
		send_UART("Invalid KI instruction syntax.");
}
 8000f72:	e006      	b.n	8000f82 <proc_ki_cmd+0x66>
			send_UART("Invalid Ki value.");
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <proc_ki_cmd+0x84>)
 8000f76:	f000 ff77 	bl	8001e68 <send_UART>
}
 8000f7a:	e002      	b.n	8000f82 <proc_ki_cmd+0x66>
		send_UART("Invalid KI instruction syntax.");
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <proc_ki_cmd+0x88>)
 8000f7e:	f000 ff73 	bl	8001e68 <send_UART>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	0800b9ac 	.word	0x0800b9ac
 8000f90:	c3480000 	.word	0xc3480000
 8000f94:	43480000 	.word	0x43480000
 8000f98:	200002c0 	.word	0x200002c0
 8000f9c:	0800b9b4 	.word	0x0800b9b4
 8000fa0:	0800b9d4 	.word	0x0800b9d4
 8000fa4:	0800b9e8 	.word	0x0800b9e8

08000fa8 <set_Kh_values>:
	return mode_speed;
}
*/

void set_Kh_values(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	Kp_h = Kp;
 8000fac:	4b58      	ldr	r3, [pc, #352]	; (8001110 <set_Kh_values+0x168>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a58      	ldr	r2, [pc, #352]	; (8001114 <set_Kh_values+0x16c>)
 8000fb2:	6013      	str	r3, [r2, #0]

	if(!strcmp(sp_config.timeunit, "us"))
 8000fb4:	4958      	ldr	r1, [pc, #352]	; (8001118 <set_Kh_values+0x170>)
 8000fb6:	4859      	ldr	r0, [pc, #356]	; (800111c <set_Kh_values+0x174>)
 8000fb8:	f7ff f942 	bl	8000240 <strcmp>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d134      	bne.n	800102c <set_Kh_values+0x84>
	{
		Kd_h = Kd * (1 - a) / (0.000001 * sp_config.unit);
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <set_Kh_values+0x178>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fce:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80010f8 <set_Kh_values+0x150>
 8000fd2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000fd6:	4b53      	ldr	r3, [pc, #332]	; (8001124 <set_Kh_values+0x17c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001100 <set_Kh_values+0x158>
 8000fe6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ff2:	ee17 2a90 	vmov	r2, s15
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <set_Kh_values+0x180>)
 8000ff8:	601a      	str	r2, [r3, #0]
		Ki_h = Ki * 0.000001 * sp_config.unit;
 8000ffa:	4b4c      	ldr	r3, [pc, #304]	; (800112c <set_Kh_values+0x184>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001006:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001100 <set_Kh_values+0x158>
 800100a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800100e:	4b45      	ldr	r3, [pc, #276]	; (8001124 <set_Kh_values+0x17c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800101a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800101e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001022:	ee17 2a90 	vmov	r2, s15
 8001026:	4b42      	ldr	r3, [pc, #264]	; (8001130 <set_Kh_values+0x188>)
 8001028:	601a      	str	r2, [r3, #0]
	else if(!strcmp(sp_config.timeunit, "s"))
	{
		Kd_h = Kd * (1 - a) / sp_config.unit;
		Ki_h = Ki * sp_config.unit;
	}
}
 800102a:	e063      	b.n	80010f4 <set_Kh_values+0x14c>
	else if(!strcmp(sp_config.timeunit, "ms"))
 800102c:	4941      	ldr	r1, [pc, #260]	; (8001134 <set_Kh_values+0x18c>)
 800102e:	483b      	ldr	r0, [pc, #236]	; (800111c <set_Kh_values+0x174>)
 8001030:	f7ff f906 	bl	8000240 <strcmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d134      	bne.n	80010a4 <set_Kh_values+0xfc>
		Kd_h = Kd * (1 - a) / (0.001 * sp_config.unit);
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <set_Kh_values+0x178>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001046:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80010f8 <set_Kh_values+0x150>
 800104a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800104e:	4b35      	ldr	r3, [pc, #212]	; (8001124 <set_Kh_values+0x17c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800105a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001108 <set_Kh_values+0x160>
 800105e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001062:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001066:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800106a:	ee17 2a90 	vmov	r2, s15
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <set_Kh_values+0x180>)
 8001070:	601a      	str	r2, [r3, #0]
		Ki_h = Ki * (0.001 * sp_config.unit);
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <set_Kh_values+0x184>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800107e:	4b29      	ldr	r3, [pc, #164]	; (8001124 <set_Kh_values+0x17c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800108a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001108 <set_Kh_values+0x160>
 800108e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001092:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001096:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800109a:	ee17 2a90 	vmov	r2, s15
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <set_Kh_values+0x188>)
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	e027      	b.n	80010f4 <set_Kh_values+0x14c>
	else if(!strcmp(sp_config.timeunit, "s"))
 80010a4:	4924      	ldr	r1, [pc, #144]	; (8001138 <set_Kh_values+0x190>)
 80010a6:	481d      	ldr	r0, [pc, #116]	; (800111c <set_Kh_values+0x174>)
 80010a8:	f7ff f8ca 	bl	8000240 <strcmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d120      	bne.n	80010f4 <set_Kh_values+0x14c>
		Kd_h = Kd * (1 - a) / sp_config.unit;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <set_Kh_values+0x178>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010be:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80010f8 <set_Kh_values+0x150>
 80010c2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <set_Kh_values+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010da:	ee17 2a90 	vmov	r2, s15
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <set_Kh_values+0x180>)
 80010e0:	601a      	str	r2, [r3, #0]
		Ki_h = Ki * sp_config.unit;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <set_Kh_values+0x17c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <set_Kh_values+0x184>)
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <set_Kh_values+0x188>)
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	33333333 	.word	0x33333333
 80010fc:	3fe33333 	.word	0x3fe33333
 8001100:	a0b5ed8d 	.word	0xa0b5ed8d
 8001104:	3eb0c6f7 	.word	0x3eb0c6f7
 8001108:	d2f1a9fc 	.word	0xd2f1a9fc
 800110c:	3f50624d 	.word	0x3f50624d
 8001110:	200002b0 	.word	0x200002b0
 8001114:	200002b4 	.word	0x200002b4
 8001118:	0800b7ec 	.word	0x0800b7ec
 800111c:	20000098 	.word	0x20000098
 8001120:	200002b8 	.word	0x200002b8
 8001124:	20000094 	.word	0x20000094
 8001128:	200002bc 	.word	0x200002bc
 800112c:	200002c0 	.word	0x200002c0
 8001130:	200002c4 	.word	0x200002c4
 8001134:	0800b7e4 	.word	0x0800b7e4
 8001138:	0800b7e8 	.word	0x0800b7e8
 800113c:	00000000 	.word	0x00000000

08001140 <update_pos>:

void update_pos(int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if(dir)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d010      	beq.n	8001170 <update_pos+0x30>
		pos_m += POS_UNIT;
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <update_pos+0x68>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800115a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80011a0 <update_pos+0x60>
 800115e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001162:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <update_pos+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
	else
		pos_m -= POS_UNIT;
}
 800116e:	e00f      	b.n	8001190 <update_pos+0x50>
		pos_m -= POS_UNIT;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <update_pos+0x68>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800117c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80011a0 <update_pos+0x60>
 8001180:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001184:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001188:	ee17 2a90 	vmov	r2, s15
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <update_pos+0x68>)
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	f3af 8000 	nop.w
 80011a0:	b0d8fb59 	.word	0xb0d8fb59
 80011a4:	3f7acee8 	.word	0x3f7acee8
 80011a8:	200004ec 	.word	0x200004ec
 80011ac:	00000000 	.word	0x00000000

080011b0 <ISR_PID>:

void ISR_PID()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af02      	add	r7, sp, #8
	y = y_arr_sq[i++];
 80011b6:	4b72      	ldr	r3, [pc, #456]	; (8001380 <ISR_PID+0x1d0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	4970      	ldr	r1, [pc, #448]	; (8001380 <ISR_PID+0x1d0>)
 80011be:	600a      	str	r2, [r1, #0]
 80011c0:	4a70      	ldr	r2, [pc, #448]	; (8001384 <ISR_PID+0x1d4>)
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a6f      	ldr	r2, [pc, #444]	; (8001388 <ISR_PID+0x1d8>)
 80011ca:	6013      	str	r3, [r2, #0]
	i %= 20;
 80011cc:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <ISR_PID+0x1d0>)
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	4b6e      	ldr	r3, [pc, #440]	; (800138c <ISR_PID+0x1dc>)
 80011d2:	fb83 2301 	smull	r2, r3, r3, r1
 80011d6:	10da      	asrs	r2, r3, #3
 80011d8:	17cb      	asrs	r3, r1, #31
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	1aca      	subs	r2, r1, r3
 80011e6:	4b66      	ldr	r3, [pc, #408]	; (8001380 <ISR_PID+0x1d0>)
 80011e8:	601a      	str	r2, [r3, #0]
	//y = pos_m;
	e = yr - y;
 80011ea:	4b69      	ldr	r3, [pc, #420]	; (8001390 <ISR_PID+0x1e0>)
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <ISR_PID+0x1d8>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fa:	4b66      	ldr	r3, [pc, #408]	; (8001394 <ISR_PID+0x1e4>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]

	if(aut)
 8001200:	4b65      	ldr	r3, [pc, #404]	; (8001398 <ISR_PID+0x1e8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a9 	beq.w	800135c <ISR_PID+0x1ac>
	{
		sum_e_bkp = sum_e;
 800120a:	4b64      	ldr	r3, [pc, #400]	; (800139c <ISR_PID+0x1ec>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a64      	ldr	r2, [pc, #400]	; (80013a0 <ISR_PID+0x1f0>)
 8001210:	6013      	str	r3, [r2, #0]
		sum_e = sum_e + e_ant;
 8001212:	4b62      	ldr	r3, [pc, #392]	; (800139c <ISR_PID+0x1ec>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <ISR_PID+0x1f4>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	4b5e      	ldr	r3, [pc, #376]	; (800139c <ISR_PID+0x1ec>)
 8001224:	edc3 7a00 	vstr	s15, [r3]
		u_d = Kd_h * (y - y_ant) + a * u_d_ant;
 8001228:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <ISR_PID+0x1f8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	4b54      	ldr	r3, [pc, #336]	; (8001388 <ISR_PID+0x1d8>)
 8001236:	edd3 6a00 	vldr	s13, [r3]
 800123a:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <ISR_PID+0x1fc>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800124c:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <ISR_PID+0x200>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001256:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8001378 <ISR_PID+0x1c8>
 800125a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800125e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001262:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <ISR_PID+0x204>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		u = Kp_h * e + Ki_h * sum_e - u_d;
 800126c:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <ISR_PID+0x208>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001278:	4b46      	ldr	r3, [pc, #280]	; (8001394 <ISR_PID+0x1e4>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001282:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <ISR_PID+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <ISR_PID+0x1ec>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <ISR_PID+0x204>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <ISR_PID+0x210>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
		e_ant = e;
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <ISR_PID+0x1e4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a3c      	ldr	r2, [pc, #240]	; (80013a4 <ISR_PID+0x1f4>)
 80012b2:	6013      	str	r3, [r2, #0]
		y_ant = y;
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <ISR_PID+0x1d8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a3c      	ldr	r2, [pc, #240]	; (80013ac <ISR_PID+0x1fc>)
 80012ba:	6013      	str	r3, [r2, #0]
		u_d_ant = u_d;
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <ISR_PID+0x204>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a3b      	ldr	r2, [pc, #236]	; (80013b0 <ISR_PID+0x200>)
 80012c2:	6013      	str	r3, [r2, #0]

		if (u > U_SAT_MAX)
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <ISR_PID+0x210>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80012ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	dd07      	ble.n	80012e8 <ISR_PID+0x138>
		{
			u = U_SAT_MAX;
 80012d8:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <ISR_PID+0x210>)
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <ISR_PID+0x214>)
 80012dc:	601a      	str	r2, [r3, #0]
			sum_e = sum_e_bkp;
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <ISR_PID+0x1f0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2e      	ldr	r2, [pc, #184]	; (800139c <ISR_PID+0x1ec>)
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e010      	b.n	800130a <ISR_PID+0x15a>
		}
		else if(u < U_SAT_MIN)
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <ISR_PID+0x210>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80012f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	d506      	bpl.n	800130a <ISR_PID+0x15a>
		{
			u = U_SAT_MIN;
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <ISR_PID+0x210>)
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <ISR_PID+0x218>)
 8001300:	601a      	str	r2, [r3, #0]
			sum_e = sum_e_bkp;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <ISR_PID+0x1f0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a25      	ldr	r2, [pc, #148]	; (800139c <ISR_PID+0x1ec>)
 8001308:	6013      	str	r3, [r2, #0]
		}

		TIM2->CCR4 = u/6*100;
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <ISR_PID+0x210>)
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001318:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80013cc <ISR_PID+0x21c>
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	641a      	str	r2, [r3, #64]	; 0x40

		char message[32];
		sprintf(message, "%f;%f;", y, u);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <ISR_PID+0x1d8>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <ISR_PID+0x210>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001342:	4638      	mov	r0, r7
 8001344:	ed8d 7b00 	vstr	d7, [sp]
 8001348:	ec53 2b16 	vmov	r2, r3, d6
 800134c:	4920      	ldr	r1, [pc, #128]	; (80013d0 <ISR_PID+0x220>)
 800134e:	f006 f85b 	bl	8007408 <siprintf>
		send_UART(message);
 8001352:	463b      	mov	r3, r7
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fd87 	bl	8001e68 <send_UART>
	else
	{
		e_ant = e;
		y_ant = y;
	}
}
 800135a:	e007      	b.n	800136c <ISR_PID+0x1bc>
		e_ant = e;
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <ISR_PID+0x1e4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <ISR_PID+0x1f4>)
 8001362:	6013      	str	r3, [r2, #0]
		y_ant = y;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <ISR_PID+0x1d8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <ISR_PID+0x1fc>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	f3af 8000 	nop.w
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fd99999 	.word	0x3fd99999
 8001380:	200002d4 	.word	0x200002d4
 8001384:	20000044 	.word	0x20000044
 8001388:	200002a8 	.word	0x200002a8
 800138c:	66666667 	.word	0x66666667
 8001390:	20000040 	.word	0x20000040
 8001394:	200002a0 	.word	0x200002a0
 8001398:	2000003c 	.word	0x2000003c
 800139c:	2000029c 	.word	0x2000029c
 80013a0:	20000298 	.word	0x20000298
 80013a4:	200002a4 	.word	0x200002a4
 80013a8:	200002bc 	.word	0x200002bc
 80013ac:	200002ac 	.word	0x200002ac
 80013b0:	200002d0 	.word	0x200002d0
 80013b4:	200002cc 	.word	0x200002cc
 80013b8:	200002b4 	.word	0x200002b4
 80013bc:	200002c4 	.word	0x200002c4
 80013c0:	200002c8 	.word	0x200002c8
 80013c4:	40c00000 	.word	0x40c00000
 80013c8:	c0c00000 	.word	0xc0c00000
 80013cc:	42c80000 	.word	0x42c80000
 80013d0:	0800ba08 	.word	0x0800ba08

080013d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <MX_GPIO_Init+0x100>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a39      	ldr	r2, [pc, #228]	; (80014d4 <MX_GPIO_Init+0x100>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <MX_GPIO_Init+0x100>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <MX_GPIO_Init+0x100>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <MX_GPIO_Init+0x100>)
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <MX_GPIO_Init+0x100>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_GPIO_Init+0x100>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <MX_GPIO_Init+0x100>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_GPIO_Init+0x100>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|FW_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f240 4101 	movw	r1, #1025	; 0x401
 8001438:	4827      	ldr	r0, [pc, #156]	; (80014d8 <MX_GPIO_Init+0x104>)
 800143a:	f001 fa13 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RV_GPIO_Port, RV_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001444:	4825      	ldr	r0, [pc, #148]	; (80014dc <MX_GPIO_Init+0x108>)
 8001446:	f001 fa0d 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|FW_Pin;
 800144a:	f240 4301 	movw	r3, #1025	; 0x401
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	481d      	ldr	r0, [pc, #116]	; (80014d8 <MX_GPIO_Init+0x104>)
 8001464:	f001 f83a 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SB_Pin;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SB_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4817      	ldr	r0, [pc, #92]	; (80014dc <MX_GPIO_Init+0x108>)
 800147e:	f001 f82d 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SA_Pin;
 8001482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001488:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SA_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <MX_GPIO_Init+0x108>)
 800149a:	f001 f81f 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RV_Pin;
 800149e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RV_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <MX_GPIO_Init+0x108>)
 80014b8:	f001 f810 	bl	80024dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2028      	movs	r0, #40	; 0x28
 80014c2:	f000 ff34 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014c6:	2028      	movs	r0, #40	; 0x28
 80014c8:	f000 ff4d 	bl	8002366 <HAL_NVIC_EnableIRQ>

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
	int dir_m = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 80014ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_GPIO_EXTI_Callback+0x28>)
 80014f0:	f001 f9a0 	bl	8002834 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	60fb      	str	r3, [r7, #12]
	update_pos(dir_m);
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff fe21 	bl	8001140 <update_pos>
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0c2      	sub	sp, #264	; 0x108
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f000 fdb0 	bl	8002076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f83d 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 800151a:	f000 fa67 	bl	80019ec <MX_TIM3_Init>
  MX_GPIO_Init();
 800151e:	f7ff ff59 	bl	80013d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001522:	f000 fbbf 	bl	8001ca4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001526:	f000 f9eb 	bl	8001900 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	4915      	ldr	r1, [pc, #84]	; (8001584 <main+0x78>)
 800152e:	4816      	ldr	r0, [pc, #88]	; (8001588 <main+0x7c>)
 8001530:	f003 fe06 	bl	8005140 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8001534:	4815      	ldr	r0, [pc, #84]	; (800158c <main+0x80>)
 8001536:	f000 fc97 	bl	8001e68 <send_UART>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(has_message_from_UART())
 800153a:	f000 fc65 	bl	8001e08 <has_message_from_UART>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0fa      	beq.n	800153a <main+0x2e>
	  {
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fcb8 	bl	8001ebc <read_UART>

		  unsigned char cmd = check_command((char*) message);
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fa4e 	bl	80009f0 <check_command>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 800155a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800155e:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <main+0x84>)
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	1d3a      	adds	r2, r7, #4
 8001566:	4610      	mov	r0, r2
 8001568:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 800156a:	bf00      	nop
 800156c:	f000 fc58 	bl	8001e20 <is_transmitting_to_UART>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1fa      	bne.n	800156c <main+0x60>

		  reset_UART();
 8001576:	f000 fc5f 	bl	8001e38 <reset_UART>
		  send_UART(PROMPT);
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <main+0x80>)
 800157c:	f000 fc74 	bl	8001e68 <send_UART>
	  if(has_message_from_UART())
 8001580:	e7db      	b.n	800153a <main+0x2e>
 8001582:	bf00      	nop
 8001584:	200002e4 	.word	0x200002e4
 8001588:	20000590 	.word	0x20000590
 800158c:	0800ba10 	.word	0x0800ba10
 8001590:	20000000 	.word	0x20000000

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	; 0x50
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2234      	movs	r2, #52	; 0x34
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 f8da 	bl	800675c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <SystemClock_Config+0xd4>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <SystemClock_Config+0xd4>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <SystemClock_Config+0xd4>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <SystemClock_Config+0xd8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a25      	ldr	r2, [pc, #148]	; (800166c <SystemClock_Config+0xd8>)
 80015d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <SystemClock_Config+0xd8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f0:	2310      	movs	r3, #16
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f4:	2302      	movs	r3, #2
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015fc:	2308      	movs	r3, #8
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001600:	23c0      	movs	r3, #192	; 0xc0
 8001602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001604:	2302      	movs	r3, #2
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4618      	mov	r0, r3
 8001616:	f001 f9c1 	bl	800299c <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001620:	f000 f826 	bl	8001670 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001624:	f001 f96a 	bl	80028fc <HAL_PWREx_EnableOverDrive>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800162e:	f000 f81f 	bl	8001670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001632:	230f      	movs	r3, #15
 8001634:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	2302      	movs	r3, #2
 8001638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800163e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001648:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2106      	movs	r1, #6
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fc51 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800165c:	f000 f808 	bl	8001670 <Error_Handler>
  }
}
 8001660:	bf00      	nop
 8001662:	3750      	adds	r7, #80	; 0x50
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x44>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_MspInit+0x44>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_MspInit+0x44>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_MspInit+0x44>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_MspInit+0x44>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_MspInit+0x44>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 fcee 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <TIM3_IRQHandler+0x10>)
 800171e:	f002 fcc3 	bl	80040a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200004f8 	.word	0x200004f8

0800172c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <USART3_IRQHandler+0x10>)
 8001732:	f003 fd53 	bl	80051dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000590 	.word	0x20000590

08001740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SA_Pin);
 8001744:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001748:	f001 f8c0 	bl	80028cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_kill>:

int _kill(int pid, int sig)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800176a:	f004 ffcd 	bl	8006708 <__errno>
 800176e:	4603      	mov	r3, r0
 8001770:	2216      	movs	r2, #22
 8001772:	601a      	str	r2, [r3, #0]
	return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_exit>:

void _exit (int status)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe7 	bl	8001760 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001792:	e7fe      	b.n	8001792 <_exit+0x12>

08001794 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e00a      	b.n	80017bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017a6:	f3af 8000 	nop.w
 80017aa:	4601      	mov	r1, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf0      	blt.n	80017a6 <_read+0x12>
	}

return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e009      	b.n	80017f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf1      	blt.n	80017e0 <_write+0x12>
	}
	return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_close>:

int _close(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	return -1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182e:	605a      	str	r2, [r3, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_isatty>:

int _isatty(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	return 1;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f004 ff32 	bl	8006708 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20080000 	.word	0x20080000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	200002d8 	.word	0x200002d8
 80018d8:	20000628 	.word	0x20000628

080018dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <MX_TIM2_Init+0xe8>)
 8001934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <MX_TIM2_Init+0xe8>)
 800193c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <MX_TIM2_Init+0xe8>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <MX_TIM2_Init+0xe8>)
 800194a:	2263      	movs	r2, #99	; 0x63
 800194c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_TIM2_Init+0xe8>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <MX_TIM2_Init+0xe8>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195a:	4823      	ldr	r0, [pc, #140]	; (80019e8 <MX_TIM2_Init+0xe8>)
 800195c:	f002 f8ca 	bl	8003af4 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001966:	f7ff fe83 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001974:	4619      	mov	r1, r3
 8001976:	481c      	ldr	r0, [pc, #112]	; (80019e8 <MX_TIM2_Init+0xe8>)
 8001978:	f002 fdca 	bl	8004510 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001982:	f7ff fe75 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001986:	4818      	ldr	r0, [pc, #96]	; (80019e8 <MX_TIM2_Init+0xe8>)
 8001988:	f002 f9b3 	bl	8003cf2 <HAL_TIM_PWM_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001992:	f7ff fe6d 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <MX_TIM2_Init+0xe8>)
 80019a6:	f003 fa63 	bl	8004e70 <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019b0:	f7ff fe5e 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b4:	2360      	movs	r3, #96	; 0x60
 80019b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	220c      	movs	r2, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <MX_TIM2_Init+0xe8>)
 80019cc:	f002 fc8c 	bl	80042e8 <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019d6:	f7ff fe4b 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019da:	4803      	ldr	r0, [pc, #12]	; (80019e8 <MX_TIM2_Init+0xe8>)
 80019dc:	f000 f88c 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 80019e0:	bf00      	nop
 80019e2:	3738      	adds	r7, #56	; 0x38
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000544 	.word	0x20000544

080019ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <MX_TIM3_Init+0x98>)
 8001a0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a12:	225f      	movs	r2, #95	; 0x5f
 8001a14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a30:	4813      	ldr	r0, [pc, #76]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a32:	f002 f85f 	bl	8003af4 <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a3c:	f7ff fe18 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a4e:	f002 fd5f 	bl	8004510 <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a58:	f7ff fe0a 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM3_Init+0x94>)
 8001a6a:	f003 fa01 	bl	8004e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f7ff fdfc 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200004f8 	.word	0x200004f8
 8001a84:	40000400 	.word	0x40000400

08001a88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d10c      	bne.n	8001ab4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_TIM_Base_MspInit+0x68>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <HAL_TIM_Base_MspInit+0x68>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_TIM_Base_MspInit+0x68>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ab2:	e018      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_TIM_Base_MspInit+0x6c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d113      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_TIM_Base_MspInit+0x68>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_TIM_Base_MspInit+0x68>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_TIM_Base_MspInit+0x68>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201d      	movs	r0, #29
 8001adc:	f000 fc27 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ae0:	201d      	movs	r0, #29
 8001ae2:	f000 fc40 	bl	8002366 <HAL_NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40000400 	.word	0x40000400

08001af8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d11c      	bne.n	8001b54 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001b32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b50:	f000 fcc4 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020400 	.word	0x40020400

08001b64 <MY_TIM3_Init>:
}

/* USER CODE BEGIN 1 */

void MY_TIM3_Init(struct sp_config_t sp_config)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	e883 0003 	stmia.w	r3, {r0, r1}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28

	if(!strncmp(sp_config.timeunit, "us", 2))
 8001b92:	463b      	mov	r3, r7
 8001b94:	3304      	adds	r3, #4
 8001b96:	2202      	movs	r2, #2
 8001b98:	4932      	ldr	r1, [pc, #200]	; (8001c64 <MY_TIM3_Init+0x100>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 fccd 	bl	800753a <strncmp>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d018      	beq.n	8001bd8 <MY_TIM3_Init+0x74>
	{
		//sp_period_s = 0.000001 * sp_config.unit;
	}
	else if(!strncmp(sp_config.timeunit, "ms", 2))
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2202      	movs	r2, #2
 8001bac:	492e      	ldr	r1, [pc, #184]	; (8001c68 <MY_TIM3_Init+0x104>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 fcc3 	bl	800753a <strncmp>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <MY_TIM3_Init+0x5e>
	{
		//sp_period_s = 0.001 * sp_config.unit;
		mul1 = 1000;
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc0:	e00a      	b.n	8001bd8 <MY_TIM3_Init+0x74>
	}
	else if(!strncmp(sp_config.timeunit, "s", 1))
 8001bc2:	793a      	ldrb	r2, [r7, #4]
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <MY_TIM3_Init+0x108>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d104      	bne.n	8001bd8 <MY_TIM3_Init+0x74>
	{
		//sp_period_s = 1 * sp_config.unit;
		mul1 = 20000;
 8001bce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		mul2 = 50;
 8001bd4:	2332      	movs	r3, #50	; 0x32
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	htim3.Instance = TIM3;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <MY_TIM3_Init+0x110>)
 8001bdc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = (2 * mul1) - 1;
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	3b01      	subs	r3, #1
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001be6:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = ((sp_config.unit * 48 * mul2)-1) & 65535;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf2:	fb02 f203 	mul.w	r2, r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001c04:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c12:	4817      	ldr	r0, [pc, #92]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001c14:	f001 ff6e 	bl	8003af4 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MY_TIM3_Init+0xbe>
	{
		Error_Handler();
 8001c1e:	f7ff fd27 	bl	8001670 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4810      	ldr	r0, [pc, #64]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001c30:	f002 fc6e 	bl	8004510 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MY_TIM3_Init+0xda>
	{
		Error_Handler();
 8001c3a:	f7ff fd19 	bl	8001670 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <MY_TIM3_Init+0x10c>)
 8001c4e:	f003 f90f 	bl	8004e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MY_TIM3_Init+0xf8>
	{
		Error_Handler();
 8001c58:	f7ff fd0a 	bl	8001670 <Error_Handler>
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	0800ba14 	.word	0x0800ba14
 8001c68:	0800ba18 	.word	0x0800ba18
 8001c6c:	0800ba1c 	.word	0x0800ba1c
 8001c70:	200004f8 	.word	0x200004f8
 8001c74:	40000400 	.word	0x40000400

08001c78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d105      	bne.n	8001c94 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ISR_PID();
 8001c88:	f7ff fa92 	bl	80011b0 <ISR_PID>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001c90:	f000 fe01 	bl	8002896 <HAL_GPIO_TogglePin>
	}
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200004f8 	.word	0x200004f8
 8001ca0:	40020400 	.word	0x40020400

08001ca4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_USART3_UART_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_USART3_UART_Init+0x78>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_USART3_UART_Init+0x7c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_USART3_UART_Init+0x80>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_USART3_UART_Init+0x84>)
 8001cc2:	220d      	movs	r2, #13
 8001cc4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <MX_USART3_UART_Init+0x8c>)
 8001cca:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <MX_USART3_UART_Init+0x90>)
 8001cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d02:	480a      	ldr	r0, [pc, #40]	; (8001d2c <MX_USART3_UART_Init+0x88>)
 8001d04:	f003 f960 	bl	8004fc8 <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8001d0e:	f7ff fcaf 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200003e8 	.word	0x200003e8
 8001d1c:	200004f0 	.word	0x200004f0
 8001d20:	200003e4 	.word	0x200003e4
 8001d24:	200004f4 	.word	0x200004f4
 8001d28:	200003ec 	.word	0x200003ec
 8001d2c:	20000590 	.word	0x20000590
 8001d30:	40004800 	.word	0x40004800
 8001d34:	001ab3f0 	.word	0x001ab3f0

08001d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b0ae      	sub	sp, #184	; 0xb8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2290      	movs	r2, #144	; 0x90
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fcff 	bl	800675c <memset>
  if(uartHandle->Instance==USART3)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_UART_MspInit+0xc4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d144      	bne.n	8001df2 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fa94 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d82:	f7ff fc75 	bl	8001670 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_UART_MspInit+0xc8>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_UART_MspInit+0xc8>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_UART_MspInit+0xc8>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_UART_MspInit+0xc8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_UART_MspInit+0xc8>)
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_UART_MspInit+0xc8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <HAL_UART_MspInit+0xcc>)
 8001dde:	f000 fb7d 	bl	80024dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2027      	movs	r0, #39	; 0x27
 8001de8:	f000 faa1 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dec:	2027      	movs	r0, #39	; 0x27
 8001dee:	f000 faba 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001df2:	bf00      	nop
 8001df4:	37b8      	adds	r7, #184	; 0xb8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40004800 	.word	0x40004800
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020c00 	.word	0x40020c00

08001e08 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	return flagCPP;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <has_message_from_UART+0x14>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200003e8 	.word	0x200003e8

08001e20 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
	return flagCPE;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <is_transmitting_to_UART+0x14>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200004f0 	.word	0x200004f0

08001e38 <reset_UART>:

void reset_UART()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8001e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e40:	2100      	movs	r1, #0
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <reset_UART+0x24>)
 8001e44:	f004 fc8a 	bl	800675c <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4904      	ldr	r1, [pc, #16]	; (8001e5c <reset_UART+0x24>)
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <reset_UART+0x28>)
 8001e4e:	f003 f977 	bl	8005140 <HAL_UART_Receive_IT>
	flagCPP = false;
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <reset_UART+0x2c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200002e4 	.word	0x200002e4
 8001e60:	20000590 	.word	0x20000590
 8001e64:	200003e8 	.word	0x200003e8

08001e68 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8001e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	480d      	ldr	r0, [pc, #52]	; (8001eac <send_UART+0x44>)
 8001e78:	f005 fb71 	bl	800755e <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <send_UART+0x44>)
 8001e7e:	f7fe f9e9 	bl	8000254 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <send_UART+0x44>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	4909      	ldr	r1, [pc, #36]	; (8001eb0 <send_UART+0x48>)
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	460b      	mov	r3, r1
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <send_UART+0x4c>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <send_UART+0x44>)
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <send_UART+0x50>)
 8001ea0:	f003 f8e0 	bl	8005064 <HAL_UART_Transmit_IT>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200003ec 	.word	0x200003ec
 8001eb0:	0800ba20 	.word	0x0800ba20
 8001eb4:	200004f0 	.word	0x200004f0
 8001eb8:	20000590 	.word	0x20000590

08001ebc <read_UART>:

void read_UART(char* msg_to_read)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8001ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <read_UART+0x1c>)
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f005 fb47 	bl	800755e <strncpy>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200002e4 	.word	0x200002e4

08001edc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_UART_RxCpltCallback+0xc4>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d154      	bne.n	8001f96 <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	2b0d      	cmp	r3, #13
 8001ef6:	d00b      	beq.n	8001f10 <HAL_UART_RxCpltCallback+0x34>
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	2b5c      	cmp	r3, #92	; 0x5c
 8001f02:	d005      	beq.n	8001f10 <HAL_UART_RxCpltCallback+0x34>
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001f0a:	5cd3      	ldrb	r3, [r2, r3]
 8001f0c:	2b2f      	cmp	r3, #47	; 0x2f
 8001f0e:	d106      	bne.n	8001f1e <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_UART_RxCpltCallback+0xc4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e03c      	b.n	8001f98 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d10f      	bne.n	8001f4a <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e01c      	b.n	8001f78 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3b02      	subs	r3, #2
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e016      	b.n	8001f78 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	2b1b      	cmp	r3, #27
 8001f54:	d104      	bne.n	8001f60 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e00b      	b.n	8001f78 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	2b24      	cmp	r3, #36	; 0x24
 8001f6a:	d105      	bne.n	8001f78 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001f74:	2224      	movs	r2, #36	; 0x24
 8001f76:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <HAL_UART_RxCpltCallback+0xd0>)
 8001f90:	f003 f8d6 	bl	8005140 <HAL_UART_Receive_IT>
 8001f94:	e000      	b.n	8001f98 <HAL_UART_RxCpltCallback+0xbc>
		return;
 8001f96:	bf00      	nop
	}
}
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003e8 	.word	0x200003e8
 8001fa4:	200003e4 	.word	0x200003e4
 8001fa8:	200002e4 	.word	0x200002e4
 8001fac:	20000590 	.word	0x20000590

08001fb0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_UART_TxCpltCallback+0x64>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	f083 0301 	eor.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d122      	bne.n	800200c <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_UART_TxCpltCallback+0x68>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_UART_TxCpltCallback+0x6c>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	2b0d      	cmp	r3, #13
 8001fd0:	d10d      	bne.n	8001fee <HAL_UART_TxCpltCallback+0x3e>
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_UART_TxCpltCallback+0x68>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_UART_TxCpltCallback+0x6c>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	2b0a      	cmp	r3, #10
 8001fde:	d006      	beq.n	8001fee <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_UART_TxCpltCallback+0x68>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_UART_TxCpltCallback+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e00f      	b.n	800200e <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_UART_TxCpltCallback+0x68>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_UART_TxCpltCallback+0x68>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_UART_TxCpltCallback+0x68>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_UART_TxCpltCallback+0x6c>)
 8001ffe:	4413      	add	r3, r2
 8002000:	2201      	movs	r2, #1
 8002002:	4619      	mov	r1, r3
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <HAL_UART_TxCpltCallback+0x70>)
 8002006:	f003 f82d 	bl	8005064 <HAL_UART_Transmit_IT>
 800200a:	e000      	b.n	800200e <HAL_UART_TxCpltCallback+0x5e>
		return;
 800200c:	bf00      	nop
}
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200004f0 	.word	0x200004f0
 8002018:	200004f4 	.word	0x200004f4
 800201c:	200003ec 	.word	0x200003ec
 8002020:	20000590 	.word	0x20000590

08002024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800205c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800202a:	490e      	ldr	r1, [pc, #56]	; (8002064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002040:	4c0b      	ldr	r4, [pc, #44]	; (8002070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800204e:	f7ff fc45 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002052:	f004 fb5f 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002056:	f7ff fa59 	bl	800150c <main>
  bx  lr    
 800205a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800205c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002064:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8002068:	0800bf24 	.word	0x0800bf24
  ldr r2, =_sbss
 800206c:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8002070:	20000628 	.word	0x20000628

08002074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002074:	e7fe      	b.n	8002074 <ADC_IRQHandler>

08002076 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207a:	2003      	movs	r0, #3
 800207c:	f000 f94c 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002080:	200f      	movs	r0, #15
 8002082:	f000 f805 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002086:	f7ff faf9 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f975 	bl	800239e <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f92f 	bl	800232e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2000009c 	.word	0x2000009c
 80020e8:	200000a4 	.word	0x200000a4
 80020ec:	200000a0 	.word	0x200000a0

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	200000a4 	.word	0x200000a4
 8002114:	20000614 	.word	0x20000614

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000614 	.word	0x20000614

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <__NVIC_SetPriorityGrouping+0x40>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	4313      	orrs	r3, r2
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x40>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00
 8002174:	05fa0000 	.word	0x05fa0000

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4907      	ldr	r1, [pc, #28]	; (80021cc <__NVIC_EnableIRQ+0x38>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db12      	blt.n	8002208 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	490a      	ldr	r1, [pc, #40]	; (8002214 <__NVIC_DisableIRQ+0x44>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	3320      	adds	r3, #32
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021fc:	f3bf 8f4f 	dsb	sy
}
 8002200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002202:	f3bf 8f6f 	isb	sy
}
 8002206:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff05 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff1a 	bl	8002178 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff8e 	bl	800226c <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff0d 	bl	8002194 <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff1d 	bl	80021d0 <__NVIC_DisableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff94 	bl	80022d4 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fea8 	bl	8002118 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d008      	beq.n	80023e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e052      	b.n	800248e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0216 	bic.w	r2, r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <HAL_DMA_Abort+0x62>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0208 	bic.w	r2, r2, #8
 8002426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	e013      	b.n	8002462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243a:	f7ff fe6d 	bl	8002118 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b05      	cmp	r3, #5
 8002446:	d90c      	bls.n	8002462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e015      	b.n	800248e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e4      	bne.n	800243a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d004      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00c      	b.n	80024ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e175      	b.n	80027e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 8164 	bne.w	80027e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d005      	beq.n	8002532 <HAL_GPIO_Init+0x56>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d130      	bne.n	8002594 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b03      	cmp	r3, #3
 800259e:	d017      	beq.n	80025d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d123      	bne.n	8002624 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80be 	beq.w	80027e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a65      	ldr	r2, [pc, #404]	; (8002800 <HAL_GPIO_Init+0x324>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800267e:	4a61      	ldr	r2, [pc, #388]	; (8002804 <HAL_GPIO_Init+0x328>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_GPIO_Init+0x32c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d037      	beq.n	800271a <HAL_GPIO_Init+0x23e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_GPIO_Init+0x330>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d031      	beq.n	8002716 <HAL_GPIO_Init+0x23a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a56      	ldr	r2, [pc, #344]	; (8002810 <HAL_GPIO_Init+0x334>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <HAL_GPIO_Init+0x236>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_GPIO_Init+0x338>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x232>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_GPIO_Init+0x33c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x22e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_GPIO_Init+0x340>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x22a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_GPIO_Init+0x344>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x226>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x348>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a50      	ldr	r2, [pc, #320]	; (8002828 <HAL_GPIO_Init+0x34c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4f      	ldr	r2, [pc, #316]	; (800282c <HAL_GPIO_Init+0x350>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026f2:	2309      	movs	r3, #9
 80026f4:	e012      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026f6:	230a      	movs	r3, #10
 80026f8:	e010      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fa:	2308      	movs	r3, #8
 80026fc:	e00e      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00c      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002702:	2306      	movs	r3, #6
 8002704:	e00a      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002706:	2305      	movs	r3, #5
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270a:	2304      	movs	r3, #4
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x240>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_GPIO_Init+0x328>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_GPIO_Init+0x354>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_GPIO_Init+0x354>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f ae86 	bls.w	80024fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40021400 	.word	0x40021400
 8002820:	40021800 	.word	0x40021800
 8002824:	40021c00 	.word	0x40021c00
 8002828:	40022000 	.word	0x40022000
 800282c:	40022400 	.word	0x40022400
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a8:	887a      	ldrh	r2, [r7, #2]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	041a      	lsls	r2, r3, #16
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	400b      	ands	r3, r1
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fdf8 	bl	80014e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_PWREx_EnableOverDrive+0x98>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a22      	ldr	r2, [pc, #136]	; (8002994 <HAL_PWREx_EnableOverDrive+0x98>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_PWREx_EnableOverDrive+0x98>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292a:	f7ff fbf5 	bl	8002118 <HAL_GetTick>
 800292e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002930:	e009      	b.n	8002946 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002932:	f7ff fbf1 	bl	8002118 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002940:	d901      	bls.n	8002946 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e022      	b.n	800298c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d1ee      	bne.n	8002932 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <HAL_PWREx_EnableOverDrive+0x9c>)
 800295a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002960:	f7ff fbda 	bl	8002118 <HAL_GetTick>
 8002964:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002966:	e009      	b.n	800297c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002968:	f7ff fbd6 	bl	8002118 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002976:	d901      	bls.n	800297c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e007      	b.n	800298c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_PWREx_EnableOverDrive+0x9c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002988:	d1ee      	bne.n	8002968 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000

0800299c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e29b      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8087 	beq.w	8002ace <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c0:	4b96      	ldr	r3, [pc, #600]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d00c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029cc:	4b93      	ldr	r3, [pc, #588]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d112      	bne.n	80029fe <HAL_RCC_OscConfig+0x62>
 80029d8:	4b90      	ldr	r3, [pc, #576]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e4:	d10b      	bne.n	80029fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e6:	4b8d      	ldr	r3, [pc, #564]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d06c      	beq.n	8002acc <HAL_RCC_OscConfig+0x130>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d168      	bne.n	8002acc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e275      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x7a>
 8002a08:	4b84      	ldr	r3, [pc, #528]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a83      	ldr	r2, [pc, #524]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	e02e      	b.n	8002a74 <HAL_RCC_OscConfig+0xd8>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x9c>
 8002a1e:	4b7f      	ldr	r3, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7e      	ldr	r2, [pc, #504]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7b      	ldr	r2, [pc, #492]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e01d      	b.n	8002a74 <HAL_RCC_OscConfig+0xd8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0xc0>
 8002a42:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a75      	ldr	r2, [pc, #468]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b73      	ldr	r3, [pc, #460]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0xd8>
 8002a5c:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6e      	ldr	r2, [pc, #440]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6b      	ldr	r2, [pc, #428]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fb4c 	bl	8002118 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7ff fb48 	bl	8002118 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e229      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe8>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7ff fb38 	bl	8002118 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7ff fb34 	bl	8002118 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e215      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x110>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d069      	beq.n	8002bae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ada:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x190>
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x17a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1e9      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	493d      	ldr	r1, [pc, #244]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e040      	b.n	8002bae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d023      	beq.n	8002b7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a38      	ldr	r2, [pc, #224]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7ff faea 	bl	8002118 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b48:	f7ff fae6 	bl	8002118 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1c7      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4929      	ldr	r1, [pc, #164]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
 8002b7a:	e018      	b.n	8002bae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7ff fac6 	bl	8002118 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b90:	f7ff fac2 	bl	8002118 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1a3      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d038      	beq.n	8002c2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d019      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7ff faa3 	bl	8002118 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fa9f 	bl	8002118 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e180      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x23a>
 8002bf4:	e01a      	b.n	8002c2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7ff fa89 	bl	8002118 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7ff fa85 	bl	8002118 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d903      	bls.n	8002c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e166      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
 8002c1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a4 	beq.w	8002d82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b8c      	ldr	r3, [pc, #560]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b89      	ldr	r3, [pc, #548]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a88      	ldr	r2, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b86      	ldr	r3, [pc, #536]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c62:	4b83      	ldr	r3, [pc, #524]	; (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c6e:	4b80      	ldr	r3, [pc, #512]	; (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7f      	ldr	r2, [pc, #508]	; (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7ff fa4d 	bl	8002118 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7ff fa49 	bl	8002118 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e12a      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c94:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x31a>
 8002ca8:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a6f      	ldr	r2, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	e02d      	b.n	8002d12 <HAL_RCC_OscConfig+0x376>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x33c>
 8002cbe:	4b6b      	ldr	r3, [pc, #428]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cca:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a67      	ldr	r2, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd6:	e01c      	b.n	8002d12 <HAL_RCC_OscConfig+0x376>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d10c      	bne.n	8002cfa <HAL_RCC_OscConfig+0x35e>
 8002ce0:	4b62      	ldr	r3, [pc, #392]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a61      	ldr	r2, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCC_OscConfig+0x376>
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a5b      	ldr	r2, [pc, #364]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
 8002d06:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f9fd 	bl	8002118 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7ff f9f9 	bl	8002118 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0d8      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ee      	beq.n	8002d22 <HAL_RCC_OscConfig+0x386>
 8002d44:	e014      	b.n	8002d70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7ff f9e7 	bl	8002118 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7ff f9e3 	bl	8002118 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0c2      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80ae 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d06d      	beq.n	8002e74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d14b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7ff f9b4 	bl	8002118 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7ff f9b0 	bl	8002118 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e091      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	019b      	lsls	r3, r3, #6
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	3b01      	subs	r3, #1
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	071b      	lsls	r3, r3, #28
 8002dfe:	491b      	ldr	r1, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7ff f982 	bl	8002118 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7ff f97e 	bl	8002118 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e05f      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x47c>
 8002e36:	e057      	b.n	8002ee8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7ff f968 	bl	8002118 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7ff f964 	bl	8002118 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e045      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4b0>
 8002e6a:	e03d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x54c>
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCC_OscConfig+0x558>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d030      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d129      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d122      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eaa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d119      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0d0      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d910      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 020f 	bic.w	r2, r3, #15
 8002f26:	4965      	ldr	r1, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494d      	ldr	r1, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d040      	beq.n	800301c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d115      	bne.n	8002fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e073      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06b      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fda:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4936      	ldr	r1, [pc, #216]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7ff f894 	bl	8002118 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7ff f890 	bl	8002118 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e053      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 020c 	and.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d1eb      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d210      	bcs.n	800304c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 020f 	bic.w	r2, r3, #15
 8003032:	4922      	ldr	r1, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f821 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490a      	ldr	r1, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1cc>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1d0>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1d4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fff0 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	0800ba30 	.word	0x0800ba30
 80030c8:	2000009c 	.word	0x2000009c
 80030cc:	200000a0 	.word	0x200000a0

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030d6:	2100      	movs	r1, #0
 80030d8:	6079      	str	r1, [r7, #4]
 80030da:	2100      	movs	r1, #0
 80030dc:	60f9      	str	r1, [r7, #12]
 80030de:	2100      	movs	r1, #0
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80030e2:	2100      	movs	r1, #0
 80030e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e6:	4952      	ldr	r1, [pc, #328]	; (8003230 <HAL_RCC_GetSysClockFreq+0x160>)
 80030e8:	6889      	ldr	r1, [r1, #8]
 80030ea:	f001 010c 	and.w	r1, r1, #12
 80030ee:	2908      	cmp	r1, #8
 80030f0:	d00d      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x3e>
 80030f2:	2908      	cmp	r1, #8
 80030f4:	f200 8094 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x150>
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d002      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x32>
 80030fc:	2904      	cmp	r1, #4
 80030fe:	d003      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x38>
 8003100:	e08e      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003102:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <HAL_RCC_GetSysClockFreq+0x164>)
 8003104:	60bb      	str	r3, [r7, #8]
      break;
 8003106:	e08e      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003108:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <HAL_RCC_GetSysClockFreq+0x168>)
 800310a:	60bb      	str	r3, [r7, #8]
      break;
 800310c:	e08b      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800310e:	4948      	ldr	r1, [pc, #288]	; (8003230 <HAL_RCC_GetSysClockFreq+0x160>)
 8003110:	6849      	ldr	r1, [r1, #4]
 8003112:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003116:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003118:	4945      	ldr	r1, [pc, #276]	; (8003230 <HAL_RCC_GetSysClockFreq+0x160>)
 800311a:	6849      	ldr	r1, [r1, #4]
 800311c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003120:	2900      	cmp	r1, #0
 8003122:	d024      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003124:	4942      	ldr	r1, [pc, #264]	; (8003230 <HAL_RCC_GetSysClockFreq+0x160>)
 8003126:	6849      	ldr	r1, [r1, #4]
 8003128:	0989      	lsrs	r1, r1, #6
 800312a:	4608      	mov	r0, r1
 800312c:	f04f 0100 	mov.w	r1, #0
 8003130:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003134:	f04f 0500 	mov.w	r5, #0
 8003138:	ea00 0204 	and.w	r2, r0, r4
 800313c:	ea01 0305 	and.w	r3, r1, r5
 8003140:	493d      	ldr	r1, [pc, #244]	; (8003238 <HAL_RCC_GetSysClockFreq+0x168>)
 8003142:	fb01 f003 	mul.w	r0, r1, r3
 8003146:	2100      	movs	r1, #0
 8003148:	fb01 f102 	mul.w	r1, r1, r2
 800314c:	1844      	adds	r4, r0, r1
 800314e:	493a      	ldr	r1, [pc, #232]	; (8003238 <HAL_RCC_GetSysClockFreq+0x168>)
 8003150:	fba2 0101 	umull	r0, r1, r2, r1
 8003154:	1863      	adds	r3, r4, r1
 8003156:	4619      	mov	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	f7fd fa92 	bl	8000688 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e04a      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316e:	4b30      	ldr	r3, [pc, #192]	; (8003230 <HAL_RCC_GetSysClockFreq+0x160>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	461a      	mov	r2, r3
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	ea02 0400 	and.w	r4, r2, r0
 8003186:	ea03 0501 	and.w	r5, r3, r1
 800318a:	4620      	mov	r0, r4
 800318c:	4629      	mov	r1, r5
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	014b      	lsls	r3, r1, #5
 8003198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800319c:	0142      	lsls	r2, r0, #5
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	1b00      	subs	r0, r0, r4
 80031a4:	eb61 0105 	sbc.w	r1, r1, r5
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	018b      	lsls	r3, r1, #6
 80031b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031b6:	0182      	lsls	r2, r0, #6
 80031b8:	1a12      	subs	r2, r2, r0
 80031ba:	eb63 0301 	sbc.w	r3, r3, r1
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	00d9      	lsls	r1, r3, #3
 80031c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031cc:	00d0      	lsls	r0, r2, #3
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	1912      	adds	r2, r2, r4
 80031d4:	eb45 0303 	adc.w	r3, r5, r3
 80031d8:	f04f 0000 	mov.w	r0, #0
 80031dc:	f04f 0100 	mov.w	r1, #0
 80031e0:	0299      	lsls	r1, r3, #10
 80031e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031e6:	0290      	lsls	r0, r2, #10
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	f7fd fa46 	bl	8000688 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_RCC_GetSysClockFreq+0x160>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	60bb      	str	r3, [r7, #8]
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_RCC_GetSysClockFreq+0x164>)
 8003222:	60bb      	str	r3, [r7, #8]
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	68bb      	ldr	r3, [r7, #8]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bdb0      	pop	{r4, r5, r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	00f42400 	.word	0x00f42400
 8003238:	017d7840 	.word	0x017d7840

0800323c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2000009c 	.word	0x2000009c

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	0800ba40 	.word	0x0800ba40

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003280:	f7ff ffdc 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0b5b      	lsrs	r3, r3, #13
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	0800ba40 	.word	0x0800ba40

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032cc:	4b69      	ldr	r3, [pc, #420]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a68      	ldr	r2, [pc, #416]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032d6:	6093      	str	r3, [r2, #8]
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	4964      	ldr	r1, [pc, #400]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d017      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032fe:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	4959      	ldr	r1, [pc, #356]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800331c:	d101      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d017      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800333a:	4b4e      	ldr	r3, [pc, #312]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003340:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	494a      	ldr	r1, [pc, #296]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003358:	d101      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003366:	2301      	movs	r3, #1
 8003368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003376:	2301      	movs	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 808b 	beq.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b3a      	ldr	r3, [pc, #232]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	4a39      	ldr	r2, [pc, #228]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6413      	str	r3, [r2, #64]	; 0x40
 8003394:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a34      	ldr	r2, [pc, #208]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ac:	f7fe feb4 	bl	8002118 <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b4:	f7fe feb0 	bl	8002118 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e38f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033c6:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d035      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d02e      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033fa:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003410:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d114      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fe78 	bl	8002118 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	e00a      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe fe74 	bl	8002118 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e351      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0ee      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800345a:	d111      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800346a:	400b      	ands	r3, r1
 800346c:	4901      	ldr	r1, [pc, #4]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
 8003472:	e00b      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003474:	40023800 	.word	0x40023800
 8003478:	40007000 	.word	0x40007000
 800347c:	0ffffcff 	.word	0x0ffffcff
 8003480:	4bb3      	ldr	r3, [pc, #716]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4ab2      	ldr	r2, [pc, #712]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003486:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800348a:	6093      	str	r3, [r2, #8]
 800348c:	4bb0      	ldr	r3, [pc, #704]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	49ad      	ldr	r1, [pc, #692]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349a:	4313      	orrs	r3, r2
 800349c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d010      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034aa:	4ba9      	ldr	r3, [pc, #676]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b0:	4aa7      	ldr	r2, [pc, #668]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034ba:	4ba5      	ldr	r3, [pc, #660]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	49a2      	ldr	r1, [pc, #648]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034d8:	4b9d      	ldr	r3, [pc, #628]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e6:	499a      	ldr	r1, [pc, #616]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034fa:	4b95      	ldr	r3, [pc, #596]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003500:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003508:	4991      	ldr	r1, [pc, #580]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352a:	4989      	ldr	r1, [pc, #548]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800353e:	4b84      	ldr	r3, [pc, #528]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4980      	ldr	r1, [pc, #512]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003560:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4978      	ldr	r1, [pc, #480]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003582:	4b73      	ldr	r3, [pc, #460]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f023 020c 	bic.w	r2, r3, #12
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	496f      	ldr	r1, [pc, #444]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	4967      	ldr	r1, [pc, #412]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c6:	4b62      	ldr	r3, [pc, #392]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d4:	495e      	ldr	r1, [pc, #376]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	4956      	ldr	r1, [pc, #344]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	494d      	ldr	r1, [pc, #308]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800362c:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	4945      	ldr	r1, [pc, #276]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800364e:	4b40      	ldr	r3, [pc, #256]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	493c      	ldr	r1, [pc, #240]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003670:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367e:	4934      	ldr	r1, [pc, #208]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d011      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003692:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a0:	492b      	ldr	r1, [pc, #172]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b0:	d101      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	491b      	ldr	r1, [pc, #108]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036f4:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003704:	4912      	ldr	r1, [pc, #72]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003728:	4909      	ldr	r1, [pc, #36]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003742:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	e002      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	4986      	ldr	r1, [pc, #536]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003768:	4b81      	ldr	r3, [pc, #516]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003778:	497d      	ldr	r1, [pc, #500]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d006      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80d6 	beq.w	8003940 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003794:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a75      	ldr	r2, [pc, #468]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800379e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a0:	f7fe fcba 	bl	8002118 <HAL_GetTick>
 80037a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037a8:	f7fe fcb6 	bl	8002118 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e195      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037ba:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d021      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11d      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	0e1b      	lsrs	r3, r3, #24
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	019a      	lsls	r2, r3, #6
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	071b      	lsls	r3, r3, #28
 800380e:	4958      	ldr	r1, [pc, #352]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003834:	2b00      	cmp	r3, #0
 8003836:	d02e      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003840:	d129      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003842:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003850:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003856:	0f1b      	lsrs	r3, r3, #28
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	019a      	lsls	r2, r3, #6
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	061b      	lsls	r3, r3, #24
 8003870:	431a      	orrs	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	071b      	lsls	r3, r3, #28
 8003876:	493e      	ldr	r1, [pc, #248]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800387e:	4b3c      	ldr	r3, [pc, #240]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003884:	f023 021f 	bic.w	r2, r3, #31
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	3b01      	subs	r3, #1
 800388e:	4938      	ldr	r1, [pc, #224]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01d      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038a2:	4b33      	ldr	r3, [pc, #204]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038b0:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b6:	0f1b      	lsrs	r3, r3, #28
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	019a      	lsls	r2, r3, #6
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	071b      	lsls	r3, r3, #28
 80038d6:	4926      	ldr	r1, [pc, #152]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	019a      	lsls	r2, r3, #6
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	491a      	ldr	r1, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391a:	f7fe fbfd 	bl	8002118 <HAL_GetTick>
 800391e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003922:	f7fe fbf9 	bl	8002118 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b64      	cmp	r3, #100	; 0x64
 800392e:	d901      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0d8      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b01      	cmp	r3, #1
 8003944:	f040 80ce 	bne.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a08      	ldr	r2, [pc, #32]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fe fbe0 	bl	8002118 <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800395a:	e00b      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800395c:	f7fe fbdc 	bl	8002118 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d904      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0bb      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800397c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003980:	d0ec      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039aa:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039b8:	4b4d      	ldr	r3, [pc, #308]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	0f1b      	lsrs	r3, r3, #28
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	019a      	lsls	r2, r3, #6
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	4944      	ldr	r1, [pc, #272]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039e6:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	493d      	ldr	r1, [pc, #244]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d022      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d11d      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	0e1b      	lsrs	r3, r3, #24
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a24:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	0f1b      	lsrs	r3, r3, #28
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	019a      	lsls	r2, r3, #6
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	4929      	ldr	r1, [pc, #164]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	0e1b      	lsrs	r3, r3, #24
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	019a      	lsls	r2, r3, #6
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4911      	ldr	r1, [pc, #68]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fe fb2c 	bl	8002118 <HAL_GetTick>
 8003ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ac4:	f7fe fb28 	bl	8002118 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e007      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d1ef      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800

08003af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e049      	b.n	8003b9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd ffb4 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 fdde 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d001      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e054      	b.n	8003c66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d022      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x80>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d01d      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x80>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d018      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x80>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x80>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00e      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x80>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_TIM_Base_Start_IT+0xe0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x80>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0x80>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_TIM_Base_Start_IT+0xe8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d115      	bne.n	8003c50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_TIM_Base_Start_IT+0xec>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d015      	beq.n	8003c62 <HAL_TIM_Base_Start_IT+0xbe>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d011      	beq.n	8003c62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4e:	e008      	b.n	8003c62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e000      	b.n	8003c64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40010400 	.word	0x40010400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800
 8003c90:	00010007 	.word	0x00010007

08003c94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a1a      	ldr	r2, [r3, #32]
 8003cb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10f      	bne.n	8003cdc <HAL_TIM_Base_Stop_IT+0x48>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a1a      	ldr	r2, [r3, #32]
 8003cc2:	f240 4344 	movw	r3, #1092	; 0x444
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_Base_Stop_IT+0x48>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e049      	b.n	8003d98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f841 	bl	8003da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f000 fcdf 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_TIM_PWM_Start+0x24>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e03c      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d109      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x3e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e02f      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d109      	bne.n	8003e0c <HAL_TIM_PWM_Start+0x58>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e022      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d109      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x72>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e015      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d109      	bne.n	8003e40 <HAL_TIM_PWM_Start+0x8c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e008      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e092      	b.n	8003f80 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xb6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	e023      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0xc6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e78:	e01b      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xd6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e88:	e013      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start+0xe6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e98:	e00b      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start+0xf6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea8:	e003      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ffb2 	bl	8004e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_TIM_PWM_Start+0x1d4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_TIM_PWM_Start+0x120>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <HAL_TIM_PWM_Start+0x1d8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIM_PWM_Start+0x124>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_TIM_PWM_Start+0x126>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a25      	ldr	r2, [pc, #148]	; (8003f88 <HAL_TIM_PWM_Start+0x1d4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x18a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d01d      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x18a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a22      	ldr	r2, [pc, #136]	; (8003f90 <HAL_TIM_PWM_Start+0x1dc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d018      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x18a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a20      	ldr	r2, [pc, #128]	; (8003f94 <HAL_TIM_PWM_Start+0x1e0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x18a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <HAL_TIM_PWM_Start+0x1e4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x18a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_TIM_PWM_Start+0x1d8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x18a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_TIM_PWM_Start+0x1e8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x18a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_TIM_PWM_Start+0x1ec>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d115      	bne.n	8003f6a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <HAL_TIM_PWM_Start+0x1f0>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b06      	cmp	r3, #6
 8003f4e:	d015      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1c8>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f56:	d011      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f68:	e008      	b.n	8003f7c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e000      	b.n	8003f7e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40010400 	.word	0x40010400
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40001800 	.word	0x40001800
 8003fa4:	00010007 	.word	0x00010007

08003fa8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff32 	bl	8004e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a36      	ldr	r2, [pc, #216]	; (80040a0 <HAL_TIM_PWM_Stop+0xf8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_PWM_Stop+0x2c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <HAL_TIM_PWM_Stop+0xfc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_PWM_Stop+0x30>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_TIM_PWM_Stop+0x32>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d017      	beq.n	800400e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <HAL_TIM_PWM_Stop+0x66>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	f240 4344 	movw	r3, #1092	; 0x444
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_PWM_Stop+0x66>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	f241 1311 	movw	r3, #4369	; 0x1111
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <HAL_TIM_PWM_Stop+0x96>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1a      	ldr	r2, [r3, #32]
 8004024:	f240 4344 	movw	r3, #1092	; 0x444
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d107      	bne.n	800403e <HAL_TIM_PWM_Stop+0x96>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Stop+0xa6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	e023      	b.n	8004096 <HAL_TIM_PWM_Stop+0xee>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Stop+0xb6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405c:	e01b      	b.n	8004096 <HAL_TIM_PWM_Stop+0xee>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Stop+0xc6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	e013      	b.n	8004096 <HAL_TIM_PWM_Stop+0xee>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Stop+0xd6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800407c:	e00b      	b.n	8004096 <HAL_TIM_PWM_Stop+0xee>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b10      	cmp	r3, #16
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Stop+0xe6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408c:	e003      	b.n	8004096 <HAL_TIM_PWM_Stop+0xee>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0202 	mvn.w	r2, #2
 80040d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fae4 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fad6 	bl	80046a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fae7 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0204 	mvn.w	r2, #4
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 faba 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 faac 	bl	80046a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fabd 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b08      	cmp	r3, #8
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0208 	mvn.w	r2, #8
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2204      	movs	r2, #4
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa90 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fa82 	bl	80046a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fa93 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0210 	mvn.w	r2, #16
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2208      	movs	r2, #8
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa66 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa58 	bl	80046a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fa69 	bl	80046cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0201 	mvn.w	r2, #1
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fd fd26 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b80      	cmp	r3, #128	; 0x80
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fea4 	bl	8004fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004266:	d10e      	bne.n	8004286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d107      	bne.n	8004286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800427e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fe97 	bl	8004fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d10e      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b40      	cmp	r3, #64	; 0x40
 80042a0:	d107      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fa17 	bl	80046e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d10e      	bne.n	80042de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d107      	bne.n	80042de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f06f 0220 	mvn.w	r2, #32
 80042d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fe57 	bl	8004f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004302:	2302      	movs	r3, #2
 8004304:	e0ff      	b.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b14      	cmp	r3, #20
 8004312:	f200 80f0 	bhi.w	80044f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004316:	a201      	add	r2, pc, #4	; (adr r2, 800431c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	08004371 	.word	0x08004371
 8004320:	080044f7 	.word	0x080044f7
 8004324:	080044f7 	.word	0x080044f7
 8004328:	080044f7 	.word	0x080044f7
 800432c:	080043b1 	.word	0x080043b1
 8004330:	080044f7 	.word	0x080044f7
 8004334:	080044f7 	.word	0x080044f7
 8004338:	080044f7 	.word	0x080044f7
 800433c:	080043f3 	.word	0x080043f3
 8004340:	080044f7 	.word	0x080044f7
 8004344:	080044f7 	.word	0x080044f7
 8004348:	080044f7 	.word	0x080044f7
 800434c:	08004433 	.word	0x08004433
 8004350:	080044f7 	.word	0x080044f7
 8004354:	080044f7 	.word	0x080044f7
 8004358:	080044f7 	.word	0x080044f7
 800435c:	08004475 	.word	0x08004475
 8004360:	080044f7 	.word	0x080044f7
 8004364:	080044f7 	.word	0x080044f7
 8004368:	080044f7 	.word	0x080044f7
 800436c:	080044b5 	.word	0x080044b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fa5c 	bl	8004834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6999      	ldr	r1, [r3, #24]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	619a      	str	r2, [r3, #24]
      break;
 80043ae:	e0a5      	b.n	80044fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 faae 	bl	8004918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6999      	ldr	r1, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	021a      	lsls	r2, r3, #8
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	619a      	str	r2, [r3, #24]
      break;
 80043f0:	e084      	b.n	80044fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fb05 	bl	8004a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0208 	orr.w	r2, r2, #8
 800440c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0204 	bic.w	r2, r2, #4
 800441c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69d9      	ldr	r1, [r3, #28]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	61da      	str	r2, [r3, #28]
      break;
 8004430:	e064      	b.n	80044fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fb5b 	bl	8004af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69d9      	ldr	r1, [r3, #28]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	61da      	str	r2, [r3, #28]
      break;
 8004472:	e043      	b.n	80044fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fb92 	bl	8004ba4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0208 	orr.w	r2, r2, #8
 800448e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0204 	bic.w	r2, r2, #4
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044b2:	e023      	b.n	80044fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fbc4 	bl	8004c48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044f4:	e002      	b.n	80044fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
      break;
 80044fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop

08004510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_TIM_ConfigClockSource+0x1c>
 8004528:	2302      	movs	r3, #2
 800452a:	e0b4      	b.n	8004696 <HAL_TIM_ConfigClockSource+0x186>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4b56      	ldr	r3, [pc, #344]	; (80046a0 <HAL_TIM_ConfigClockSource+0x190>)
 8004548:	4013      	ands	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004564:	d03e      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456a:	f200 8087 	bhi.w	800467c <HAL_TIM_ConfigClockSource+0x16c>
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004572:	f000 8086 	beq.w	8004682 <HAL_TIM_ConfigClockSource+0x172>
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457a:	d87f      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b70      	cmp	r3, #112	; 0x70
 800457e:	d01a      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004580:	2b70      	cmp	r3, #112	; 0x70
 8004582:	d87b      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b60      	cmp	r3, #96	; 0x60
 8004586:	d050      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x11a>
 8004588:	2b60      	cmp	r3, #96	; 0x60
 800458a:	d877      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b50      	cmp	r3, #80	; 0x50
 800458e:	d03c      	beq.n	800460a <HAL_TIM_ConfigClockSource+0xfa>
 8004590:	2b50      	cmp	r3, #80	; 0x50
 8004592:	d873      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d058      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x13a>
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d86f      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b30      	cmp	r3, #48	; 0x30
 800459e:	d064      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	2b30      	cmp	r3, #48	; 0x30
 80045a2:	d86b      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d060      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x15a>
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d867      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05c      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d05a      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	e062      	b.n	800467c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6899      	ldr	r1, [r3, #8]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f000 fc0d 	bl	8004de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	609a      	str	r2, [r3, #8]
      break;
 80045e2:	e04f      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6899      	ldr	r1, [r3, #8]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f000 fbf6 	bl	8004de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004606:	609a      	str	r2, [r3, #8]
      break;
 8004608:	e03c      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	461a      	mov	r2, r3
 8004618:	f000 fb6a 	bl	8004cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2150      	movs	r1, #80	; 0x50
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fbc3 	bl	8004dae <TIM_ITRx_SetConfig>
      break;
 8004628:	e02c      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	461a      	mov	r2, r3
 8004638:	f000 fb89 	bl	8004d4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2160      	movs	r1, #96	; 0x60
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fbb3 	bl	8004dae <TIM_ITRx_SetConfig>
      break;
 8004648:	e01c      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	461a      	mov	r2, r3
 8004658:	f000 fb4a 	bl	8004cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2140      	movs	r1, #64	; 0x40
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fba3 	bl	8004dae <TIM_ITRx_SetConfig>
      break;
 8004668:	e00c      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f000 fb9a 	bl	8004dae <TIM_ITRx_SetConfig>
      break;
 800467a:	e003      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      break;
 8004680:	e000      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004694:	7bfb      	ldrb	r3, [r7, #15]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	fffeff88 	.word	0xfffeff88

080046a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a40      	ldr	r2, [pc, #256]	; (8004808 <TIM_Base_SetConfig+0x114>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d00f      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3d      	ldr	r2, [pc, #244]	; (800480c <TIM_Base_SetConfig+0x118>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3c      	ldr	r2, [pc, #240]	; (8004810 <TIM_Base_SetConfig+0x11c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a3b      	ldr	r2, [pc, #236]	; (8004814 <TIM_Base_SetConfig+0x120>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3a      	ldr	r2, [pc, #232]	; (8004818 <TIM_Base_SetConfig+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2f      	ldr	r2, [pc, #188]	; (8004808 <TIM_Base_SetConfig+0x114>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d027      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2c      	ldr	r2, [pc, #176]	; (800480c <TIM_Base_SetConfig+0x118>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d023      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <TIM_Base_SetConfig+0x11c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01f      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <TIM_Base_SetConfig+0x120>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a29      	ldr	r2, [pc, #164]	; (8004818 <TIM_Base_SetConfig+0x124>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d017      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a28      	ldr	r2, [pc, #160]	; (800481c <TIM_Base_SetConfig+0x128>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <TIM_Base_SetConfig+0x12c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a26      	ldr	r2, [pc, #152]	; (8004824 <TIM_Base_SetConfig+0x130>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a25      	ldr	r2, [pc, #148]	; (8004828 <TIM_Base_SetConfig+0x134>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a24      	ldr	r2, [pc, #144]	; (800482c <TIM_Base_SetConfig+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a23      	ldr	r2, [pc, #140]	; (8004830 <TIM_Base_SetConfig+0x13c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d108      	bne.n	80047b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <TIM_Base_SetConfig+0x114>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_Base_SetConfig+0xf8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a0c      	ldr	r2, [pc, #48]	; (8004818 <TIM_Base_SetConfig+0x124>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d103      	bne.n	80047f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	615a      	str	r2, [r3, #20]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40010400 	.word	0x40010400
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800
 8004828:	40001800 	.word	0x40001800
 800482c:	40001c00 	.word	0x40001c00
 8004830:	40002000 	.word	0x40002000

08004834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4b2b      	ldr	r3, [pc, #172]	; (800490c <TIM_OC1_SetConfig+0xd8>)
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0302 	bic.w	r3, r3, #2
 800487c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <TIM_OC1_SetConfig+0xdc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC1_SetConfig+0x64>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a20      	ldr	r2, [pc, #128]	; (8004914 <TIM_OC1_SetConfig+0xe0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10c      	bne.n	80048b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0308 	bic.w	r3, r3, #8
 800489e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f023 0304 	bic.w	r3, r3, #4
 80048b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <TIM_OC1_SetConfig+0xdc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_OC1_SetConfig+0x8e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a15      	ldr	r2, [pc, #84]	; (8004914 <TIM_OC1_SetConfig+0xe0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d111      	bne.n	80048e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	fffeff8f 	.word	0xfffeff8f
 8004910:	40010000 	.word	0x40010000
 8004914:	40010400 	.word	0x40010400

08004918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0210 	bic.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4b2e      	ldr	r3, [pc, #184]	; (80049fc <TIM_OC2_SetConfig+0xe4>)
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0320 	bic.w	r3, r3, #32
 8004962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <TIM_OC2_SetConfig+0xe8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_OC2_SetConfig+0x68>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <TIM_OC2_SetConfig+0xec>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d10d      	bne.n	800499c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <TIM_OC2_SetConfig+0xe8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_OC2_SetConfig+0x94>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <TIM_OC2_SetConfig+0xec>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d113      	bne.n	80049d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	feff8fff 	.word	0xfeff8fff
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40010400 	.word	0x40010400

08004a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <TIM_OC3_SetConfig+0xe0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0303 	bic.w	r3, r3, #3
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <TIM_OC3_SetConfig+0xe4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_OC3_SetConfig+0x66>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <TIM_OC3_SetConfig+0xe8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d10d      	bne.n	8004a8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	; (8004aec <TIM_OC3_SetConfig+0xe4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC3_SetConfig+0x92>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_OC3_SetConfig+0xe8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d113      	bne.n	8004ac2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	fffeff8f 	.word	0xfffeff8f
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <TIM_OC4_SetConfig+0xa4>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <TIM_OC4_SetConfig+0xa8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC4_SetConfig+0x68>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <TIM_OC4_SetConfig+0xac>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	feff8fff 	.word	0xfeff8fff
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40010400 	.word	0x40010400

08004ba4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <TIM_OC5_SetConfig+0x98>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004be4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <TIM_OC5_SetConfig+0x9c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_OC5_SetConfig+0x5e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <TIM_OC5_SetConfig+0xa0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d109      	bne.n	8004c16 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	fffeff8f 	.word	0xfffeff8f
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40010400 	.word	0x40010400

08004c48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <TIM_OC6_SetConfig+0x9c>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	051b      	lsls	r3, r3, #20
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <TIM_OC6_SetConfig+0xa0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_OC6_SetConfig+0x60>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <TIM_OC6_SetConfig+0xa4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	feff8fff 	.word	0xfeff8fff
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40010400 	.word	0x40010400

08004cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0201 	bic.w	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f023 030a 	bic.w	r3, r3, #10
 8004d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b087      	sub	sp, #28
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f023 0210 	bic.w	r2, r3, #16
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	031b      	lsls	r3, r3, #12
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f043 0307 	orr.w	r3, r3, #7
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	bf00      	nop
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	021a      	lsls	r2, r3, #8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2201      	movs	r2, #1
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	401a      	ands	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1a      	ldr	r2, [r3, #32]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e06d      	b.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a30      	ldr	r2, [pc, #192]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2f      	ldr	r2, [pc, #188]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ec2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efa:	d01d      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1d      	ldr	r2, [pc, #116]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10c      	bne.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40001800 	.word	0x40001800

08004f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e040      	b.n	800505c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc fea4 	bl	8001d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fbe8 	bl	80057dc <UART_SetConfig>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e022      	b.n	800505c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fe3e 	bl	8005ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fec5 	bl	8005de4 <UART_CheckIdleState>
 800505a:	4603      	mov	r3, r0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005064:	b480      	push	{r7}
 8005066:	b08b      	sub	sp, #44	; 0x2c
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005076:	2b20      	cmp	r3, #32
 8005078:	d156      	bne.n	8005128 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_UART_Transmit_IT+0x22>
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e04f      	b.n	800512a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_UART_Transmit_IT+0x34>
 8005094:	2302      	movs	r3, #2
 8005096:	e048      	b.n	800512a <HAL_UART_Transmit_IT+0xc6>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2221      	movs	r2, #33	; 0x21
 80050c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d107      	bne.n	80050e4 <HAL_UART_Transmit_IT+0x80>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_UART_Transmit_IT+0xd4>)
 80050e0:	669a      	str	r2, [r3, #104]	; 0x68
 80050e2:	e002      	b.n	80050ea <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4a15      	ldr	r2, [pc, #84]	; (800513c <HAL_UART_Transmit_IT+0xd8>)
 80050e8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	69f9      	ldr	r1, [r7, #28]
 8005116:	6a3a      	ldr	r2, [r7, #32]
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	61bb      	str	r3, [r7, #24]
   return(result);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e6      	bne.n	80050f2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	372c      	adds	r7, #44	; 0x2c
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	0800633d 	.word	0x0800633d
 800513c:	08006287 	.word	0x08006287

08005140 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005152:	2b20      	cmp	r3, #32
 8005154:	d13d      	bne.n	80051d2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_UART_Receive_IT+0x22>
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e036      	b.n	80051d4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_UART_Receive_IT+0x34>
 8005170:	2302      	movs	r3, #2
 8005172:	e02f      	b.n	80051d4 <HAL_UART_Receive_IT+0x94>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d018      	beq.n	80051c2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	613b      	str	r3, [r7, #16]
   return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	623b      	str	r3, [r7, #32]
 80051b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	69f9      	ldr	r1, [r7, #28]
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e6      	bne.n	8005190 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	461a      	mov	r2, r3
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 ff19 	bl	8006000 <UART_Start_Receive_IT>
 80051ce:	4603      	mov	r3, r0
 80051d0:	e000      	b.n	80051d4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b0ba      	sub	sp, #232	; 0xe8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005202:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005206:	f640 030f 	movw	r3, #2063	; 0x80f
 800520a:	4013      	ands	r3, r2
 800520c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d115      	bne.n	8005244 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00f      	beq.n	8005244 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 82a4 	beq.w	8005782 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
      }
      return;
 8005242:	e29e      	b.n	8005782 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8117 	beq.w	800547c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800524e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800525a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800525e:	4b85      	ldr	r3, [pc, #532]	; (8005474 <HAL_UART_IRQHandler+0x298>)
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 810a 	beq.w	800547c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d011      	beq.n	8005298 <HAL_UART_IRQHandler+0xbc>
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2201      	movs	r2, #1
 8005286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d011      	beq.n	80052c8 <HAL_UART_IRQHandler+0xec>
 80052a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2202      	movs	r2, #2
 80052b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d011      	beq.n	80052f8 <HAL_UART_IRQHandler+0x11c>
 80052d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2204      	movs	r2, #4
 80052e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ee:	f043 0202 	orr.w	r2, r3, #2
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d105      	bne.n	800531c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005314:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2208      	movs	r2, #8
 8005322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800532a:	f043 0208 	orr.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533c:	2b00      	cmp	r3, #0
 800533e:	d012      	beq.n	8005366 <HAL_UART_IRQHandler+0x18a>
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00c      	beq.n	8005366 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 820a 	beq.w	8005786 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d04f      	beq.n	800545e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fee8 	bl	8006194 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d141      	bne.n	8005456 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800540a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1d9      	bne.n	80053d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	2b00      	cmp	r3, #0
 8005424:	d013      	beq.n	800544e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <HAL_UART_IRQHandler+0x29c>)
 800542c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	4618      	mov	r0, r3
 8005434:	f7fd f82f 	bl	8002496 <HAL_DMA_Abort_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e00f      	b.n	800546e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f9a4 	bl	800579c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e00b      	b.n	800546e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f9a0 	bl	800579c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e007      	b.n	800546e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f99c 	bl	800579c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800546c:	e18b      	b.n	8005786 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546e:	bf00      	nop
    return;
 8005470:	e189      	b.n	8005786 <HAL_UART_IRQHandler+0x5aa>
 8005472:	bf00      	nop
 8005474:	04000120 	.word	0x04000120
 8005478:	0800625b 	.word	0x0800625b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005480:	2b01      	cmp	r3, #1
 8005482:	f040 8144 	bne.w	800570e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 813d 	beq.w	800570e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8136 	beq.w	800570e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2210      	movs	r2, #16
 80054a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	f040 80b2 	bne.w	800561e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 815d 	beq.w	800578a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054da:	429a      	cmp	r2, r3
 80054dc:	f080 8155 	bcs.w	800578a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f4:	f000 8085 	beq.w	8005602 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800550c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005526:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800552e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800553a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1da      	bne.n	80054f8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005566:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800556a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800556e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e1      	bne.n	8005542 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800558e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3308      	adds	r3, #8
 800559e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e3      	bne.n	800557e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80055e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e4      	bne.n	80055c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fc feda 	bl	80023b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800560e:	b29b      	uxth	r3, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8ca 	bl	80057b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561c:	e0b5      	b.n	800578a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800562a:	b29b      	uxth	r3, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80a7 	beq.w	800578e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80a2 	beq.w	800578e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800565e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800566c:	647b      	str	r3, [r7, #68]	; 0x44
 800566e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800567a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e4      	bne.n	800564a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3308      	adds	r3, #8
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	623b      	str	r3, [r7, #32]
   return(result);
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056a4:	633a      	str	r2, [r7, #48]	; 0x30
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e3      	bne.n	8005680 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	617b      	str	r3, [r7, #20]
   return(result);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e4      	bne.n	80056ca <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f852 	bl	80057b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800570c:	e03f      	b.n	800578e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <HAL_UART_IRQHandler+0x55c>
 800571a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800572e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f849 	bl	80057c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005736:	e02d      	b.n	8005794 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00e      	beq.n	8005762 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01c      	beq.n	8005792 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
    }
    return;
 8005760:	e017      	b.n	8005792 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d012      	beq.n	8005794 <HAL_UART_IRQHandler+0x5b8>
 800576e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fe3e 	bl	80063fc <UART_EndTransmit_IT>
    return;
 8005780:	e008      	b.n	8005794 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005782:	bf00      	nop
 8005784:	e006      	b.n	8005794 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005786:	bf00      	nop
 8005788:	e004      	b.n	8005794 <HAL_UART_IRQHandler+0x5b8>
      return;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <HAL_UART_IRQHandler+0x5b8>
      return;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005792:	bf00      	nop
  }

}
 8005794:	37e8      	adds	r7, #232	; 0xe8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop

0800579c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4ba7      	ldr	r3, [pc, #668]	; (8005aa4 <UART_SetConfig+0x2c8>)
 8005808:	4013      	ands	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	6979      	ldr	r1, [r7, #20]
 8005810:	430b      	orrs	r3, r1
 8005812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a95      	ldr	r2, [pc, #596]	; (8005aa8 <UART_SetConfig+0x2cc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d120      	bne.n	800589a <UART_SetConfig+0xbe>
 8005858:	4b94      	ldr	r3, [pc, #592]	; (8005aac <UART_SetConfig+0x2d0>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b03      	cmp	r3, #3
 8005864:	d816      	bhi.n	8005894 <UART_SetConfig+0xb8>
 8005866:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0x90>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	0800587d 	.word	0x0800587d
 8005870:	08005889 	.word	0x08005889
 8005874:	08005883 	.word	0x08005883
 8005878:	0800588f 	.word	0x0800588f
 800587c:	2301      	movs	r3, #1
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e14f      	b.n	8005b22 <UART_SetConfig+0x346>
 8005882:	2302      	movs	r3, #2
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e14c      	b.n	8005b22 <UART_SetConfig+0x346>
 8005888:	2304      	movs	r3, #4
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e149      	b.n	8005b22 <UART_SetConfig+0x346>
 800588e:	2308      	movs	r3, #8
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e146      	b.n	8005b22 <UART_SetConfig+0x346>
 8005894:	2310      	movs	r3, #16
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e143      	b.n	8005b22 <UART_SetConfig+0x346>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a84      	ldr	r2, [pc, #528]	; (8005ab0 <UART_SetConfig+0x2d4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d132      	bne.n	800590a <UART_SetConfig+0x12e>
 80058a4:	4b81      	ldr	r3, [pc, #516]	; (8005aac <UART_SetConfig+0x2d0>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d828      	bhi.n	8005904 <UART_SetConfig+0x128>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <UART_SetConfig+0xdc>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	08005905 	.word	0x08005905
 80058c0:	08005905 	.word	0x08005905
 80058c4:	08005905 	.word	0x08005905
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	08005905 	.word	0x08005905
 80058d0:	08005905 	.word	0x08005905
 80058d4:	08005905 	.word	0x08005905
 80058d8:	080058f3 	.word	0x080058f3
 80058dc:	08005905 	.word	0x08005905
 80058e0:	08005905 	.word	0x08005905
 80058e4:	08005905 	.word	0x08005905
 80058e8:	080058ff 	.word	0x080058ff
 80058ec:	2300      	movs	r3, #0
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e117      	b.n	8005b22 <UART_SetConfig+0x346>
 80058f2:	2302      	movs	r3, #2
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e114      	b.n	8005b22 <UART_SetConfig+0x346>
 80058f8:	2304      	movs	r3, #4
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e111      	b.n	8005b22 <UART_SetConfig+0x346>
 80058fe:	2308      	movs	r3, #8
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e10e      	b.n	8005b22 <UART_SetConfig+0x346>
 8005904:	2310      	movs	r3, #16
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e10b      	b.n	8005b22 <UART_SetConfig+0x346>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a69      	ldr	r2, [pc, #420]	; (8005ab4 <UART_SetConfig+0x2d8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d120      	bne.n	8005956 <UART_SetConfig+0x17a>
 8005914:	4b65      	ldr	r3, [pc, #404]	; (8005aac <UART_SetConfig+0x2d0>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800591e:	2b30      	cmp	r3, #48	; 0x30
 8005920:	d013      	beq.n	800594a <UART_SetConfig+0x16e>
 8005922:	2b30      	cmp	r3, #48	; 0x30
 8005924:	d814      	bhi.n	8005950 <UART_SetConfig+0x174>
 8005926:	2b20      	cmp	r3, #32
 8005928:	d009      	beq.n	800593e <UART_SetConfig+0x162>
 800592a:	2b20      	cmp	r3, #32
 800592c:	d810      	bhi.n	8005950 <UART_SetConfig+0x174>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <UART_SetConfig+0x15c>
 8005932:	2b10      	cmp	r3, #16
 8005934:	d006      	beq.n	8005944 <UART_SetConfig+0x168>
 8005936:	e00b      	b.n	8005950 <UART_SetConfig+0x174>
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e0f1      	b.n	8005b22 <UART_SetConfig+0x346>
 800593e:	2302      	movs	r3, #2
 8005940:	77fb      	strb	r3, [r7, #31]
 8005942:	e0ee      	b.n	8005b22 <UART_SetConfig+0x346>
 8005944:	2304      	movs	r3, #4
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e0eb      	b.n	8005b22 <UART_SetConfig+0x346>
 800594a:	2308      	movs	r3, #8
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e0e8      	b.n	8005b22 <UART_SetConfig+0x346>
 8005950:	2310      	movs	r3, #16
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e0e5      	b.n	8005b22 <UART_SetConfig+0x346>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a57      	ldr	r2, [pc, #348]	; (8005ab8 <UART_SetConfig+0x2dc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d120      	bne.n	80059a2 <UART_SetConfig+0x1c6>
 8005960:	4b52      	ldr	r3, [pc, #328]	; (8005aac <UART_SetConfig+0x2d0>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800596a:	2bc0      	cmp	r3, #192	; 0xc0
 800596c:	d013      	beq.n	8005996 <UART_SetConfig+0x1ba>
 800596e:	2bc0      	cmp	r3, #192	; 0xc0
 8005970:	d814      	bhi.n	800599c <UART_SetConfig+0x1c0>
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d009      	beq.n	800598a <UART_SetConfig+0x1ae>
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d810      	bhi.n	800599c <UART_SetConfig+0x1c0>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <UART_SetConfig+0x1a8>
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d006      	beq.n	8005990 <UART_SetConfig+0x1b4>
 8005982:	e00b      	b.n	800599c <UART_SetConfig+0x1c0>
 8005984:	2300      	movs	r3, #0
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e0cb      	b.n	8005b22 <UART_SetConfig+0x346>
 800598a:	2302      	movs	r3, #2
 800598c:	77fb      	strb	r3, [r7, #31]
 800598e:	e0c8      	b.n	8005b22 <UART_SetConfig+0x346>
 8005990:	2304      	movs	r3, #4
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e0c5      	b.n	8005b22 <UART_SetConfig+0x346>
 8005996:	2308      	movs	r3, #8
 8005998:	77fb      	strb	r3, [r7, #31]
 800599a:	e0c2      	b.n	8005b22 <UART_SetConfig+0x346>
 800599c:	2310      	movs	r3, #16
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e0bf      	b.n	8005b22 <UART_SetConfig+0x346>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a45      	ldr	r2, [pc, #276]	; (8005abc <UART_SetConfig+0x2e0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d125      	bne.n	80059f8 <UART_SetConfig+0x21c>
 80059ac:	4b3f      	ldr	r3, [pc, #252]	; (8005aac <UART_SetConfig+0x2d0>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ba:	d017      	beq.n	80059ec <UART_SetConfig+0x210>
 80059bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c0:	d817      	bhi.n	80059f2 <UART_SetConfig+0x216>
 80059c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c6:	d00b      	beq.n	80059e0 <UART_SetConfig+0x204>
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d811      	bhi.n	80059f2 <UART_SetConfig+0x216>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <UART_SetConfig+0x1fe>
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d006      	beq.n	80059e6 <UART_SetConfig+0x20a>
 80059d8:	e00b      	b.n	80059f2 <UART_SetConfig+0x216>
 80059da:	2300      	movs	r3, #0
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e0a0      	b.n	8005b22 <UART_SetConfig+0x346>
 80059e0:	2302      	movs	r3, #2
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	e09d      	b.n	8005b22 <UART_SetConfig+0x346>
 80059e6:	2304      	movs	r3, #4
 80059e8:	77fb      	strb	r3, [r7, #31]
 80059ea:	e09a      	b.n	8005b22 <UART_SetConfig+0x346>
 80059ec:	2308      	movs	r3, #8
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e097      	b.n	8005b22 <UART_SetConfig+0x346>
 80059f2:	2310      	movs	r3, #16
 80059f4:	77fb      	strb	r3, [r7, #31]
 80059f6:	e094      	b.n	8005b22 <UART_SetConfig+0x346>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a30      	ldr	r2, [pc, #192]	; (8005ac0 <UART_SetConfig+0x2e4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d125      	bne.n	8005a4e <UART_SetConfig+0x272>
 8005a02:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <UART_SetConfig+0x2d0>)
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a10:	d017      	beq.n	8005a42 <UART_SetConfig+0x266>
 8005a12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a16:	d817      	bhi.n	8005a48 <UART_SetConfig+0x26c>
 8005a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1c:	d00b      	beq.n	8005a36 <UART_SetConfig+0x25a>
 8005a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a22:	d811      	bhi.n	8005a48 <UART_SetConfig+0x26c>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <UART_SetConfig+0x254>
 8005a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2c:	d006      	beq.n	8005a3c <UART_SetConfig+0x260>
 8005a2e:	e00b      	b.n	8005a48 <UART_SetConfig+0x26c>
 8005a30:	2301      	movs	r3, #1
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e075      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a36:	2302      	movs	r3, #2
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e072      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e06f      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a42:	2308      	movs	r3, #8
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e06c      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e069      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <UART_SetConfig+0x2e8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d137      	bne.n	8005ac8 <UART_SetConfig+0x2ec>
 8005a58:	4b14      	ldr	r3, [pc, #80]	; (8005aac <UART_SetConfig+0x2d0>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a66:	d017      	beq.n	8005a98 <UART_SetConfig+0x2bc>
 8005a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a6c:	d817      	bhi.n	8005a9e <UART_SetConfig+0x2c2>
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a72:	d00b      	beq.n	8005a8c <UART_SetConfig+0x2b0>
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a78:	d811      	bhi.n	8005a9e <UART_SetConfig+0x2c2>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <UART_SetConfig+0x2aa>
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a82:	d006      	beq.n	8005a92 <UART_SetConfig+0x2b6>
 8005a84:	e00b      	b.n	8005a9e <UART_SetConfig+0x2c2>
 8005a86:	2300      	movs	r3, #0
 8005a88:	77fb      	strb	r3, [r7, #31]
 8005a8a:	e04a      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e047      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a92:	2304      	movs	r3, #4
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e044      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e041      	b.n	8005b22 <UART_SetConfig+0x346>
 8005a9e:	2310      	movs	r3, #16
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e03e      	b.n	8005b22 <UART_SetConfig+0x346>
 8005aa4:	efff69f3 	.word	0xefff69f3
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40004400 	.word	0x40004400
 8005ab4:	40004800 	.word	0x40004800
 8005ab8:	40004c00 	.word	0x40004c00
 8005abc:	40005000 	.word	0x40005000
 8005ac0:	40011400 	.word	0x40011400
 8005ac4:	40007800 	.word	0x40007800
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a71      	ldr	r2, [pc, #452]	; (8005c94 <UART_SetConfig+0x4b8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d125      	bne.n	8005b1e <UART_SetConfig+0x342>
 8005ad2:	4b71      	ldr	r3, [pc, #452]	; (8005c98 <UART_SetConfig+0x4bc>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ae0:	d017      	beq.n	8005b12 <UART_SetConfig+0x336>
 8005ae2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ae6:	d817      	bhi.n	8005b18 <UART_SetConfig+0x33c>
 8005ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aec:	d00b      	beq.n	8005b06 <UART_SetConfig+0x32a>
 8005aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af2:	d811      	bhi.n	8005b18 <UART_SetConfig+0x33c>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x324>
 8005af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005afc:	d006      	beq.n	8005b0c <UART_SetConfig+0x330>
 8005afe:	e00b      	b.n	8005b18 <UART_SetConfig+0x33c>
 8005b00:	2300      	movs	r3, #0
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e00d      	b.n	8005b22 <UART_SetConfig+0x346>
 8005b06:	2302      	movs	r3, #2
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e00a      	b.n	8005b22 <UART_SetConfig+0x346>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e007      	b.n	8005b22 <UART_SetConfig+0x346>
 8005b12:	2308      	movs	r3, #8
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e004      	b.n	8005b22 <UART_SetConfig+0x346>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e001      	b.n	8005b22 <UART_SetConfig+0x346>
 8005b1e:	2310      	movs	r3, #16
 8005b20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2a:	d15a      	bne.n	8005be2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005b2c:	7ffb      	ldrb	r3, [r7, #31]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d827      	bhi.n	8005b82 <UART_SetConfig+0x3a6>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0x35c>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b5d 	.word	0x08005b5d
 8005b3c:	08005b65 	.word	0x08005b65
 8005b40:	08005b6d 	.word	0x08005b6d
 8005b44:	08005b83 	.word	0x08005b83
 8005b48:	08005b73 	.word	0x08005b73
 8005b4c:	08005b83 	.word	0x08005b83
 8005b50:	08005b83 	.word	0x08005b83
 8005b54:	08005b83 	.word	0x08005b83
 8005b58:	08005b7b 	.word	0x08005b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f7fd fb7a 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8005b60:	61b8      	str	r0, [r7, #24]
        break;
 8005b62:	e013      	b.n	8005b8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b64:	f7fd fb8a 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8005b68:	61b8      	str	r0, [r7, #24]
        break;
 8005b6a:	e00f      	b.n	8005b8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b4b      	ldr	r3, [pc, #300]	; (8005c9c <UART_SetConfig+0x4c0>)
 8005b6e:	61bb      	str	r3, [r7, #24]
        break;
 8005b70:	e00c      	b.n	8005b8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fd faad 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8005b76:	61b8      	str	r0, [r7, #24]
        break;
 8005b78:	e008      	b.n	8005b8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7e:	61bb      	str	r3, [r7, #24]
        break;
 8005b80:	e004      	b.n	8005b8c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	77bb      	strb	r3, [r7, #30]
        break;
 8005b8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d074      	beq.n	8005c7c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	005a      	lsls	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	441a      	add	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b0f      	cmp	r3, #15
 8005bac:	d916      	bls.n	8005bdc <UART_SetConfig+0x400>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb4:	d212      	bcs.n	8005bdc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f023 030f 	bic.w	r3, r3, #15
 8005bbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	89fb      	ldrh	r3, [r7, #14]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	89fa      	ldrh	r2, [r7, #14]
 8005bd8:	60da      	str	r2, [r3, #12]
 8005bda:	e04f      	b.n	8005c7c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77bb      	strb	r3, [r7, #30]
 8005be0:	e04c      	b.n	8005c7c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d828      	bhi.n	8005c3a <UART_SetConfig+0x45e>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x414>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	08005c3b 	.word	0x08005c3b
 8005c00:	08005c2b 	.word	0x08005c2b
 8005c04:	08005c3b 	.word	0x08005c3b
 8005c08:	08005c3b 	.word	0x08005c3b
 8005c0c:	08005c3b 	.word	0x08005c3b
 8005c10:	08005c33 	.word	0x08005c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fd fb1e 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8005c18:	61b8      	str	r0, [r7, #24]
        break;
 8005c1a:	e013      	b.n	8005c44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7fd fb2e 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8005c20:	61b8      	str	r0, [r7, #24]
        break;
 8005c22:	e00f      	b.n	8005c44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c24:	4b1d      	ldr	r3, [pc, #116]	; (8005c9c <UART_SetConfig+0x4c0>)
 8005c26:	61bb      	str	r3, [r7, #24]
        break;
 8005c28:	e00c      	b.n	8005c44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fd fa51 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8005c2e:	61b8      	str	r0, [r7, #24]
        break;
 8005c30:	e008      	b.n	8005c44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c36:	61bb      	str	r3, [r7, #24]
        break;
 8005c38:	e004      	b.n	8005c44 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	77bb      	strb	r3, [r7, #30]
        break;
 8005c42:	bf00      	nop
    }

    if (pclk != 0U)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	085a      	lsrs	r2, r3, #1
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	441a      	add	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b0f      	cmp	r3, #15
 8005c62:	d909      	bls.n	8005c78 <UART_SetConfig+0x49c>
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6a:	d205      	bcs.n	8005c78 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	e001      	b.n	8005c7c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c88:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40007c00 	.word	0x40007c00
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	00f42400 	.word	0x00f42400

08005ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01a      	beq.n	8005db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9e:	d10a      	bne.n	8005db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	605a      	str	r2, [r3, #4]
  }
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005df4:	f7fc f990 	bl	8002118 <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d10e      	bne.n	8005e26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f82d 	bl	8005e76 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e023      	b.n	8005e6e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d10e      	bne.n	8005e52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f817 	bl	8005e76 <UART_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e00d      	b.n	8005e6e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b09c      	sub	sp, #112	; 0x70
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e86:	e0a5      	b.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	f000 80a1 	beq.w	8005fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e92:	f7fc f941 	bl	8002118 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d302      	bcc.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d13e      	bne.n	8005f26 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e6      	bne.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005efa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005efc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e5      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e067      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d04f      	beq.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	d147      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3308      	adds	r3, #8
 8005f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fa0:	623a      	str	r2, [r7, #32]
 8005fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	6a3a      	ldr	r2, [r7, #32]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e010      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69da      	ldr	r2, [r3, #28]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	f43f af4a 	beq.w	8005e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3770      	adds	r7, #112	; 0x70
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006000:	b480      	push	{r7}
 8006002:	b097      	sub	sp, #92	; 0x5c
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	d10e      	bne.n	8006052 <UART_Start_Receive_IT+0x52>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <UART_Start_Receive_IT+0x48>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006042:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006046:	e02d      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	22ff      	movs	r2, #255	; 0xff
 800604c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006050:	e028      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <UART_Start_Receive_IT+0x76>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <UART_Start_Receive_IT+0x6c>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800606a:	e01b      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	227f      	movs	r2, #127	; 0x7f
 8006070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006074:	e016      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607e:	d10d      	bne.n	800609c <UART_Start_Receive_IT+0x9c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <UART_Start_Receive_IT+0x92>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	227f      	movs	r2, #127	; 0x7f
 800608c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006090:	e008      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	223f      	movs	r2, #63	; 0x3f
 8006096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800609a:	e003      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2222      	movs	r2, #34	; 0x22
 80060b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	657b      	str	r3, [r7, #84]	; 0x54
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80060d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e5      	bne.n	80060b2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ee:	d107      	bne.n	8006100 <UART_Start_Receive_IT+0x100>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a24      	ldr	r2, [pc, #144]	; (800618c <UART_Start_Receive_IT+0x18c>)
 80060fc:	665a      	str	r2, [r3, #100]	; 0x64
 80060fe:	e002      	b.n	8006106 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a23      	ldr	r2, [pc, #140]	; (8006190 <UART_Start_Receive_IT+0x190>)
 8006104:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d019      	beq.n	800614a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800612a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
 8006136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800613a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e6      	bne.n	8006116 <UART_Start_Receive_IT+0x116>
 8006148:	e018      	b.n	800617c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	613b      	str	r3, [r7, #16]
   return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f043 0320 	orr.w	r3, r3, #32
 800615e:	653b      	str	r3, [r7, #80]	; 0x50
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006168:	623b      	str	r3, [r7, #32]
 800616a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	69f9      	ldr	r1, [r7, #28]
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	61bb      	str	r3, [r7, #24]
   return(result);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e6      	bne.n	800614a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	375c      	adds	r7, #92	; 0x5c
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	080065ad 	.word	0x080065ad
 8006190:	08006451 	.word	0x08006451

08006194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b095      	sub	sp, #84	; 0x54
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	643b      	str	r3, [r7, #64]	; 0x40
 80061bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e6      	bne.n	800619c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006206:	2b01      	cmp	r3, #1
 8006208:	d118      	bne.n	800623c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	60bb      	str	r3, [r7, #8]
   return(result);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	647b      	str	r3, [r7, #68]	; 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6979      	ldr	r1, [r7, #20]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	613b      	str	r3, [r7, #16]
   return(result);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e6      	bne.n	800620a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800624e:	bf00      	nop
 8006250:	3754      	adds	r7, #84	; 0x54
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fa8f 	bl	800579c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006286:	b480      	push	{r7}
 8006288:	b08f      	sub	sp, #60	; 0x3c
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006292:	2b21      	cmp	r3, #33	; 0x21
 8006294:	d14c      	bne.n	8006330 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d132      	bne.n	8006308 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b6:	637b      	str	r3, [r7, #52]	; 0x34
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e6      	bne.n	80062a2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6979      	ldr	r1, [r7, #20]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e6      	bne.n	80062d4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006306:	e013      	b.n	8006330 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006330:	bf00      	nop
 8006332:	373c      	adds	r7, #60	; 0x3c
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b091      	sub	sp, #68	; 0x44
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006348:	2b21      	cmp	r3, #33	; 0x21
 800634a:	d151      	bne.n	80063f0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d132      	bne.n	80063be <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	623b      	str	r3, [r7, #32]
   return(result);
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636c:	63bb      	str	r3, [r7, #56]	; 0x38
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	633b      	str	r3, [r7, #48]	; 0x30
 8006378:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800637c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e6      	bne.n	8006358 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	60fb      	str	r3, [r7, #12]
   return(result);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	69b9      	ldr	r1, [r7, #24]
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	617b      	str	r3, [r7, #20]
   return(result);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e6      	bne.n	800638a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80063bc:	e018      	b.n	80063f0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80063c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80063f0:	bf00      	nop
 80063f2:	3744      	adds	r7, #68	; 0x44
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	60bb      	str	r3, [r7, #8]
   return(result);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6979      	ldr	r1, [r7, #20]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e6      	bne.n	8006404 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb fdb4 	bl	8001fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006448:	bf00      	nop
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b096      	sub	sp, #88	; 0x58
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800645e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006466:	2b22      	cmp	r3, #34	; 0x22
 8006468:	f040 8094 	bne.w	8006594 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006476:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800647a:	b2d9      	uxtb	r1, r3
 800647c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	400a      	ands	r2, r1
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d177      	bne.n	80065a4 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c8:	653b      	str	r3, [r7, #80]	; 0x50
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
 80064d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	623b      	str	r3, [r7, #32]
   return(result);
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006506:	633a      	str	r2, [r7, #48]	; 0x30
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	2b01      	cmp	r3, #1
 800652c:	d12e      	bne.n	800658c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	60fb      	str	r3, [r7, #12]
   return(result);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 0310 	bic.w	r3, r3, #16
 8006548:	64bb      	str	r3, [r7, #72]	; 0x48
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	69b9      	ldr	r1, [r7, #24]
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	617b      	str	r3, [r7, #20]
   return(result);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e6      	bne.n	8006534 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d103      	bne.n	800657c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2210      	movs	r2, #16
 800657a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff f913 	bl	80057b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800658a:	e00b      	b.n	80065a4 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fb fca5 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 8006592:	e007      	b.n	80065a4 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0208 	orr.w	r2, r2, #8
 80065a2:	619a      	str	r2, [r3, #24]
}
 80065a4:	bf00      	nop
 80065a6:	3758      	adds	r7, #88	; 0x58
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b096      	sub	sp, #88	; 0x58
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c2:	2b22      	cmp	r3, #34	; 0x22
 80065c4:	f040 8094 	bne.w	80066f0 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80065d8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80065dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065e0:	4013      	ands	r3, r2
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	1c9a      	adds	r2, r3, #2
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d177      	bne.n	8006700 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	643b      	str	r3, [r7, #64]	; 0x40
 8006630:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e6      	bne.n	8006610 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	61fb      	str	r3, [r7, #28]
   return(result);
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	64bb      	str	r3, [r7, #72]	; 0x48
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3308      	adds	r3, #8
 8006660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e5      	bne.n	8006642 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006686:	2b01      	cmp	r3, #1
 8006688:	d12e      	bne.n	80066e8 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	60bb      	str	r3, [r7, #8]
   return(result);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f023 0310 	bic.w	r3, r3, #16
 80066a4:	647b      	str	r3, [r7, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6979      	ldr	r1, [r7, #20]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	613b      	str	r3, [r7, #16]
   return(result);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d103      	bne.n	80066d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2210      	movs	r2, #16
 80066d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff f865 	bl	80057b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066e6:	e00b      	b.n	8006700 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fb fbf7 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 80066ee:	e007      	b.n	8006700 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0208 	orr.w	r2, r2, #8
 80066fe:	619a      	str	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	3758      	adds	r7, #88	; 0x58
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <__errno>:
 8006708:	4b01      	ldr	r3, [pc, #4]	; (8006710 <__errno+0x8>)
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	200000a8 	.word	0x200000a8

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	; (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	; (8006750 <__libc_init_array+0x3c>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2600      	movs	r6, #0
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	; (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	; (8006758 <__libc_init_array+0x44>)
 8006728:	f004 ffcc 	bl	800b6c4 <_init>
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2600      	movs	r6, #0
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	4798      	blx	r3
 800673e:	3601      	adds	r6, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	4798      	blx	r3
 8006748:	3601      	adds	r6, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	0800bf1c 	.word	0x0800bf1c
 8006750:	0800bf1c 	.word	0x0800bf1c
 8006754:	0800bf1c 	.word	0x0800bf1c
 8006758:	0800bf20 	.word	0x0800bf20

0800675c <memset>:
 800675c:	4402      	add	r2, r0
 800675e:	4603      	mov	r3, r0
 8006760:	4293      	cmp	r3, r2
 8006762:	d100      	bne.n	8006766 <memset+0xa>
 8006764:	4770      	bx	lr
 8006766:	f803 1b01 	strb.w	r1, [r3], #1
 800676a:	e7f9      	b.n	8006760 <memset+0x4>

0800676c <__cvt>:
 800676c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676e:	ed2d 8b02 	vpush	{d8}
 8006772:	eeb0 8b40 	vmov.f64	d8, d0
 8006776:	b085      	sub	sp, #20
 8006778:	4617      	mov	r7, r2
 800677a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800677c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800677e:	ee18 2a90 	vmov	r2, s17
 8006782:	f025 0520 	bic.w	r5, r5, #32
 8006786:	2a00      	cmp	r2, #0
 8006788:	bfb6      	itet	lt
 800678a:	222d      	movlt	r2, #45	; 0x2d
 800678c:	2200      	movge	r2, #0
 800678e:	eeb1 8b40 	vneglt.f64	d8, d0
 8006792:	2d46      	cmp	r5, #70	; 0x46
 8006794:	460c      	mov	r4, r1
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	d004      	beq.n	80067a4 <__cvt+0x38>
 800679a:	2d45      	cmp	r5, #69	; 0x45
 800679c:	d100      	bne.n	80067a0 <__cvt+0x34>
 800679e:	3401      	adds	r4, #1
 80067a0:	2102      	movs	r1, #2
 80067a2:	e000      	b.n	80067a6 <__cvt+0x3a>
 80067a4:	2103      	movs	r1, #3
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	ab02      	add	r3, sp, #8
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	4622      	mov	r2, r4
 80067b0:	4633      	mov	r3, r6
 80067b2:	eeb0 0b48 	vmov.f64	d0, d8
 80067b6:	f001 fe0f 	bl	80083d8 <_dtoa_r>
 80067ba:	2d47      	cmp	r5, #71	; 0x47
 80067bc:	d109      	bne.n	80067d2 <__cvt+0x66>
 80067be:	07fb      	lsls	r3, r7, #31
 80067c0:	d407      	bmi.n	80067d2 <__cvt+0x66>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c6:	1a1b      	subs	r3, r3, r0
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	b005      	add	sp, #20
 80067cc:	ecbd 8b02 	vpop	{d8}
 80067d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d2:	2d46      	cmp	r5, #70	; 0x46
 80067d4:	eb00 0204 	add.w	r2, r0, r4
 80067d8:	d10c      	bne.n	80067f4 <__cvt+0x88>
 80067da:	7803      	ldrb	r3, [r0, #0]
 80067dc:	2b30      	cmp	r3, #48	; 0x30
 80067de:	d107      	bne.n	80067f0 <__cvt+0x84>
 80067e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e8:	bf1c      	itt	ne
 80067ea:	f1c4 0401 	rsbne	r4, r4, #1
 80067ee:	6034      	strne	r4, [r6, #0]
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	441a      	add	r2, r3
 80067f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fc:	bf08      	it	eq
 80067fe:	9203      	streq	r2, [sp, #12]
 8006800:	2130      	movs	r1, #48	; 0x30
 8006802:	9b03      	ldr	r3, [sp, #12]
 8006804:	4293      	cmp	r3, r2
 8006806:	d2dc      	bcs.n	80067c2 <__cvt+0x56>
 8006808:	1c5c      	adds	r4, r3, #1
 800680a:	9403      	str	r4, [sp, #12]
 800680c:	7019      	strb	r1, [r3, #0]
 800680e:	e7f8      	b.n	8006802 <__cvt+0x96>

08006810 <__exponent>:
 8006810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006812:	4603      	mov	r3, r0
 8006814:	2900      	cmp	r1, #0
 8006816:	bfb8      	it	lt
 8006818:	4249      	neglt	r1, r1
 800681a:	f803 2b02 	strb.w	r2, [r3], #2
 800681e:	bfb4      	ite	lt
 8006820:	222d      	movlt	r2, #45	; 0x2d
 8006822:	222b      	movge	r2, #43	; 0x2b
 8006824:	2909      	cmp	r1, #9
 8006826:	7042      	strb	r2, [r0, #1]
 8006828:	dd2a      	ble.n	8006880 <__exponent+0x70>
 800682a:	f10d 0407 	add.w	r4, sp, #7
 800682e:	46a4      	mov	ip, r4
 8006830:	270a      	movs	r7, #10
 8006832:	46a6      	mov	lr, r4
 8006834:	460a      	mov	r2, r1
 8006836:	fb91 f6f7 	sdiv	r6, r1, r7
 800683a:	fb07 1516 	mls	r5, r7, r6, r1
 800683e:	3530      	adds	r5, #48	; 0x30
 8006840:	2a63      	cmp	r2, #99	; 0x63
 8006842:	f104 34ff 	add.w	r4, r4, #4294967295
 8006846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800684a:	4631      	mov	r1, r6
 800684c:	dcf1      	bgt.n	8006832 <__exponent+0x22>
 800684e:	3130      	adds	r1, #48	; 0x30
 8006850:	f1ae 0502 	sub.w	r5, lr, #2
 8006854:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006858:	1c44      	adds	r4, r0, #1
 800685a:	4629      	mov	r1, r5
 800685c:	4561      	cmp	r1, ip
 800685e:	d30a      	bcc.n	8006876 <__exponent+0x66>
 8006860:	f10d 0209 	add.w	r2, sp, #9
 8006864:	eba2 020e 	sub.w	r2, r2, lr
 8006868:	4565      	cmp	r5, ip
 800686a:	bf88      	it	hi
 800686c:	2200      	movhi	r2, #0
 800686e:	4413      	add	r3, r2
 8006870:	1a18      	subs	r0, r3, r0
 8006872:	b003      	add	sp, #12
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800687a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800687e:	e7ed      	b.n	800685c <__exponent+0x4c>
 8006880:	2330      	movs	r3, #48	; 0x30
 8006882:	3130      	adds	r1, #48	; 0x30
 8006884:	7083      	strb	r3, [r0, #2]
 8006886:	70c1      	strb	r1, [r0, #3]
 8006888:	1d03      	adds	r3, r0, #4
 800688a:	e7f1      	b.n	8006870 <__exponent+0x60>
 800688c:	0000      	movs	r0, r0
	...

08006890 <_printf_float>:
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	b08b      	sub	sp, #44	; 0x2c
 8006896:	460c      	mov	r4, r1
 8006898:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800689c:	4616      	mov	r6, r2
 800689e:	461f      	mov	r7, r3
 80068a0:	4605      	mov	r5, r0
 80068a2:	f002 fe8b 	bl	80095bc <_localeconv_r>
 80068a6:	f8d0 b000 	ldr.w	fp, [r0]
 80068aa:	4658      	mov	r0, fp
 80068ac:	f7f9 fcd2 	bl	8000254 <strlen>
 80068b0:	2300      	movs	r3, #0
 80068b2:	9308      	str	r3, [sp, #32]
 80068b4:	f8d8 3000 	ldr.w	r3, [r8]
 80068b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	3307      	adds	r3, #7
 80068c0:	f023 0307 	bic.w	r3, r3, #7
 80068c4:	f103 0108 	add.w	r1, r3, #8
 80068c8:	f8c8 1000 	str.w	r1, [r8]
 80068cc:	4682      	mov	sl, r0
 80068ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80068d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006b38 <_printf_float+0x2a8>
 80068da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80068de:	eeb0 6bc0 	vabs.f64	d6, d0
 80068e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80068e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ea:	dd24      	ble.n	8006936 <_printf_float+0xa6>
 80068ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f4:	d502      	bpl.n	80068fc <_printf_float+0x6c>
 80068f6:	232d      	movs	r3, #45	; 0x2d
 80068f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068fc:	4b90      	ldr	r3, [pc, #576]	; (8006b40 <_printf_float+0x2b0>)
 80068fe:	4891      	ldr	r0, [pc, #580]	; (8006b44 <_printf_float+0x2b4>)
 8006900:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006904:	bf94      	ite	ls
 8006906:	4698      	movls	r8, r3
 8006908:	4680      	movhi	r8, r0
 800690a:	2303      	movs	r3, #3
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	f022 0204 	bic.w	r2, r2, #4
 8006912:	2300      	movs	r3, #0
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	9304      	str	r3, [sp, #16]
 8006918:	9700      	str	r7, [sp, #0]
 800691a:	4633      	mov	r3, r6
 800691c:	aa09      	add	r2, sp, #36	; 0x24
 800691e:	4621      	mov	r1, r4
 8006920:	4628      	mov	r0, r5
 8006922:	f000 f9d3 	bl	8006ccc <_printf_common>
 8006926:	3001      	adds	r0, #1
 8006928:	f040 808a 	bne.w	8006a40 <_printf_float+0x1b0>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b00b      	add	sp, #44	; 0x2c
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	eeb4 0b40 	vcmp.f64	d0, d0
 800693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693e:	d709      	bvc.n	8006954 <_printf_float+0xc4>
 8006940:	ee10 3a90 	vmov	r3, s1
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfbc      	itt	lt
 8006948:	232d      	movlt	r3, #45	; 0x2d
 800694a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800694e:	487e      	ldr	r0, [pc, #504]	; (8006b48 <_printf_float+0x2b8>)
 8006950:	4b7e      	ldr	r3, [pc, #504]	; (8006b4c <_printf_float+0x2bc>)
 8006952:	e7d5      	b.n	8006900 <_printf_float+0x70>
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800695a:	9104      	str	r1, [sp, #16]
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	d13c      	bne.n	80069da <_printf_float+0x14a>
 8006960:	2306      	movs	r3, #6
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	2300      	movs	r3, #0
 8006966:	9303      	str	r3, [sp, #12]
 8006968:	ab08      	add	r3, sp, #32
 800696a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800696e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006972:	ab07      	add	r3, sp, #28
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	6022      	str	r2, [r4, #0]
 800697a:	f10d 031b 	add.w	r3, sp, #27
 800697e:	4628      	mov	r0, r5
 8006980:	f7ff fef4 	bl	800676c <__cvt>
 8006984:	9b04      	ldr	r3, [sp, #16]
 8006986:	9907      	ldr	r1, [sp, #28]
 8006988:	2b47      	cmp	r3, #71	; 0x47
 800698a:	4680      	mov	r8, r0
 800698c:	d108      	bne.n	80069a0 <_printf_float+0x110>
 800698e:	1cc8      	adds	r0, r1, #3
 8006990:	db02      	blt.n	8006998 <_printf_float+0x108>
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	4299      	cmp	r1, r3
 8006996:	dd41      	ble.n	8006a1c <_printf_float+0x18c>
 8006998:	f1a9 0902 	sub.w	r9, r9, #2
 800699c:	fa5f f989 	uxtb.w	r9, r9
 80069a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80069a4:	d820      	bhi.n	80069e8 <_printf_float+0x158>
 80069a6:	3901      	subs	r1, #1
 80069a8:	464a      	mov	r2, r9
 80069aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069ae:	9107      	str	r1, [sp, #28]
 80069b0:	f7ff ff2e 	bl	8006810 <__exponent>
 80069b4:	9a08      	ldr	r2, [sp, #32]
 80069b6:	9004      	str	r0, [sp, #16]
 80069b8:	1813      	adds	r3, r2, r0
 80069ba:	2a01      	cmp	r2, #1
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	dc02      	bgt.n	80069c6 <_printf_float+0x136>
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	07d2      	lsls	r2, r2, #31
 80069c4:	d501      	bpl.n	80069ca <_printf_float+0x13a>
 80069c6:	3301      	adds	r3, #1
 80069c8:	6123      	str	r3, [r4, #16]
 80069ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0a2      	beq.n	8006918 <_printf_float+0x88>
 80069d2:	232d      	movs	r3, #45	; 0x2d
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d8:	e79e      	b.n	8006918 <_printf_float+0x88>
 80069da:	9904      	ldr	r1, [sp, #16]
 80069dc:	2947      	cmp	r1, #71	; 0x47
 80069de:	d1c1      	bne.n	8006964 <_printf_float+0xd4>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1bf      	bne.n	8006964 <_printf_float+0xd4>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e7bc      	b.n	8006962 <_printf_float+0xd2>
 80069e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80069ec:	d118      	bne.n	8006a20 <_printf_float+0x190>
 80069ee:	2900      	cmp	r1, #0
 80069f0:	6863      	ldr	r3, [r4, #4]
 80069f2:	dd0b      	ble.n	8006a0c <_printf_float+0x17c>
 80069f4:	6121      	str	r1, [r4, #16]
 80069f6:	b913      	cbnz	r3, 80069fe <_printf_float+0x16e>
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	07d0      	lsls	r0, r2, #31
 80069fc:	d502      	bpl.n	8006a04 <_printf_float+0x174>
 80069fe:	3301      	adds	r3, #1
 8006a00:	440b      	add	r3, r1
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	2300      	movs	r3, #0
 8006a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	e7de      	b.n	80069ca <_printf_float+0x13a>
 8006a0c:	b913      	cbnz	r3, 8006a14 <_printf_float+0x184>
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	07d2      	lsls	r2, r2, #31
 8006a12:	d501      	bpl.n	8006a18 <_printf_float+0x188>
 8006a14:	3302      	adds	r3, #2
 8006a16:	e7f4      	b.n	8006a02 <_printf_float+0x172>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e7f2      	b.n	8006a02 <_printf_float+0x172>
 8006a1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a20:	9b08      	ldr	r3, [sp, #32]
 8006a22:	4299      	cmp	r1, r3
 8006a24:	db05      	blt.n	8006a32 <_printf_float+0x1a2>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	6121      	str	r1, [r4, #16]
 8006a2a:	07d8      	lsls	r0, r3, #31
 8006a2c:	d5ea      	bpl.n	8006a04 <_printf_float+0x174>
 8006a2e:	1c4b      	adds	r3, r1, #1
 8006a30:	e7e7      	b.n	8006a02 <_printf_float+0x172>
 8006a32:	2900      	cmp	r1, #0
 8006a34:	bfd4      	ite	le
 8006a36:	f1c1 0202 	rsble	r2, r1, #2
 8006a3a:	2201      	movgt	r2, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	e7e0      	b.n	8006a02 <_printf_float+0x172>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	055a      	lsls	r2, r3, #21
 8006a44:	d407      	bmi.n	8006a56 <_printf_float+0x1c6>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	4642      	mov	r2, r8
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	d12a      	bne.n	8006aaa <_printf_float+0x21a>
 8006a54:	e76a      	b.n	800692c <_printf_float+0x9c>
 8006a56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a5a:	f240 80e2 	bls.w	8006c22 <_printf_float+0x392>
 8006a5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6a:	d133      	bne.n	8006ad4 <_printf_float+0x244>
 8006a6c:	4a38      	ldr	r2, [pc, #224]	; (8006b50 <_printf_float+0x2c0>)
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f af58 	beq.w	800692c <_printf_float+0x9c>
 8006a7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	db02      	blt.n	8006a8a <_printf_float+0x1fa>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	07d8      	lsls	r0, r3, #31
 8006a88:	d50f      	bpl.n	8006aaa <_printf_float+0x21a>
 8006a8a:	4653      	mov	r3, sl
 8006a8c:	465a      	mov	r2, fp
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f af49 	beq.w	800692c <_printf_float+0x9c>
 8006a9a:	f04f 0800 	mov.w	r8, #0
 8006a9e:	f104 091a 	add.w	r9, r4, #26
 8006aa2:	9b08      	ldr	r3, [sp, #32]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	4543      	cmp	r3, r8
 8006aa8:	dc09      	bgt.n	8006abe <_printf_float+0x22e>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	079b      	lsls	r3, r3, #30
 8006aae:	f100 8108 	bmi.w	8006cc2 <_printf_float+0x432>
 8006ab2:	68e0      	ldr	r0, [r4, #12]
 8006ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab6:	4298      	cmp	r0, r3
 8006ab8:	bfb8      	it	lt
 8006aba:	4618      	movlt	r0, r3
 8006abc:	e738      	b.n	8006930 <_printf_float+0xa0>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	464a      	mov	r2, r9
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f af2f 	beq.w	800692c <_printf_float+0x9c>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	e7e6      	b.n	8006aa2 <_printf_float+0x212>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dc3c      	bgt.n	8006b54 <_printf_float+0x2c4>
 8006ada:	4a1d      	ldr	r2, [pc, #116]	; (8006b50 <_printf_float+0x2c0>)
 8006adc:	2301      	movs	r3, #1
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f af21 	beq.w	800692c <_printf_float+0x9c>
 8006aea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	d102      	bne.n	8006af8 <_printf_float+0x268>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	07d9      	lsls	r1, r3, #31
 8006af6:	d5d8      	bpl.n	8006aaa <_printf_float+0x21a>
 8006af8:	4653      	mov	r3, sl
 8006afa:	465a      	mov	r2, fp
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af12 	beq.w	800692c <_printf_float+0x9c>
 8006b08:	f04f 0900 	mov.w	r9, #0
 8006b0c:	f104 0a1a 	add.w	sl, r4, #26
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	425b      	negs	r3, r3
 8006b14:	454b      	cmp	r3, r9
 8006b16:	dc01      	bgt.n	8006b1c <_printf_float+0x28c>
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	e795      	b.n	8006a48 <_printf_float+0x1b8>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4652      	mov	r2, sl
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f af00 	beq.w	800692c <_printf_float+0x9c>
 8006b2c:	f109 0901 	add.w	r9, r9, #1
 8006b30:	e7ee      	b.n	8006b10 <_printf_float+0x280>
 8006b32:	bf00      	nop
 8006b34:	f3af 8000 	nop.w
 8006b38:	ffffffff 	.word	0xffffffff
 8006b3c:	7fefffff 	.word	0x7fefffff
 8006b40:	0800ba4c 	.word	0x0800ba4c
 8006b44:	0800ba50 	.word	0x0800ba50
 8006b48:	0800ba58 	.word	0x0800ba58
 8006b4c:	0800ba54 	.word	0x0800ba54
 8006b50:	0800be61 	.word	0x0800be61
 8006b54:	9a08      	ldr	r2, [sp, #32]
 8006b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	bfa8      	it	ge
 8006b5c:	461a      	movge	r2, r3
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	4691      	mov	r9, r2
 8006b62:	dc38      	bgt.n	8006bd6 <_printf_float+0x346>
 8006b64:	2300      	movs	r3, #0
 8006b66:	9305      	str	r3, [sp, #20]
 8006b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b6c:	f104 021a 	add.w	r2, r4, #26
 8006b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b72:	9905      	ldr	r1, [sp, #20]
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	eba3 0309 	sub.w	r3, r3, r9
 8006b7a:	428b      	cmp	r3, r1
 8006b7c:	dc33      	bgt.n	8006be6 <_printf_float+0x356>
 8006b7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	db3c      	blt.n	8006c00 <_printf_float+0x370>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	07da      	lsls	r2, r3, #31
 8006b8a:	d439      	bmi.n	8006c00 <_printf_float+0x370>
 8006b8c:	9a08      	ldr	r2, [sp, #32]
 8006b8e:	9b04      	ldr	r3, [sp, #16]
 8006b90:	9907      	ldr	r1, [sp, #28]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	eba2 0901 	sub.w	r9, r2, r1
 8006b98:	4599      	cmp	r9, r3
 8006b9a:	bfa8      	it	ge
 8006b9c:	4699      	movge	r9, r3
 8006b9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ba2:	dc35      	bgt.n	8006c10 <_printf_float+0x380>
 8006ba4:	f04f 0800 	mov.w	r8, #0
 8006ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bac:	f104 0a1a 	add.w	sl, r4, #26
 8006bb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	eba3 0309 	sub.w	r3, r3, r9
 8006bba:	4543      	cmp	r3, r8
 8006bbc:	f77f af75 	ble.w	8006aaa <_printf_float+0x21a>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f aeae 	beq.w	800692c <_printf_float+0x9c>
 8006bd0:	f108 0801 	add.w	r8, r8, #1
 8006bd4:	e7ec      	b.n	8006bb0 <_printf_float+0x320>
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4642      	mov	r2, r8
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	d1bf      	bne.n	8006b64 <_printf_float+0x2d4>
 8006be4:	e6a2      	b.n	800692c <_printf_float+0x9c>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4631      	mov	r1, r6
 8006bea:	4628      	mov	r0, r5
 8006bec:	9204      	str	r2, [sp, #16]
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f43f ae9b 	beq.w	800692c <_printf_float+0x9c>
 8006bf6:	9b05      	ldr	r3, [sp, #20]
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	9305      	str	r3, [sp, #20]
 8006bfe:	e7b7      	b.n	8006b70 <_printf_float+0x2e0>
 8006c00:	4653      	mov	r3, sl
 8006c02:	465a      	mov	r2, fp
 8006c04:	4631      	mov	r1, r6
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d1be      	bne.n	8006b8c <_printf_float+0x2fc>
 8006c0e:	e68d      	b.n	800692c <_printf_float+0x9c>
 8006c10:	9a04      	ldr	r2, [sp, #16]
 8006c12:	464b      	mov	r3, r9
 8006c14:	4442      	add	r2, r8
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b8      	blx	r7
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d1c1      	bne.n	8006ba4 <_printf_float+0x314>
 8006c20:	e684      	b.n	800692c <_printf_float+0x9c>
 8006c22:	9a08      	ldr	r2, [sp, #32]
 8006c24:	2a01      	cmp	r2, #1
 8006c26:	dc01      	bgt.n	8006c2c <_printf_float+0x39c>
 8006c28:	07db      	lsls	r3, r3, #31
 8006c2a:	d537      	bpl.n	8006c9c <_printf_float+0x40c>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4642      	mov	r2, r8
 8006c30:	4631      	mov	r1, r6
 8006c32:	4628      	mov	r0, r5
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	f43f ae78 	beq.w	800692c <_printf_float+0x9c>
 8006c3c:	4653      	mov	r3, sl
 8006c3e:	465a      	mov	r2, fp
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	47b8      	blx	r7
 8006c46:	3001      	adds	r0, #1
 8006c48:	f43f ae70 	beq.w	800692c <_printf_float+0x9c>
 8006c4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c58:	d01b      	beq.n	8006c92 <_printf_float+0x402>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	f108 0201 	add.w	r2, r8, #1
 8006c60:	3b01      	subs	r3, #1
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d10e      	bne.n	8006c8a <_printf_float+0x3fa>
 8006c6c:	e65e      	b.n	800692c <_printf_float+0x9c>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	464a      	mov	r2, r9
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	f43f ae57 	beq.w	800692c <_printf_float+0x9c>
 8006c7e:	f108 0801 	add.w	r8, r8, #1
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	4543      	cmp	r3, r8
 8006c88:	dcf1      	bgt.n	8006c6e <_printf_float+0x3de>
 8006c8a:	9b04      	ldr	r3, [sp, #16]
 8006c8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c90:	e6db      	b.n	8006a4a <_printf_float+0x1ba>
 8006c92:	f04f 0800 	mov.w	r8, #0
 8006c96:	f104 091a 	add.w	r9, r4, #26
 8006c9a:	e7f2      	b.n	8006c82 <_printf_float+0x3f2>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	4642      	mov	r2, r8
 8006ca0:	e7df      	b.n	8006c62 <_printf_float+0x3d2>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	464a      	mov	r2, r9
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f ae3d 	beq.w	800692c <_printf_float+0x9c>
 8006cb2:	f108 0801 	add.w	r8, r8, #1
 8006cb6:	68e3      	ldr	r3, [r4, #12]
 8006cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cba:	1a5b      	subs	r3, r3, r1
 8006cbc:	4543      	cmp	r3, r8
 8006cbe:	dcf0      	bgt.n	8006ca2 <_printf_float+0x412>
 8006cc0:	e6f7      	b.n	8006ab2 <_printf_float+0x222>
 8006cc2:	f04f 0800 	mov.w	r8, #0
 8006cc6:	f104 0919 	add.w	r9, r4, #25
 8006cca:	e7f4      	b.n	8006cb6 <_printf_float+0x426>

08006ccc <_printf_common>:
 8006ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	4699      	mov	r9, r3
 8006cd4:	688a      	ldr	r2, [r1, #8]
 8006cd6:	690b      	ldr	r3, [r1, #16]
 8006cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	bfb8      	it	lt
 8006ce0:	4613      	movlt	r3, r2
 8006ce2:	6033      	str	r3, [r6, #0]
 8006ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ce8:	4607      	mov	r7, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	b10a      	cbz	r2, 8006cf2 <_printf_common+0x26>
 8006cee:	3301      	adds	r3, #1
 8006cf0:	6033      	str	r3, [r6, #0]
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	0699      	lsls	r1, r3, #26
 8006cf6:	bf42      	ittt	mi
 8006cf8:	6833      	ldrmi	r3, [r6, #0]
 8006cfa:	3302      	addmi	r3, #2
 8006cfc:	6033      	strmi	r3, [r6, #0]
 8006cfe:	6825      	ldr	r5, [r4, #0]
 8006d00:	f015 0506 	ands.w	r5, r5, #6
 8006d04:	d106      	bne.n	8006d14 <_printf_common+0x48>
 8006d06:	f104 0a19 	add.w	sl, r4, #25
 8006d0a:	68e3      	ldr	r3, [r4, #12]
 8006d0c:	6832      	ldr	r2, [r6, #0]
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	42ab      	cmp	r3, r5
 8006d12:	dc26      	bgt.n	8006d62 <_printf_common+0x96>
 8006d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d18:	1e13      	subs	r3, r2, #0
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	bf18      	it	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	0692      	lsls	r2, r2, #26
 8006d22:	d42b      	bmi.n	8006d7c <_printf_common+0xb0>
 8006d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d28:	4649      	mov	r1, r9
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	47c0      	blx	r8
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d01e      	beq.n	8006d70 <_printf_common+0xa4>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	68e5      	ldr	r5, [r4, #12]
 8006d36:	6832      	ldr	r2, [r6, #0]
 8006d38:	f003 0306 	and.w	r3, r3, #6
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	bf08      	it	eq
 8006d40:	1aad      	subeq	r5, r5, r2
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	6922      	ldr	r2, [r4, #16]
 8006d46:	bf0c      	ite	eq
 8006d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d4c:	2500      	movne	r5, #0
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	bfc4      	itt	gt
 8006d52:	1a9b      	subgt	r3, r3, r2
 8006d54:	18ed      	addgt	r5, r5, r3
 8006d56:	2600      	movs	r6, #0
 8006d58:	341a      	adds	r4, #26
 8006d5a:	42b5      	cmp	r5, r6
 8006d5c:	d11a      	bne.n	8006d94 <_printf_common+0xc8>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e008      	b.n	8006d74 <_printf_common+0xa8>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4652      	mov	r2, sl
 8006d66:	4649      	mov	r1, r9
 8006d68:	4638      	mov	r0, r7
 8006d6a:	47c0      	blx	r8
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d103      	bne.n	8006d78 <_printf_common+0xac>
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d78:	3501      	adds	r5, #1
 8006d7a:	e7c6      	b.n	8006d0a <_printf_common+0x3e>
 8006d7c:	18e1      	adds	r1, r4, r3
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	2030      	movs	r0, #48	; 0x30
 8006d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d86:	4422      	add	r2, r4
 8006d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d90:	3302      	adds	r3, #2
 8006d92:	e7c7      	b.n	8006d24 <_printf_common+0x58>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4622      	mov	r2, r4
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d0e6      	beq.n	8006d70 <_printf_common+0xa4>
 8006da2:	3601      	adds	r6, #1
 8006da4:	e7d9      	b.n	8006d5a <_printf_common+0x8e>
	...

08006da8 <_printf_i>:
 8006da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dac:	460c      	mov	r4, r1
 8006dae:	4691      	mov	r9, r2
 8006db0:	7e27      	ldrb	r7, [r4, #24]
 8006db2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006db4:	2f78      	cmp	r7, #120	; 0x78
 8006db6:	4680      	mov	r8, r0
 8006db8:	469a      	mov	sl, r3
 8006dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dbe:	d807      	bhi.n	8006dd0 <_printf_i+0x28>
 8006dc0:	2f62      	cmp	r7, #98	; 0x62
 8006dc2:	d80a      	bhi.n	8006dda <_printf_i+0x32>
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	f000 80d8 	beq.w	8006f7a <_printf_i+0x1d2>
 8006dca:	2f58      	cmp	r7, #88	; 0x58
 8006dcc:	f000 80a3 	beq.w	8006f16 <_printf_i+0x16e>
 8006dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dd8:	e03a      	b.n	8006e50 <_printf_i+0xa8>
 8006dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dde:	2b15      	cmp	r3, #21
 8006de0:	d8f6      	bhi.n	8006dd0 <_printf_i+0x28>
 8006de2:	a001      	add	r0, pc, #4	; (adr r0, 8006de8 <_printf_i+0x40>)
 8006de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006de8:	08006e41 	.word	0x08006e41
 8006dec:	08006e55 	.word	0x08006e55
 8006df0:	08006dd1 	.word	0x08006dd1
 8006df4:	08006dd1 	.word	0x08006dd1
 8006df8:	08006dd1 	.word	0x08006dd1
 8006dfc:	08006dd1 	.word	0x08006dd1
 8006e00:	08006e55 	.word	0x08006e55
 8006e04:	08006dd1 	.word	0x08006dd1
 8006e08:	08006dd1 	.word	0x08006dd1
 8006e0c:	08006dd1 	.word	0x08006dd1
 8006e10:	08006dd1 	.word	0x08006dd1
 8006e14:	08006f61 	.word	0x08006f61
 8006e18:	08006e85 	.word	0x08006e85
 8006e1c:	08006f43 	.word	0x08006f43
 8006e20:	08006dd1 	.word	0x08006dd1
 8006e24:	08006dd1 	.word	0x08006dd1
 8006e28:	08006f83 	.word	0x08006f83
 8006e2c:	08006dd1 	.word	0x08006dd1
 8006e30:	08006e85 	.word	0x08006e85
 8006e34:	08006dd1 	.word	0x08006dd1
 8006e38:	08006dd1 	.word	0x08006dd1
 8006e3c:	08006f4b 	.word	0x08006f4b
 8006e40:	680b      	ldr	r3, [r1, #0]
 8006e42:	1d1a      	adds	r2, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	600a      	str	r2, [r1, #0]
 8006e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0a3      	b.n	8006f9c <_printf_i+0x1f4>
 8006e54:	6825      	ldr	r5, [r4, #0]
 8006e56:	6808      	ldr	r0, [r1, #0]
 8006e58:	062e      	lsls	r6, r5, #24
 8006e5a:	f100 0304 	add.w	r3, r0, #4
 8006e5e:	d50a      	bpl.n	8006e76 <_printf_i+0xce>
 8006e60:	6805      	ldr	r5, [r0, #0]
 8006e62:	600b      	str	r3, [r1, #0]
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	da03      	bge.n	8006e70 <_printf_i+0xc8>
 8006e68:	232d      	movs	r3, #45	; 0x2d
 8006e6a:	426d      	negs	r5, r5
 8006e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e70:	485e      	ldr	r0, [pc, #376]	; (8006fec <_printf_i+0x244>)
 8006e72:	230a      	movs	r3, #10
 8006e74:	e019      	b.n	8006eaa <_printf_i+0x102>
 8006e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e7a:	6805      	ldr	r5, [r0, #0]
 8006e7c:	600b      	str	r3, [r1, #0]
 8006e7e:	bf18      	it	ne
 8006e80:	b22d      	sxthne	r5, r5
 8006e82:	e7ef      	b.n	8006e64 <_printf_i+0xbc>
 8006e84:	680b      	ldr	r3, [r1, #0]
 8006e86:	6825      	ldr	r5, [r4, #0]
 8006e88:	1d18      	adds	r0, r3, #4
 8006e8a:	6008      	str	r0, [r1, #0]
 8006e8c:	0628      	lsls	r0, r5, #24
 8006e8e:	d501      	bpl.n	8006e94 <_printf_i+0xec>
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	e002      	b.n	8006e9a <_printf_i+0xf2>
 8006e94:	0669      	lsls	r1, r5, #25
 8006e96:	d5fb      	bpl.n	8006e90 <_printf_i+0xe8>
 8006e98:	881d      	ldrh	r5, [r3, #0]
 8006e9a:	4854      	ldr	r0, [pc, #336]	; (8006fec <_printf_i+0x244>)
 8006e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2308      	moveq	r3, #8
 8006ea2:	230a      	movne	r3, #10
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eaa:	6866      	ldr	r6, [r4, #4]
 8006eac:	60a6      	str	r6, [r4, #8]
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	bfa2      	ittt	ge
 8006eb2:	6821      	ldrge	r1, [r4, #0]
 8006eb4:	f021 0104 	bicge.w	r1, r1, #4
 8006eb8:	6021      	strge	r1, [r4, #0]
 8006eba:	b90d      	cbnz	r5, 8006ec0 <_printf_i+0x118>
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	d04d      	beq.n	8006f5c <_printf_i+0x1b4>
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8006eca:	5dc7      	ldrb	r7, [r0, r7]
 8006ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ed0:	462f      	mov	r7, r5
 8006ed2:	42bb      	cmp	r3, r7
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	d9f4      	bls.n	8006ec2 <_printf_i+0x11a>
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d10b      	bne.n	8006ef4 <_printf_i+0x14c>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	07df      	lsls	r7, r3, #31
 8006ee0:	d508      	bpl.n	8006ef4 <_printf_i+0x14c>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	6861      	ldr	r1, [r4, #4]
 8006ee6:	4299      	cmp	r1, r3
 8006ee8:	bfde      	ittt	le
 8006eea:	2330      	movle	r3, #48	; 0x30
 8006eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ef4:	1b92      	subs	r2, r2, r6
 8006ef6:	6122      	str	r2, [r4, #16]
 8006ef8:	f8cd a000 	str.w	sl, [sp]
 8006efc:	464b      	mov	r3, r9
 8006efe:	aa03      	add	r2, sp, #12
 8006f00:	4621      	mov	r1, r4
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7ff fee2 	bl	8006ccc <_printf_common>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d14c      	bne.n	8006fa6 <_printf_i+0x1fe>
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	b004      	add	sp, #16
 8006f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f16:	4835      	ldr	r0, [pc, #212]	; (8006fec <_printf_i+0x244>)
 8006f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	680e      	ldr	r6, [r1, #0]
 8006f20:	061f      	lsls	r7, r3, #24
 8006f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f26:	600e      	str	r6, [r1, #0]
 8006f28:	d514      	bpl.n	8006f54 <_printf_i+0x1ac>
 8006f2a:	07d9      	lsls	r1, r3, #31
 8006f2c:	bf44      	itt	mi
 8006f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f32:	6023      	strmi	r3, [r4, #0]
 8006f34:	b91d      	cbnz	r5, 8006f3e <_printf_i+0x196>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	f023 0320 	bic.w	r3, r3, #32
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	2310      	movs	r3, #16
 8006f40:	e7b0      	b.n	8006ea4 <_printf_i+0xfc>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	f043 0320 	orr.w	r3, r3, #32
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	2378      	movs	r3, #120	; 0x78
 8006f4c:	4828      	ldr	r0, [pc, #160]	; (8006ff0 <_printf_i+0x248>)
 8006f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f52:	e7e3      	b.n	8006f1c <_printf_i+0x174>
 8006f54:	065e      	lsls	r6, r3, #25
 8006f56:	bf48      	it	mi
 8006f58:	b2ad      	uxthmi	r5, r5
 8006f5a:	e7e6      	b.n	8006f2a <_printf_i+0x182>
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	e7bb      	b.n	8006ed8 <_printf_i+0x130>
 8006f60:	680b      	ldr	r3, [r1, #0]
 8006f62:	6826      	ldr	r6, [r4, #0]
 8006f64:	6960      	ldr	r0, [r4, #20]
 8006f66:	1d1d      	adds	r5, r3, #4
 8006f68:	600d      	str	r5, [r1, #0]
 8006f6a:	0635      	lsls	r5, r6, #24
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	d501      	bpl.n	8006f74 <_printf_i+0x1cc>
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	e002      	b.n	8006f7a <_printf_i+0x1d2>
 8006f74:	0671      	lsls	r1, r6, #25
 8006f76:	d5fb      	bpl.n	8006f70 <_printf_i+0x1c8>
 8006f78:	8018      	strh	r0, [r3, #0]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	4616      	mov	r6, r2
 8006f80:	e7ba      	b.n	8006ef8 <_printf_i+0x150>
 8006f82:	680b      	ldr	r3, [r1, #0]
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	600a      	str	r2, [r1, #0]
 8006f88:	681e      	ldr	r6, [r3, #0]
 8006f8a:	6862      	ldr	r2, [r4, #4]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7f9 f96e 	bl	8000270 <memchr>
 8006f94:	b108      	cbz	r0, 8006f9a <_printf_i+0x1f2>
 8006f96:	1b80      	subs	r0, r0, r6
 8006f98:	6060      	str	r0, [r4, #4]
 8006f9a:	6863      	ldr	r3, [r4, #4]
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa4:	e7a8      	b.n	8006ef8 <_printf_i+0x150>
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4649      	mov	r1, r9
 8006fac:	4640      	mov	r0, r8
 8006fae:	47d0      	blx	sl
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d0ab      	beq.n	8006f0c <_printf_i+0x164>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	079b      	lsls	r3, r3, #30
 8006fb8:	d413      	bmi.n	8006fe2 <_printf_i+0x23a>
 8006fba:	68e0      	ldr	r0, [r4, #12]
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	4298      	cmp	r0, r3
 8006fc0:	bfb8      	it	lt
 8006fc2:	4618      	movlt	r0, r3
 8006fc4:	e7a4      	b.n	8006f10 <_printf_i+0x168>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4649      	mov	r1, r9
 8006fcc:	4640      	mov	r0, r8
 8006fce:	47d0      	blx	sl
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d09b      	beq.n	8006f0c <_printf_i+0x164>
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	9903      	ldr	r1, [sp, #12]
 8006fda:	1a5b      	subs	r3, r3, r1
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dcf2      	bgt.n	8006fc6 <_printf_i+0x21e>
 8006fe0:	e7eb      	b.n	8006fba <_printf_i+0x212>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	f104 0619 	add.w	r6, r4, #25
 8006fe8:	e7f5      	b.n	8006fd6 <_printf_i+0x22e>
 8006fea:	bf00      	nop
 8006fec:	0800ba5c 	.word	0x0800ba5c
 8006ff0:	0800ba6d 	.word	0x0800ba6d

08006ff4 <_scanf_float>:
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	b087      	sub	sp, #28
 8006ffa:	4617      	mov	r7, r2
 8006ffc:	9303      	str	r3, [sp, #12]
 8006ffe:	688b      	ldr	r3, [r1, #8]
 8007000:	1e5a      	subs	r2, r3, #1
 8007002:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007006:	bf83      	ittte	hi
 8007008:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800700c:	195b      	addhi	r3, r3, r5
 800700e:	9302      	strhi	r3, [sp, #8]
 8007010:	2300      	movls	r3, #0
 8007012:	bf86      	itte	hi
 8007014:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007018:	608b      	strhi	r3, [r1, #8]
 800701a:	9302      	strls	r3, [sp, #8]
 800701c:	680b      	ldr	r3, [r1, #0]
 800701e:	468b      	mov	fp, r1
 8007020:	2500      	movs	r5, #0
 8007022:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007026:	f84b 3b1c 	str.w	r3, [fp], #28
 800702a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800702e:	4680      	mov	r8, r0
 8007030:	460c      	mov	r4, r1
 8007032:	465e      	mov	r6, fp
 8007034:	46aa      	mov	sl, r5
 8007036:	46a9      	mov	r9, r5
 8007038:	9501      	str	r5, [sp, #4]
 800703a:	68a2      	ldr	r2, [r4, #8]
 800703c:	b152      	cbz	r2, 8007054 <_scanf_float+0x60>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b4e      	cmp	r3, #78	; 0x4e
 8007044:	d864      	bhi.n	8007110 <_scanf_float+0x11c>
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d83c      	bhi.n	80070c4 <_scanf_float+0xd0>
 800704a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800704e:	b2c8      	uxtb	r0, r1
 8007050:	280e      	cmp	r0, #14
 8007052:	d93a      	bls.n	80070ca <_scanf_float+0xd6>
 8007054:	f1b9 0f00 	cmp.w	r9, #0
 8007058:	d003      	beq.n	8007062 <_scanf_float+0x6e>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007066:	f1ba 0f01 	cmp.w	sl, #1
 800706a:	f200 8113 	bhi.w	8007294 <_scanf_float+0x2a0>
 800706e:	455e      	cmp	r6, fp
 8007070:	f200 8105 	bhi.w	800727e <_scanf_float+0x28a>
 8007074:	2501      	movs	r5, #1
 8007076:	4628      	mov	r0, r5
 8007078:	b007      	add	sp, #28
 800707a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007082:	2a0d      	cmp	r2, #13
 8007084:	d8e6      	bhi.n	8007054 <_scanf_float+0x60>
 8007086:	a101      	add	r1, pc, #4	; (adr r1, 800708c <_scanf_float+0x98>)
 8007088:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800708c:	080071cb 	.word	0x080071cb
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	08007055 	.word	0x08007055
 800709c:	0800722b 	.word	0x0800722b
 80070a0:	08007203 	.word	0x08007203
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	080071d9 	.word	0x080071d9
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007055 	.word	0x08007055
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	08007191 	.word	0x08007191
 80070c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070c8:	e7db      	b.n	8007082 <_scanf_float+0x8e>
 80070ca:	290e      	cmp	r1, #14
 80070cc:	d8c2      	bhi.n	8007054 <_scanf_float+0x60>
 80070ce:	a001      	add	r0, pc, #4	; (adr r0, 80070d4 <_scanf_float+0xe0>)
 80070d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070d4:	08007183 	.word	0x08007183
 80070d8:	08007055 	.word	0x08007055
 80070dc:	08007183 	.word	0x08007183
 80070e0:	08007217 	.word	0x08007217
 80070e4:	08007055 	.word	0x08007055
 80070e8:	08007131 	.word	0x08007131
 80070ec:	0800716d 	.word	0x0800716d
 80070f0:	0800716d 	.word	0x0800716d
 80070f4:	0800716d 	.word	0x0800716d
 80070f8:	0800716d 	.word	0x0800716d
 80070fc:	0800716d 	.word	0x0800716d
 8007100:	0800716d 	.word	0x0800716d
 8007104:	0800716d 	.word	0x0800716d
 8007108:	0800716d 	.word	0x0800716d
 800710c:	0800716d 	.word	0x0800716d
 8007110:	2b6e      	cmp	r3, #110	; 0x6e
 8007112:	d809      	bhi.n	8007128 <_scanf_float+0x134>
 8007114:	2b60      	cmp	r3, #96	; 0x60
 8007116:	d8b2      	bhi.n	800707e <_scanf_float+0x8a>
 8007118:	2b54      	cmp	r3, #84	; 0x54
 800711a:	d077      	beq.n	800720c <_scanf_float+0x218>
 800711c:	2b59      	cmp	r3, #89	; 0x59
 800711e:	d199      	bne.n	8007054 <_scanf_float+0x60>
 8007120:	2d07      	cmp	r5, #7
 8007122:	d197      	bne.n	8007054 <_scanf_float+0x60>
 8007124:	2508      	movs	r5, #8
 8007126:	e029      	b.n	800717c <_scanf_float+0x188>
 8007128:	2b74      	cmp	r3, #116	; 0x74
 800712a:	d06f      	beq.n	800720c <_scanf_float+0x218>
 800712c:	2b79      	cmp	r3, #121	; 0x79
 800712e:	e7f6      	b.n	800711e <_scanf_float+0x12a>
 8007130:	6821      	ldr	r1, [r4, #0]
 8007132:	05c8      	lsls	r0, r1, #23
 8007134:	d51a      	bpl.n	800716c <_scanf_float+0x178>
 8007136:	9b02      	ldr	r3, [sp, #8]
 8007138:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800713c:	6021      	str	r1, [r4, #0]
 800713e:	f109 0901 	add.w	r9, r9, #1
 8007142:	b11b      	cbz	r3, 800714c <_scanf_float+0x158>
 8007144:	3b01      	subs	r3, #1
 8007146:	3201      	adds	r2, #1
 8007148:	9302      	str	r3, [sp, #8]
 800714a:	60a2      	str	r2, [r4, #8]
 800714c:	68a3      	ldr	r3, [r4, #8]
 800714e:	3b01      	subs	r3, #1
 8007150:	60a3      	str	r3, [r4, #8]
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	3301      	adds	r3, #1
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3b01      	subs	r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	607b      	str	r3, [r7, #4]
 8007160:	f340 8084 	ble.w	800726c <_scanf_float+0x278>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	e766      	b.n	800703a <_scanf_float+0x46>
 800716c:	eb1a 0f05 	cmn.w	sl, r5
 8007170:	f47f af70 	bne.w	8007054 <_scanf_float+0x60>
 8007174:	6822      	ldr	r2, [r4, #0]
 8007176:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800717a:	6022      	str	r2, [r4, #0]
 800717c:	f806 3b01 	strb.w	r3, [r6], #1
 8007180:	e7e4      	b.n	800714c <_scanf_float+0x158>
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	0610      	lsls	r0, r2, #24
 8007186:	f57f af65 	bpl.w	8007054 <_scanf_float+0x60>
 800718a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800718e:	e7f4      	b.n	800717a <_scanf_float+0x186>
 8007190:	f1ba 0f00 	cmp.w	sl, #0
 8007194:	d10e      	bne.n	80071b4 <_scanf_float+0x1c0>
 8007196:	f1b9 0f00 	cmp.w	r9, #0
 800719a:	d10e      	bne.n	80071ba <_scanf_float+0x1c6>
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071a6:	d108      	bne.n	80071ba <_scanf_float+0x1c6>
 80071a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071ac:	6022      	str	r2, [r4, #0]
 80071ae:	f04f 0a01 	mov.w	sl, #1
 80071b2:	e7e3      	b.n	800717c <_scanf_float+0x188>
 80071b4:	f1ba 0f02 	cmp.w	sl, #2
 80071b8:	d055      	beq.n	8007266 <_scanf_float+0x272>
 80071ba:	2d01      	cmp	r5, #1
 80071bc:	d002      	beq.n	80071c4 <_scanf_float+0x1d0>
 80071be:	2d04      	cmp	r5, #4
 80071c0:	f47f af48 	bne.w	8007054 <_scanf_float+0x60>
 80071c4:	3501      	adds	r5, #1
 80071c6:	b2ed      	uxtb	r5, r5
 80071c8:	e7d8      	b.n	800717c <_scanf_float+0x188>
 80071ca:	f1ba 0f01 	cmp.w	sl, #1
 80071ce:	f47f af41 	bne.w	8007054 <_scanf_float+0x60>
 80071d2:	f04f 0a02 	mov.w	sl, #2
 80071d6:	e7d1      	b.n	800717c <_scanf_float+0x188>
 80071d8:	b97d      	cbnz	r5, 80071fa <_scanf_float+0x206>
 80071da:	f1b9 0f00 	cmp.w	r9, #0
 80071de:	f47f af3c 	bne.w	800705a <_scanf_float+0x66>
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071ec:	f47f af39 	bne.w	8007062 <_scanf_float+0x6e>
 80071f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071f4:	6022      	str	r2, [r4, #0]
 80071f6:	2501      	movs	r5, #1
 80071f8:	e7c0      	b.n	800717c <_scanf_float+0x188>
 80071fa:	2d03      	cmp	r5, #3
 80071fc:	d0e2      	beq.n	80071c4 <_scanf_float+0x1d0>
 80071fe:	2d05      	cmp	r5, #5
 8007200:	e7de      	b.n	80071c0 <_scanf_float+0x1cc>
 8007202:	2d02      	cmp	r5, #2
 8007204:	f47f af26 	bne.w	8007054 <_scanf_float+0x60>
 8007208:	2503      	movs	r5, #3
 800720a:	e7b7      	b.n	800717c <_scanf_float+0x188>
 800720c:	2d06      	cmp	r5, #6
 800720e:	f47f af21 	bne.w	8007054 <_scanf_float+0x60>
 8007212:	2507      	movs	r5, #7
 8007214:	e7b2      	b.n	800717c <_scanf_float+0x188>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	0591      	lsls	r1, r2, #22
 800721a:	f57f af1b 	bpl.w	8007054 <_scanf_float+0x60>
 800721e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007222:	6022      	str	r2, [r4, #0]
 8007224:	f8cd 9004 	str.w	r9, [sp, #4]
 8007228:	e7a8      	b.n	800717c <_scanf_float+0x188>
 800722a:	6822      	ldr	r2, [r4, #0]
 800722c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007230:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007234:	d006      	beq.n	8007244 <_scanf_float+0x250>
 8007236:	0550      	lsls	r0, r2, #21
 8007238:	f57f af0c 	bpl.w	8007054 <_scanf_float+0x60>
 800723c:	f1b9 0f00 	cmp.w	r9, #0
 8007240:	f43f af0f 	beq.w	8007062 <_scanf_float+0x6e>
 8007244:	0591      	lsls	r1, r2, #22
 8007246:	bf58      	it	pl
 8007248:	9901      	ldrpl	r1, [sp, #4]
 800724a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800724e:	bf58      	it	pl
 8007250:	eba9 0101 	subpl.w	r1, r9, r1
 8007254:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007258:	bf58      	it	pl
 800725a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800725e:	6022      	str	r2, [r4, #0]
 8007260:	f04f 0900 	mov.w	r9, #0
 8007264:	e78a      	b.n	800717c <_scanf_float+0x188>
 8007266:	f04f 0a03 	mov.w	sl, #3
 800726a:	e787      	b.n	800717c <_scanf_float+0x188>
 800726c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007270:	4639      	mov	r1, r7
 8007272:	4640      	mov	r0, r8
 8007274:	4798      	blx	r3
 8007276:	2800      	cmp	r0, #0
 8007278:	f43f aedf 	beq.w	800703a <_scanf_float+0x46>
 800727c:	e6ea      	b.n	8007054 <_scanf_float+0x60>
 800727e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007286:	463a      	mov	r2, r7
 8007288:	4640      	mov	r0, r8
 800728a:	4798      	blx	r3
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	3b01      	subs	r3, #1
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	e6ec      	b.n	800706e <_scanf_float+0x7a>
 8007294:	1e6b      	subs	r3, r5, #1
 8007296:	2b06      	cmp	r3, #6
 8007298:	d825      	bhi.n	80072e6 <_scanf_float+0x2f2>
 800729a:	2d02      	cmp	r5, #2
 800729c:	d836      	bhi.n	800730c <_scanf_float+0x318>
 800729e:	455e      	cmp	r6, fp
 80072a0:	f67f aee8 	bls.w	8007074 <_scanf_float+0x80>
 80072a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ac:	463a      	mov	r2, r7
 80072ae:	4640      	mov	r0, r8
 80072b0:	4798      	blx	r3
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	e7f1      	b.n	800729e <_scanf_float+0x2aa>
 80072ba:	9802      	ldr	r0, [sp, #8]
 80072bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072c4:	9002      	str	r0, [sp, #8]
 80072c6:	463a      	mov	r2, r7
 80072c8:	4640      	mov	r0, r8
 80072ca:	4798      	blx	r3
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072d6:	fa5f fa8a 	uxtb.w	sl, sl
 80072da:	f1ba 0f02 	cmp.w	sl, #2
 80072de:	d1ec      	bne.n	80072ba <_scanf_float+0x2c6>
 80072e0:	3d03      	subs	r5, #3
 80072e2:	b2ed      	uxtb	r5, r5
 80072e4:	1b76      	subs	r6, r6, r5
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	05da      	lsls	r2, r3, #23
 80072ea:	d52f      	bpl.n	800734c <_scanf_float+0x358>
 80072ec:	055b      	lsls	r3, r3, #21
 80072ee:	d510      	bpl.n	8007312 <_scanf_float+0x31e>
 80072f0:	455e      	cmp	r6, fp
 80072f2:	f67f aebf 	bls.w	8007074 <_scanf_float+0x80>
 80072f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072fe:	463a      	mov	r2, r7
 8007300:	4640      	mov	r0, r8
 8007302:	4798      	blx	r3
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	3b01      	subs	r3, #1
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	e7f1      	b.n	80072f0 <_scanf_float+0x2fc>
 800730c:	46aa      	mov	sl, r5
 800730e:	9602      	str	r6, [sp, #8]
 8007310:	e7df      	b.n	80072d2 <_scanf_float+0x2de>
 8007312:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	2965      	cmp	r1, #101	; 0x65
 800731a:	f103 33ff 	add.w	r3, r3, #4294967295
 800731e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007322:	6123      	str	r3, [r4, #16]
 8007324:	d00c      	beq.n	8007340 <_scanf_float+0x34c>
 8007326:	2945      	cmp	r1, #69	; 0x45
 8007328:	d00a      	beq.n	8007340 <_scanf_float+0x34c>
 800732a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800732e:	463a      	mov	r2, r7
 8007330:	4640      	mov	r0, r8
 8007332:	4798      	blx	r3
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800733a:	3b01      	subs	r3, #1
 800733c:	1eb5      	subs	r5, r6, #2
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007344:	463a      	mov	r2, r7
 8007346:	4640      	mov	r0, r8
 8007348:	4798      	blx	r3
 800734a:	462e      	mov	r6, r5
 800734c:	6825      	ldr	r5, [r4, #0]
 800734e:	f015 0510 	ands.w	r5, r5, #16
 8007352:	d14d      	bne.n	80073f0 <_scanf_float+0x3fc>
 8007354:	7035      	strb	r5, [r6, #0]
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007360:	d11a      	bne.n	8007398 <_scanf_float+0x3a4>
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	454b      	cmp	r3, r9
 8007366:	eba3 0209 	sub.w	r2, r3, r9
 800736a:	d122      	bne.n	80073b2 <_scanf_float+0x3be>
 800736c:	2200      	movs	r2, #0
 800736e:	4659      	mov	r1, fp
 8007370:	4640      	mov	r0, r8
 8007372:	f000 fef7 	bl	8008164 <_strtod_r>
 8007376:	9b03      	ldr	r3, [sp, #12]
 8007378:	6821      	ldr	r1, [r4, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f011 0f02 	tst.w	r1, #2
 8007380:	f103 0204 	add.w	r2, r3, #4
 8007384:	d020      	beq.n	80073c8 <_scanf_float+0x3d4>
 8007386:	9903      	ldr	r1, [sp, #12]
 8007388:	600a      	str	r2, [r1, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	ed83 0b00 	vstr	d0, [r3]
 8007390:	68e3      	ldr	r3, [r4, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60e3      	str	r3, [r4, #12]
 8007396:	e66e      	b.n	8007076 <_scanf_float+0x82>
 8007398:	9b04      	ldr	r3, [sp, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0e6      	beq.n	800736c <_scanf_float+0x378>
 800739e:	9905      	ldr	r1, [sp, #20]
 80073a0:	230a      	movs	r3, #10
 80073a2:	462a      	mov	r2, r5
 80073a4:	3101      	adds	r1, #1
 80073a6:	4640      	mov	r0, r8
 80073a8:	f000 ff66 	bl	8008278 <_strtol_r>
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	9e05      	ldr	r6, [sp, #20]
 80073b0:	1ac2      	subs	r2, r0, r3
 80073b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073b6:	429e      	cmp	r6, r3
 80073b8:	bf28      	it	cs
 80073ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073be:	490d      	ldr	r1, [pc, #52]	; (80073f4 <_scanf_float+0x400>)
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f821 	bl	8007408 <siprintf>
 80073c6:	e7d1      	b.n	800736c <_scanf_float+0x378>
 80073c8:	f011 0f04 	tst.w	r1, #4
 80073cc:	9903      	ldr	r1, [sp, #12]
 80073ce:	600a      	str	r2, [r1, #0]
 80073d0:	d1db      	bne.n	800738a <_scanf_float+0x396>
 80073d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	681e      	ldr	r6, [r3, #0]
 80073dc:	d705      	bvc.n	80073ea <_scanf_float+0x3f6>
 80073de:	4806      	ldr	r0, [pc, #24]	; (80073f8 <_scanf_float+0x404>)
 80073e0:	f000 f80c 	bl	80073fc <nanf>
 80073e4:	ed86 0a00 	vstr	s0, [r6]
 80073e8:	e7d2      	b.n	8007390 <_scanf_float+0x39c>
 80073ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80073ee:	e7f9      	b.n	80073e4 <_scanf_float+0x3f0>
 80073f0:	2500      	movs	r5, #0
 80073f2:	e640      	b.n	8007076 <_scanf_float+0x82>
 80073f4:	0800ba7e 	.word	0x0800ba7e
 80073f8:	0800beb3 	.word	0x0800beb3

080073fc <nanf>:
 80073fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007404 <nanf+0x8>
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	7fc00000 	.word	0x7fc00000

08007408 <siprintf>:
 8007408:	b40e      	push	{r1, r2, r3}
 800740a:	b500      	push	{lr}
 800740c:	b09c      	sub	sp, #112	; 0x70
 800740e:	ab1d      	add	r3, sp, #116	; 0x74
 8007410:	9002      	str	r0, [sp, #8]
 8007412:	9006      	str	r0, [sp, #24]
 8007414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007418:	4809      	ldr	r0, [pc, #36]	; (8007440 <siprintf+0x38>)
 800741a:	9107      	str	r1, [sp, #28]
 800741c:	9104      	str	r1, [sp, #16]
 800741e:	4909      	ldr	r1, [pc, #36]	; (8007444 <siprintf+0x3c>)
 8007420:	f853 2b04 	ldr.w	r2, [r3], #4
 8007424:	9105      	str	r1, [sp, #20]
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	a902      	add	r1, sp, #8
 800742c:	f002 fed6 	bl	800a1dc <_svfiprintf_r>
 8007430:	9b02      	ldr	r3, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	b01c      	add	sp, #112	; 0x70
 8007438:	f85d eb04 	ldr.w	lr, [sp], #4
 800743c:	b003      	add	sp, #12
 800743e:	4770      	bx	lr
 8007440:	200000a8 	.word	0x200000a8
 8007444:	ffff0208 	.word	0xffff0208

08007448 <siscanf>:
 8007448:	b40e      	push	{r1, r2, r3}
 800744a:	b510      	push	{r4, lr}
 800744c:	b09f      	sub	sp, #124	; 0x7c
 800744e:	ac21      	add	r4, sp, #132	; 0x84
 8007450:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007454:	f854 2b04 	ldr.w	r2, [r4], #4
 8007458:	9201      	str	r2, [sp, #4]
 800745a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800745e:	9004      	str	r0, [sp, #16]
 8007460:	9008      	str	r0, [sp, #32]
 8007462:	f7f8 fef7 	bl	8000254 <strlen>
 8007466:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <siscanf+0x50>)
 8007468:	9005      	str	r0, [sp, #20]
 800746a:	9009      	str	r0, [sp, #36]	; 0x24
 800746c:	930d      	str	r3, [sp, #52]	; 0x34
 800746e:	480b      	ldr	r0, [pc, #44]	; (800749c <siscanf+0x54>)
 8007470:	9a01      	ldr	r2, [sp, #4]
 8007472:	6800      	ldr	r0, [r0, #0]
 8007474:	9403      	str	r4, [sp, #12]
 8007476:	2300      	movs	r3, #0
 8007478:	9311      	str	r3, [sp, #68]	; 0x44
 800747a:	9316      	str	r3, [sp, #88]	; 0x58
 800747c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007480:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007484:	a904      	add	r1, sp, #16
 8007486:	4623      	mov	r3, r4
 8007488:	f003 f802 	bl	800a490 <__ssvfiscanf_r>
 800748c:	b01f      	add	sp, #124	; 0x7c
 800748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007492:	b003      	add	sp, #12
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	080074c3 	.word	0x080074c3
 800749c:	200000a8 	.word	0x200000a8

080074a0 <__sread>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a8:	f003 fab6 	bl	800aa18 <_read_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	bfab      	itete	ge
 80074b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074b2:	89a3      	ldrhlt	r3, [r4, #12]
 80074b4:	181b      	addge	r3, r3, r0
 80074b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ba:	bfac      	ite	ge
 80074bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074be:	81a3      	strhlt	r3, [r4, #12]
 80074c0:	bd10      	pop	{r4, pc}

080074c2 <__seofread>:
 80074c2:	2000      	movs	r0, #0
 80074c4:	4770      	bx	lr

080074c6 <__swrite>:
 80074c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	461f      	mov	r7, r3
 80074cc:	898b      	ldrh	r3, [r1, #12]
 80074ce:	05db      	lsls	r3, r3, #23
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4616      	mov	r6, r2
 80074d6:	d505      	bpl.n	80074e4 <__swrite+0x1e>
 80074d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074dc:	2302      	movs	r3, #2
 80074de:	2200      	movs	r2, #0
 80074e0:	f002 f870 	bl	80095c4 <_lseek_r>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	f000 bebf 	b.w	800827c <_write_r>

080074fe <__sseek>:
 80074fe:	b510      	push	{r4, lr}
 8007500:	460c      	mov	r4, r1
 8007502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007506:	f002 f85d 	bl	80095c4 <_lseek_r>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	bf15      	itete	ne
 8007510:	6560      	strne	r0, [r4, #84]	; 0x54
 8007512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800751a:	81a3      	strheq	r3, [r4, #12]
 800751c:	bf18      	it	ne
 800751e:	81a3      	strhne	r3, [r4, #12]
 8007520:	bd10      	pop	{r4, pc}

08007522 <__sclose>:
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 bebb 	b.w	80082a0 <_close_r>

0800752a <strcpy>:
 800752a:	4603      	mov	r3, r0
 800752c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007530:	f803 2b01 	strb.w	r2, [r3], #1
 8007534:	2a00      	cmp	r2, #0
 8007536:	d1f9      	bne.n	800752c <strcpy+0x2>
 8007538:	4770      	bx	lr

0800753a <strncmp>:
 800753a:	b510      	push	{r4, lr}
 800753c:	b16a      	cbz	r2, 800755a <strncmp+0x20>
 800753e:	3901      	subs	r1, #1
 8007540:	1884      	adds	r4, r0, r2
 8007542:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800754a:	4293      	cmp	r3, r2
 800754c:	d103      	bne.n	8007556 <strncmp+0x1c>
 800754e:	42a0      	cmp	r0, r4
 8007550:	d001      	beq.n	8007556 <strncmp+0x1c>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f5      	bne.n	8007542 <strncmp+0x8>
 8007556:	1a98      	subs	r0, r3, r2
 8007558:	bd10      	pop	{r4, pc}
 800755a:	4610      	mov	r0, r2
 800755c:	e7fc      	b.n	8007558 <strncmp+0x1e>

0800755e <strncpy>:
 800755e:	b510      	push	{r4, lr}
 8007560:	3901      	subs	r1, #1
 8007562:	4603      	mov	r3, r0
 8007564:	b132      	cbz	r2, 8007574 <strncpy+0x16>
 8007566:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800756a:	f803 4b01 	strb.w	r4, [r3], #1
 800756e:	3a01      	subs	r2, #1
 8007570:	2c00      	cmp	r4, #0
 8007572:	d1f7      	bne.n	8007564 <strncpy+0x6>
 8007574:	441a      	add	r2, r3
 8007576:	2100      	movs	r1, #0
 8007578:	4293      	cmp	r3, r2
 800757a:	d100      	bne.n	800757e <strncpy+0x20>
 800757c:	bd10      	pop	{r4, pc}
 800757e:	f803 1b01 	strb.w	r1, [r3], #1
 8007582:	e7f9      	b.n	8007578 <strncpy+0x1a>

08007584 <sulp>:
 8007584:	b570      	push	{r4, r5, r6, lr}
 8007586:	4604      	mov	r4, r0
 8007588:	460d      	mov	r5, r1
 800758a:	4616      	mov	r6, r2
 800758c:	ec45 4b10 	vmov	d0, r4, r5
 8007590:	f002 fbbe 	bl	8009d10 <__ulp>
 8007594:	b17e      	cbz	r6, 80075b6 <sulp+0x32>
 8007596:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800759a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dd09      	ble.n	80075b6 <sulp+0x32>
 80075a2:	051b      	lsls	r3, r3, #20
 80075a4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80075a8:	2000      	movs	r0, #0
 80075aa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80075ae:	ec41 0b17 	vmov	d7, r0, r1
 80075b2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80075b6:	bd70      	pop	{r4, r5, r6, pc}

080075b8 <_strtod_l>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ed2d 8b0c 	vpush	{d8-d13}
 80075c0:	b09d      	sub	sp, #116	; 0x74
 80075c2:	461f      	mov	r7, r3
 80075c4:	2300      	movs	r3, #0
 80075c6:	9318      	str	r3, [sp, #96]	; 0x60
 80075c8:	4ba6      	ldr	r3, [pc, #664]	; (8007864 <_strtod_l+0x2ac>)
 80075ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	9308      	str	r3, [sp, #32]
 80075d0:	4604      	mov	r4, r0
 80075d2:	4618      	mov	r0, r3
 80075d4:	468a      	mov	sl, r1
 80075d6:	f7f8 fe3d 	bl	8000254 <strlen>
 80075da:	f04f 0800 	mov.w	r8, #0
 80075de:	4605      	mov	r5, r0
 80075e0:	f04f 0900 	mov.w	r9, #0
 80075e4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80075e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ea:	781a      	ldrb	r2, [r3, #0]
 80075ec:	2a2b      	cmp	r2, #43	; 0x2b
 80075ee:	d04d      	beq.n	800768c <_strtod_l+0xd4>
 80075f0:	d83a      	bhi.n	8007668 <_strtod_l+0xb0>
 80075f2:	2a0d      	cmp	r2, #13
 80075f4:	d833      	bhi.n	800765e <_strtod_l+0xa6>
 80075f6:	2a08      	cmp	r2, #8
 80075f8:	d833      	bhi.n	8007662 <_strtod_l+0xaa>
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d03d      	beq.n	800767a <_strtod_l+0xc2>
 80075fe:	2300      	movs	r3, #0
 8007600:	930b      	str	r3, [sp, #44]	; 0x2c
 8007602:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007604:	7833      	ldrb	r3, [r6, #0]
 8007606:	2b30      	cmp	r3, #48	; 0x30
 8007608:	f040 80b6 	bne.w	8007778 <_strtod_l+0x1c0>
 800760c:	7873      	ldrb	r3, [r6, #1]
 800760e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007612:	2b58      	cmp	r3, #88	; 0x58
 8007614:	d16d      	bne.n	80076f2 <_strtod_l+0x13a>
 8007616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	ab18      	add	r3, sp, #96	; 0x60
 800761c:	9702      	str	r7, [sp, #8]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	4a91      	ldr	r2, [pc, #580]	; (8007868 <_strtod_l+0x2b0>)
 8007622:	ab19      	add	r3, sp, #100	; 0x64
 8007624:	a917      	add	r1, sp, #92	; 0x5c
 8007626:	4620      	mov	r0, r4
 8007628:	f001 fcc0 	bl	8008fac <__gethex>
 800762c:	f010 0507 	ands.w	r5, r0, #7
 8007630:	4607      	mov	r7, r0
 8007632:	d005      	beq.n	8007640 <_strtod_l+0x88>
 8007634:	2d06      	cmp	r5, #6
 8007636:	d12b      	bne.n	8007690 <_strtod_l+0xd8>
 8007638:	3601      	adds	r6, #1
 800763a:	2300      	movs	r3, #0
 800763c:	9617      	str	r6, [sp, #92]	; 0x5c
 800763e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 856e 	bne.w	8008124 <_strtod_l+0xb6c>
 8007648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764a:	b1e3      	cbz	r3, 8007686 <_strtod_l+0xce>
 800764c:	ec49 8b17 	vmov	d7, r8, r9
 8007650:	eeb1 0b47 	vneg.f64	d0, d7
 8007654:	b01d      	add	sp, #116	; 0x74
 8007656:	ecbd 8b0c 	vpop	{d8-d13}
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	2a20      	cmp	r2, #32
 8007660:	d1cd      	bne.n	80075fe <_strtod_l+0x46>
 8007662:	3301      	adds	r3, #1
 8007664:	9317      	str	r3, [sp, #92]	; 0x5c
 8007666:	e7bf      	b.n	80075e8 <_strtod_l+0x30>
 8007668:	2a2d      	cmp	r2, #45	; 0x2d
 800766a:	d1c8      	bne.n	80075fe <_strtod_l+0x46>
 800766c:	2201      	movs	r2, #1
 800766e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	9217      	str	r2, [sp, #92]	; 0x5c
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1c3      	bne.n	8007602 <_strtod_l+0x4a>
 800767a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800767c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 854d 	bne.w	8008120 <_strtod_l+0xb68>
 8007686:	ec49 8b10 	vmov	d0, r8, r9
 800768a:	e7e3      	b.n	8007654 <_strtod_l+0x9c>
 800768c:	2200      	movs	r2, #0
 800768e:	e7ee      	b.n	800766e <_strtod_l+0xb6>
 8007690:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007692:	b13a      	cbz	r2, 80076a4 <_strtod_l+0xec>
 8007694:	2135      	movs	r1, #53	; 0x35
 8007696:	a81a      	add	r0, sp, #104	; 0x68
 8007698:	f002 fc46 	bl	8009f28 <__copybits>
 800769c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800769e:	4620      	mov	r0, r4
 80076a0:	f002 f80a 	bl	80096b8 <_Bfree>
 80076a4:	3d01      	subs	r5, #1
 80076a6:	2d05      	cmp	r5, #5
 80076a8:	d807      	bhi.n	80076ba <_strtod_l+0x102>
 80076aa:	e8df f005 	tbb	[pc, r5]
 80076ae:	0b0e      	.short	0x0b0e
 80076b0:	030e1d18 	.word	0x030e1d18
 80076b4:	f04f 0900 	mov.w	r9, #0
 80076b8:	46c8      	mov	r8, r9
 80076ba:	073b      	lsls	r3, r7, #28
 80076bc:	d5c0      	bpl.n	8007640 <_strtod_l+0x88>
 80076be:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80076c2:	e7bd      	b.n	8007640 <_strtod_l+0x88>
 80076c4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80076c8:	e7f7      	b.n	80076ba <_strtod_l+0x102>
 80076ca:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80076ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80076d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80076d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80076dc:	e7ed      	b.n	80076ba <_strtod_l+0x102>
 80076de:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800786c <_strtod_l+0x2b4>
 80076e2:	f04f 0800 	mov.w	r8, #0
 80076e6:	e7e8      	b.n	80076ba <_strtod_l+0x102>
 80076e8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80076ec:	f04f 38ff 	mov.w	r8, #4294967295
 80076f0:	e7e3      	b.n	80076ba <_strtod_l+0x102>
 80076f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b30      	cmp	r3, #48	; 0x30
 80076fc:	d0f9      	beq.n	80076f2 <_strtod_l+0x13a>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d09e      	beq.n	8007640 <_strtod_l+0x88>
 8007702:	2301      	movs	r3, #1
 8007704:	9306      	str	r3, [sp, #24]
 8007706:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007708:	930c      	str	r3, [sp, #48]	; 0x30
 800770a:	2300      	movs	r3, #0
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	930a      	str	r3, [sp, #40]	; 0x28
 8007710:	461e      	mov	r6, r3
 8007712:	220a      	movs	r2, #10
 8007714:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007716:	f890 b000 	ldrb.w	fp, [r0]
 800771a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800771e:	b2d9      	uxtb	r1, r3
 8007720:	2909      	cmp	r1, #9
 8007722:	d92b      	bls.n	800777c <_strtod_l+0x1c4>
 8007724:	9908      	ldr	r1, [sp, #32]
 8007726:	462a      	mov	r2, r5
 8007728:	f7ff ff07 	bl	800753a <strncmp>
 800772c:	2800      	cmp	r0, #0
 800772e:	d035      	beq.n	800779c <_strtod_l+0x1e4>
 8007730:	2000      	movs	r0, #0
 8007732:	465a      	mov	r2, fp
 8007734:	4633      	mov	r3, r6
 8007736:	4683      	mov	fp, r0
 8007738:	4601      	mov	r1, r0
 800773a:	2a65      	cmp	r2, #101	; 0x65
 800773c:	d001      	beq.n	8007742 <_strtod_l+0x18a>
 800773e:	2a45      	cmp	r2, #69	; 0x45
 8007740:	d118      	bne.n	8007774 <_strtod_l+0x1bc>
 8007742:	b91b      	cbnz	r3, 800774c <_strtod_l+0x194>
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	4303      	orrs	r3, r0
 8007748:	d097      	beq.n	800767a <_strtod_l+0xc2>
 800774a:	2300      	movs	r3, #0
 800774c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8007750:	f10a 0201 	add.w	r2, sl, #1
 8007754:	9217      	str	r2, [sp, #92]	; 0x5c
 8007756:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800775a:	2a2b      	cmp	r2, #43	; 0x2b
 800775c:	d077      	beq.n	800784e <_strtod_l+0x296>
 800775e:	2a2d      	cmp	r2, #45	; 0x2d
 8007760:	d07d      	beq.n	800785e <_strtod_l+0x2a6>
 8007762:	f04f 0e00 	mov.w	lr, #0
 8007766:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800776a:	2d09      	cmp	r5, #9
 800776c:	f240 8084 	bls.w	8007878 <_strtod_l+0x2c0>
 8007770:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007774:	2500      	movs	r5, #0
 8007776:	e09f      	b.n	80078b8 <_strtod_l+0x300>
 8007778:	2300      	movs	r3, #0
 800777a:	e7c3      	b.n	8007704 <_strtod_l+0x14c>
 800777c:	2e08      	cmp	r6, #8
 800777e:	bfd5      	itete	le
 8007780:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007782:	9904      	ldrgt	r1, [sp, #16]
 8007784:	fb02 3301 	mlale	r3, r2, r1, r3
 8007788:	fb02 3301 	mlagt	r3, r2, r1, r3
 800778c:	f100 0001 	add.w	r0, r0, #1
 8007790:	bfd4      	ite	le
 8007792:	930a      	strle	r3, [sp, #40]	; 0x28
 8007794:	9304      	strgt	r3, [sp, #16]
 8007796:	3601      	adds	r6, #1
 8007798:	9017      	str	r0, [sp, #92]	; 0x5c
 800779a:	e7bb      	b.n	8007714 <_strtod_l+0x15c>
 800779c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800779e:	195a      	adds	r2, r3, r5
 80077a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80077a2:	5d5a      	ldrb	r2, [r3, r5]
 80077a4:	b3ae      	cbz	r6, 8007812 <_strtod_l+0x25a>
 80077a6:	4683      	mov	fp, r0
 80077a8:	4633      	mov	r3, r6
 80077aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077ae:	2909      	cmp	r1, #9
 80077b0:	d912      	bls.n	80077d8 <_strtod_l+0x220>
 80077b2:	2101      	movs	r1, #1
 80077b4:	e7c1      	b.n	800773a <_strtod_l+0x182>
 80077b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80077bc:	785a      	ldrb	r2, [r3, #1]
 80077be:	3001      	adds	r0, #1
 80077c0:	2a30      	cmp	r2, #48	; 0x30
 80077c2:	d0f8      	beq.n	80077b6 <_strtod_l+0x1fe>
 80077c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	f200 84b0 	bhi.w	800812e <_strtod_l+0xb76>
 80077ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077d0:	930c      	str	r3, [sp, #48]	; 0x30
 80077d2:	4683      	mov	fp, r0
 80077d4:	2000      	movs	r0, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	3a30      	subs	r2, #48	; 0x30
 80077da:	f100 0101 	add.w	r1, r0, #1
 80077de:	d012      	beq.n	8007806 <_strtod_l+0x24e>
 80077e0:	448b      	add	fp, r1
 80077e2:	eb00 0c03 	add.w	ip, r0, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	250a      	movs	r5, #10
 80077ea:	4561      	cmp	r1, ip
 80077ec:	d113      	bne.n	8007816 <_strtod_l+0x25e>
 80077ee:	1819      	adds	r1, r3, r0
 80077f0:	2908      	cmp	r1, #8
 80077f2:	f103 0301 	add.w	r3, r3, #1
 80077f6:	4403      	add	r3, r0
 80077f8:	dc1d      	bgt.n	8007836 <_strtod_l+0x27e>
 80077fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077fc:	210a      	movs	r1, #10
 80077fe:	fb01 2200 	mla	r2, r1, r0, r2
 8007802:	920a      	str	r2, [sp, #40]	; 0x28
 8007804:	2100      	movs	r1, #0
 8007806:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007808:	1c50      	adds	r0, r2, #1
 800780a:	9017      	str	r0, [sp, #92]	; 0x5c
 800780c:	7852      	ldrb	r2, [r2, #1]
 800780e:	4608      	mov	r0, r1
 8007810:	e7cb      	b.n	80077aa <_strtod_l+0x1f2>
 8007812:	4630      	mov	r0, r6
 8007814:	e7d4      	b.n	80077c0 <_strtod_l+0x208>
 8007816:	2908      	cmp	r1, #8
 8007818:	dc04      	bgt.n	8007824 <_strtod_l+0x26c>
 800781a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800781c:	436f      	muls	r7, r5
 800781e:	970a      	str	r7, [sp, #40]	; 0x28
 8007820:	3101      	adds	r1, #1
 8007822:	e7e2      	b.n	80077ea <_strtod_l+0x232>
 8007824:	f101 0e01 	add.w	lr, r1, #1
 8007828:	f1be 0f10 	cmp.w	lr, #16
 800782c:	bfde      	ittt	le
 800782e:	9f04      	ldrle	r7, [sp, #16]
 8007830:	436f      	mulle	r7, r5
 8007832:	9704      	strle	r7, [sp, #16]
 8007834:	e7f4      	b.n	8007820 <_strtod_l+0x268>
 8007836:	2b10      	cmp	r3, #16
 8007838:	bfdf      	itttt	le
 800783a:	9804      	ldrle	r0, [sp, #16]
 800783c:	210a      	movle	r1, #10
 800783e:	fb01 2200 	mlale	r2, r1, r0, r2
 8007842:	9204      	strle	r2, [sp, #16]
 8007844:	e7de      	b.n	8007804 <_strtod_l+0x24c>
 8007846:	f04f 0b00 	mov.w	fp, #0
 800784a:	2101      	movs	r1, #1
 800784c:	e77a      	b.n	8007744 <_strtod_l+0x18c>
 800784e:	f04f 0e00 	mov.w	lr, #0
 8007852:	f10a 0202 	add.w	r2, sl, #2
 8007856:	9217      	str	r2, [sp, #92]	; 0x5c
 8007858:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800785c:	e783      	b.n	8007766 <_strtod_l+0x1ae>
 800785e:	f04f 0e01 	mov.w	lr, #1
 8007862:	e7f6      	b.n	8007852 <_strtod_l+0x29a>
 8007864:	0800bcd8 	.word	0x0800bcd8
 8007868:	0800ba84 	.word	0x0800ba84
 800786c:	7ff00000 	.word	0x7ff00000
 8007870:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007872:	1c55      	adds	r5, r2, #1
 8007874:	9517      	str	r5, [sp, #92]	; 0x5c
 8007876:	7852      	ldrb	r2, [r2, #1]
 8007878:	2a30      	cmp	r2, #48	; 0x30
 800787a:	d0f9      	beq.n	8007870 <_strtod_l+0x2b8>
 800787c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007880:	2d08      	cmp	r5, #8
 8007882:	f63f af77 	bhi.w	8007774 <_strtod_l+0x1bc>
 8007886:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800788a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800788c:	9208      	str	r2, [sp, #32]
 800788e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007890:	1c55      	adds	r5, r2, #1
 8007892:	9517      	str	r5, [sp, #92]	; 0x5c
 8007894:	7852      	ldrb	r2, [r2, #1]
 8007896:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800789a:	2f09      	cmp	r7, #9
 800789c:	d937      	bls.n	800790e <_strtod_l+0x356>
 800789e:	9f08      	ldr	r7, [sp, #32]
 80078a0:	1bed      	subs	r5, r5, r7
 80078a2:	2d08      	cmp	r5, #8
 80078a4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80078a8:	dc02      	bgt.n	80078b0 <_strtod_l+0x2f8>
 80078aa:	4565      	cmp	r5, ip
 80078ac:	bfa8      	it	ge
 80078ae:	4665      	movge	r5, ip
 80078b0:	f1be 0f00 	cmp.w	lr, #0
 80078b4:	d000      	beq.n	80078b8 <_strtod_l+0x300>
 80078b6:	426d      	negs	r5, r5
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d14f      	bne.n	800795c <_strtod_l+0x3a4>
 80078bc:	9b06      	ldr	r3, [sp, #24]
 80078be:	4303      	orrs	r3, r0
 80078c0:	f47f aebe 	bne.w	8007640 <_strtod_l+0x88>
 80078c4:	2900      	cmp	r1, #0
 80078c6:	f47f aed8 	bne.w	800767a <_strtod_l+0xc2>
 80078ca:	2a69      	cmp	r2, #105	; 0x69
 80078cc:	d027      	beq.n	800791e <_strtod_l+0x366>
 80078ce:	dc24      	bgt.n	800791a <_strtod_l+0x362>
 80078d0:	2a49      	cmp	r2, #73	; 0x49
 80078d2:	d024      	beq.n	800791e <_strtod_l+0x366>
 80078d4:	2a4e      	cmp	r2, #78	; 0x4e
 80078d6:	f47f aed0 	bne.w	800767a <_strtod_l+0xc2>
 80078da:	499b      	ldr	r1, [pc, #620]	; (8007b48 <_strtod_l+0x590>)
 80078dc:	a817      	add	r0, sp, #92	; 0x5c
 80078de:	f001 fdbd 	bl	800945c <__match>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	f43f aec9 	beq.w	800767a <_strtod_l+0xc2>
 80078e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b28      	cmp	r3, #40	; 0x28
 80078ee:	d12d      	bne.n	800794c <_strtod_l+0x394>
 80078f0:	4996      	ldr	r1, [pc, #600]	; (8007b4c <_strtod_l+0x594>)
 80078f2:	aa1a      	add	r2, sp, #104	; 0x68
 80078f4:	a817      	add	r0, sp, #92	; 0x5c
 80078f6:	f001 fdc5 	bl	8009484 <__hexnan>
 80078fa:	2805      	cmp	r0, #5
 80078fc:	d126      	bne.n	800794c <_strtod_l+0x394>
 80078fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007900:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007904:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007908:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800790c:	e698      	b.n	8007640 <_strtod_l+0x88>
 800790e:	250a      	movs	r5, #10
 8007910:	fb05 250c 	mla	r5, r5, ip, r2
 8007914:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007918:	e7b9      	b.n	800788e <_strtod_l+0x2d6>
 800791a:	2a6e      	cmp	r2, #110	; 0x6e
 800791c:	e7db      	b.n	80078d6 <_strtod_l+0x31e>
 800791e:	498c      	ldr	r1, [pc, #560]	; (8007b50 <_strtod_l+0x598>)
 8007920:	a817      	add	r0, sp, #92	; 0x5c
 8007922:	f001 fd9b 	bl	800945c <__match>
 8007926:	2800      	cmp	r0, #0
 8007928:	f43f aea7 	beq.w	800767a <_strtod_l+0xc2>
 800792c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800792e:	4989      	ldr	r1, [pc, #548]	; (8007b54 <_strtod_l+0x59c>)
 8007930:	3b01      	subs	r3, #1
 8007932:	a817      	add	r0, sp, #92	; 0x5c
 8007934:	9317      	str	r3, [sp, #92]	; 0x5c
 8007936:	f001 fd91 	bl	800945c <__match>
 800793a:	b910      	cbnz	r0, 8007942 <_strtod_l+0x38a>
 800793c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800793e:	3301      	adds	r3, #1
 8007940:	9317      	str	r3, [sp, #92]	; 0x5c
 8007942:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007b68 <_strtod_l+0x5b0>
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	e679      	b.n	8007640 <_strtod_l+0x88>
 800794c:	4882      	ldr	r0, [pc, #520]	; (8007b58 <_strtod_l+0x5a0>)
 800794e:	f003 f877 	bl	800aa40 <nan>
 8007952:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007956:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800795a:	e671      	b.n	8007640 <_strtod_l+0x88>
 800795c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007960:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007964:	eba5 020b 	sub.w	r2, r5, fp
 8007968:	2e00      	cmp	r6, #0
 800796a:	bf08      	it	eq
 800796c:	461e      	moveq	r6, r3
 800796e:	2b10      	cmp	r3, #16
 8007970:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007974:	9206      	str	r2, [sp, #24]
 8007976:	461a      	mov	r2, r3
 8007978:	bfa8      	it	ge
 800797a:	2210      	movge	r2, #16
 800797c:	2b09      	cmp	r3, #9
 800797e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007982:	dd0e      	ble.n	80079a2 <_strtod_l+0x3ea>
 8007984:	4975      	ldr	r1, [pc, #468]	; (8007b5c <_strtod_l+0x5a4>)
 8007986:	eddd 7a04 	vldr	s15, [sp, #16]
 800798a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800798e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007992:	ed9d 5b08 	vldr	d5, [sp, #32]
 8007996:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800799a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800799e:	ec59 8b17 	vmov	r8, r9, d7
 80079a2:	2b0f      	cmp	r3, #15
 80079a4:	dc37      	bgt.n	8007a16 <_strtod_l+0x45e>
 80079a6:	9906      	ldr	r1, [sp, #24]
 80079a8:	2900      	cmp	r1, #0
 80079aa:	f43f ae49 	beq.w	8007640 <_strtod_l+0x88>
 80079ae:	dd23      	ble.n	80079f8 <_strtod_l+0x440>
 80079b0:	2916      	cmp	r1, #22
 80079b2:	dc0b      	bgt.n	80079cc <_strtod_l+0x414>
 80079b4:	4b69      	ldr	r3, [pc, #420]	; (8007b5c <_strtod_l+0x5a4>)
 80079b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80079ba:	ed93 7b00 	vldr	d7, [r3]
 80079be:	ec49 8b16 	vmov	d6, r8, r9
 80079c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079c6:	ec59 8b17 	vmov	r8, r9, d7
 80079ca:	e639      	b.n	8007640 <_strtod_l+0x88>
 80079cc:	9806      	ldr	r0, [sp, #24]
 80079ce:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80079d2:	4281      	cmp	r1, r0
 80079d4:	db1f      	blt.n	8007a16 <_strtod_l+0x45e>
 80079d6:	4a61      	ldr	r2, [pc, #388]	; (8007b5c <_strtod_l+0x5a4>)
 80079d8:	f1c3 030f 	rsb	r3, r3, #15
 80079dc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80079e0:	ed91 7b00 	vldr	d7, [r1]
 80079e4:	ec49 8b16 	vmov	d6, r8, r9
 80079e8:	1ac3      	subs	r3, r0, r3
 80079ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80079ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079f2:	ed92 6b00 	vldr	d6, [r2]
 80079f6:	e7e4      	b.n	80079c2 <_strtod_l+0x40a>
 80079f8:	9906      	ldr	r1, [sp, #24]
 80079fa:	3116      	adds	r1, #22
 80079fc:	db0b      	blt.n	8007a16 <_strtod_l+0x45e>
 80079fe:	4b57      	ldr	r3, [pc, #348]	; (8007b5c <_strtod_l+0x5a4>)
 8007a00:	ebab 0505 	sub.w	r5, fp, r5
 8007a04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a08:	ed95 7b00 	vldr	d7, [r5]
 8007a0c:	ec49 8b16 	vmov	d6, r8, r9
 8007a10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007a14:	e7d7      	b.n	80079c6 <_strtod_l+0x40e>
 8007a16:	9906      	ldr	r1, [sp, #24]
 8007a18:	1a9a      	subs	r2, r3, r2
 8007a1a:	440a      	add	r2, r1
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	dd74      	ble.n	8007b0a <_strtod_l+0x552>
 8007a20:	f012 000f 	ands.w	r0, r2, #15
 8007a24:	d00a      	beq.n	8007a3c <_strtod_l+0x484>
 8007a26:	494d      	ldr	r1, [pc, #308]	; (8007b5c <_strtod_l+0x5a4>)
 8007a28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007a2c:	ed91 7b00 	vldr	d7, [r1]
 8007a30:	ec49 8b16 	vmov	d6, r8, r9
 8007a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a38:	ec59 8b17 	vmov	r8, r9, d7
 8007a3c:	f032 020f 	bics.w	r2, r2, #15
 8007a40:	d04f      	beq.n	8007ae2 <_strtod_l+0x52a>
 8007a42:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007a46:	dd22      	ble.n	8007a8e <_strtod_l+0x4d6>
 8007a48:	2500      	movs	r5, #0
 8007a4a:	462e      	mov	r6, r5
 8007a4c:	950a      	str	r5, [sp, #40]	; 0x28
 8007a4e:	462f      	mov	r7, r5
 8007a50:	2322      	movs	r3, #34	; 0x22
 8007a52:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007b68 <_strtod_l+0x5b0>
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	f04f 0800 	mov.w	r8, #0
 8007a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f43f adee 	beq.w	8007640 <_strtod_l+0x88>
 8007a64:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a66:	4620      	mov	r0, r4
 8007a68:	f001 fe26 	bl	80096b8 <_Bfree>
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f001 fe22 	bl	80096b8 <_Bfree>
 8007a74:	4631      	mov	r1, r6
 8007a76:	4620      	mov	r0, r4
 8007a78:	f001 fe1e 	bl	80096b8 <_Bfree>
 8007a7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f001 fe1a 	bl	80096b8 <_Bfree>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4620      	mov	r0, r4
 8007a88:	f001 fe16 	bl	80096b8 <_Bfree>
 8007a8c:	e5d8      	b.n	8007640 <_strtod_l+0x88>
 8007a8e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007a92:	2000      	movs	r0, #0
 8007a94:	4f32      	ldr	r7, [pc, #200]	; (8007b60 <_strtod_l+0x5a8>)
 8007a96:	1112      	asrs	r2, r2, #4
 8007a98:	4601      	mov	r1, r0
 8007a9a:	2a01      	cmp	r2, #1
 8007a9c:	dc24      	bgt.n	8007ae8 <_strtod_l+0x530>
 8007a9e:	b108      	cbz	r0, 8007aa4 <_strtod_l+0x4ec>
 8007aa0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007aa4:	4a2e      	ldr	r2, [pc, #184]	; (8007b60 <_strtod_l+0x5a8>)
 8007aa6:	482f      	ldr	r0, [pc, #188]	; (8007b64 <_strtod_l+0x5ac>)
 8007aa8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007aac:	ed91 7b00 	vldr	d7, [r1]
 8007ab0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ab4:	ec49 8b16 	vmov	d6, r8, r9
 8007ab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007abc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ac0:	9905      	ldr	r1, [sp, #20]
 8007ac2:	4a29      	ldr	r2, [pc, #164]	; (8007b68 <_strtod_l+0x5b0>)
 8007ac4:	400a      	ands	r2, r1
 8007ac6:	4282      	cmp	r2, r0
 8007ac8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007acc:	d8bc      	bhi.n	8007a48 <_strtod_l+0x490>
 8007ace:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007ad2:	4282      	cmp	r2, r0
 8007ad4:	bf86      	itte	hi
 8007ad6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007b6c <_strtod_l+0x5b4>
 8007ada:	f04f 38ff 	movhi.w	r8, #4294967295
 8007ade:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	9204      	str	r2, [sp, #16]
 8007ae6:	e07f      	b.n	8007be8 <_strtod_l+0x630>
 8007ae8:	f012 0f01 	tst.w	r2, #1
 8007aec:	d00a      	beq.n	8007b04 <_strtod_l+0x54c>
 8007aee:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8007af2:	ed90 7b00 	vldr	d7, [r0]
 8007af6:	ed9d 6b04 	vldr	d6, [sp, #16]
 8007afa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007afe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b02:	2001      	movs	r0, #1
 8007b04:	3101      	adds	r1, #1
 8007b06:	1052      	asrs	r2, r2, #1
 8007b08:	e7c7      	b.n	8007a9a <_strtod_l+0x4e2>
 8007b0a:	d0ea      	beq.n	8007ae2 <_strtod_l+0x52a>
 8007b0c:	4252      	negs	r2, r2
 8007b0e:	f012 000f 	ands.w	r0, r2, #15
 8007b12:	d00a      	beq.n	8007b2a <_strtod_l+0x572>
 8007b14:	4911      	ldr	r1, [pc, #68]	; (8007b5c <_strtod_l+0x5a4>)
 8007b16:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007b1a:	ed91 7b00 	vldr	d7, [r1]
 8007b1e:	ec49 8b16 	vmov	d6, r8, r9
 8007b22:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b26:	ec59 8b17 	vmov	r8, r9, d7
 8007b2a:	1112      	asrs	r2, r2, #4
 8007b2c:	d0d9      	beq.n	8007ae2 <_strtod_l+0x52a>
 8007b2e:	2a1f      	cmp	r2, #31
 8007b30:	dd1e      	ble.n	8007b70 <_strtod_l+0x5b8>
 8007b32:	2500      	movs	r5, #0
 8007b34:	462e      	mov	r6, r5
 8007b36:	950a      	str	r5, [sp, #40]	; 0x28
 8007b38:	462f      	mov	r7, r5
 8007b3a:	2322      	movs	r3, #34	; 0x22
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	f04f 0900 	mov.w	r9, #0
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	e789      	b.n	8007a5c <_strtod_l+0x4a4>
 8007b48:	0800ba59 	.word	0x0800ba59
 8007b4c:	0800ba98 	.word	0x0800ba98
 8007b50:	0800ba51 	.word	0x0800ba51
 8007b54:	0800bbdc 	.word	0x0800bbdc
 8007b58:	0800beb3 	.word	0x0800beb3
 8007b5c:	0800bd78 	.word	0x0800bd78
 8007b60:	0800bd50 	.word	0x0800bd50
 8007b64:	7ca00000 	.word	0x7ca00000
 8007b68:	7ff00000 	.word	0x7ff00000
 8007b6c:	7fefffff 	.word	0x7fefffff
 8007b70:	f012 0110 	ands.w	r1, r2, #16
 8007b74:	bf18      	it	ne
 8007b76:	216a      	movne	r1, #106	; 0x6a
 8007b78:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007b7c:	9104      	str	r1, [sp, #16]
 8007b7e:	49c0      	ldr	r1, [pc, #768]	; (8007e80 <_strtod_l+0x8c8>)
 8007b80:	2000      	movs	r0, #0
 8007b82:	07d7      	lsls	r7, r2, #31
 8007b84:	d508      	bpl.n	8007b98 <_strtod_l+0x5e0>
 8007b86:	ed9d 6b08 	vldr	d6, [sp, #32]
 8007b8a:	ed91 7b00 	vldr	d7, [r1]
 8007b8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007b92:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007b96:	2001      	movs	r0, #1
 8007b98:	1052      	asrs	r2, r2, #1
 8007b9a:	f101 0108 	add.w	r1, r1, #8
 8007b9e:	d1f0      	bne.n	8007b82 <_strtod_l+0x5ca>
 8007ba0:	b108      	cbz	r0, 8007ba6 <_strtod_l+0x5ee>
 8007ba2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007ba6:	9a04      	ldr	r2, [sp, #16]
 8007ba8:	b1ba      	cbz	r2, 8007bda <_strtod_l+0x622>
 8007baa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007bae:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	dd10      	ble.n	8007bda <_strtod_l+0x622>
 8007bb8:	2a1f      	cmp	r2, #31
 8007bba:	f340 8132 	ble.w	8007e22 <_strtod_l+0x86a>
 8007bbe:	2a34      	cmp	r2, #52	; 0x34
 8007bc0:	bfde      	ittt	le
 8007bc2:	3a20      	suble	r2, #32
 8007bc4:	f04f 30ff 	movle.w	r0, #4294967295
 8007bc8:	fa00 f202 	lslle.w	r2, r0, r2
 8007bcc:	f04f 0800 	mov.w	r8, #0
 8007bd0:	bfcc      	ite	gt
 8007bd2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007bd6:	ea02 0901 	andle.w	r9, r2, r1
 8007bda:	ec49 8b17 	vmov	d7, r8, r9
 8007bde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be6:	d0a4      	beq.n	8007b32 <_strtod_l+0x57a>
 8007be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bea:	9200      	str	r2, [sp, #0]
 8007bec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bee:	4632      	mov	r2, r6
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f001 fdcd 	bl	8009790 <__s2b>
 8007bf6:	900a      	str	r0, [sp, #40]	; 0x28
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f43f af25 	beq.w	8007a48 <_strtod_l+0x490>
 8007bfe:	9b06      	ldr	r3, [sp, #24]
 8007c00:	ebab 0505 	sub.w	r5, fp, r5
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfb4      	ite	lt
 8007c08:	462b      	movlt	r3, r5
 8007c0a:	2300      	movge	r3, #0
 8007c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c0e:	9b06      	ldr	r3, [sp, #24]
 8007c10:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007e68 <_strtod_l+0x8b0>
 8007c14:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007e70 <_strtod_l+0x8b8>
 8007c18:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007e78 <_strtod_l+0x8c0>
 8007c1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c20:	2500      	movs	r5, #0
 8007c22:	9312      	str	r3, [sp, #72]	; 0x48
 8007c24:	462e      	mov	r6, r5
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	4620      	mov	r0, r4
 8007c2a:	6859      	ldr	r1, [r3, #4]
 8007c2c:	f001 fd04 	bl	8009638 <_Balloc>
 8007c30:	4607      	mov	r7, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f43f af0c 	beq.w	8007a50 <_strtod_l+0x498>
 8007c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	3202      	adds	r2, #2
 8007c3e:	f103 010c 	add.w	r1, r3, #12
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	300c      	adds	r0, #12
 8007c46:	f001 fce9 	bl	800961c <memcpy>
 8007c4a:	ec49 8b10 	vmov	d0, r8, r9
 8007c4e:	aa1a      	add	r2, sp, #104	; 0x68
 8007c50:	a919      	add	r1, sp, #100	; 0x64
 8007c52:	4620      	mov	r0, r4
 8007c54:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007c58:	f002 f8d6 	bl	8009e08 <__d2b>
 8007c5c:	9018      	str	r0, [sp, #96]	; 0x60
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f43f aef6 	beq.w	8007a50 <_strtod_l+0x498>
 8007c64:	2101      	movs	r1, #1
 8007c66:	4620      	mov	r0, r4
 8007c68:	f001 fe2c 	bl	80098c4 <__i2b>
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f43f aeee 	beq.w	8007a50 <_strtod_l+0x498>
 8007c74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bfab      	itete	ge
 8007c7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007c7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007c80:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007c84:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007c88:	bfac      	ite	ge
 8007c8a:	eb03 0b02 	addge.w	fp, r3, r2
 8007c8e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007c92:	9a04      	ldr	r2, [sp, #16]
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	440b      	add	r3, r1
 8007c98:	4a7a      	ldr	r2, [pc, #488]	; (8007e84 <_strtod_l+0x8cc>)
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007ca2:	f280 80d1 	bge.w	8007e48 <_strtod_l+0x890>
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	2a1f      	cmp	r2, #31
 8007caa:	eba1 0102 	sub.w	r1, r1, r2
 8007cae:	f04f 0001 	mov.w	r0, #1
 8007cb2:	f300 80bd 	bgt.w	8007e30 <_strtod_l+0x878>
 8007cb6:	fa00 f302 	lsl.w	r3, r0, r2
 8007cba:	930e      	str	r3, [sp, #56]	; 0x38
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007cc0:	eb0b 0301 	add.w	r3, fp, r1
 8007cc4:	9a04      	ldr	r2, [sp, #16]
 8007cc6:	459b      	cmp	fp, r3
 8007cc8:	448a      	add	sl, r1
 8007cca:	4492      	add	sl, r2
 8007ccc:	465a      	mov	r2, fp
 8007cce:	bfa8      	it	ge
 8007cd0:	461a      	movge	r2, r3
 8007cd2:	4552      	cmp	r2, sl
 8007cd4:	bfa8      	it	ge
 8007cd6:	4652      	movge	r2, sl
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	bfc2      	ittt	gt
 8007cdc:	1a9b      	subgt	r3, r3, r2
 8007cde:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007ce2:	ebab 0b02 	subgt.w	fp, fp, r2
 8007ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	dd18      	ble.n	8007d1e <_strtod_l+0x766>
 8007cec:	4631      	mov	r1, r6
 8007cee:	4620      	mov	r0, r4
 8007cf0:	9315      	str	r3, [sp, #84]	; 0x54
 8007cf2:	f001 fea3 	bl	8009a3c <__pow5mult>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f43f aea9 	beq.w	8007a50 <_strtod_l+0x498>
 8007cfe:	4601      	mov	r1, r0
 8007d00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d02:	4620      	mov	r0, r4
 8007d04:	f001 fdf4 	bl	80098f0 <__multiply>
 8007d08:	9014      	str	r0, [sp, #80]	; 0x50
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f43f aea0 	beq.w	8007a50 <_strtod_l+0x498>
 8007d10:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d12:	4620      	mov	r0, r4
 8007d14:	f001 fcd0 	bl	80096b8 <_Bfree>
 8007d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d1c:	9218      	str	r2, [sp, #96]	; 0x60
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f300 8097 	bgt.w	8007e52 <_strtod_l+0x89a>
 8007d24:	9b06      	ldr	r3, [sp, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	dd08      	ble.n	8007d3c <_strtod_l+0x784>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f001 fe84 	bl	8009a3c <__pow5mult>
 8007d34:	4607      	mov	r7, r0
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f43f ae8a 	beq.w	8007a50 <_strtod_l+0x498>
 8007d3c:	f1ba 0f00 	cmp.w	sl, #0
 8007d40:	dd08      	ble.n	8007d54 <_strtod_l+0x79c>
 8007d42:	4639      	mov	r1, r7
 8007d44:	4652      	mov	r2, sl
 8007d46:	4620      	mov	r0, r4
 8007d48:	f001 fed2 	bl	8009af0 <__lshift>
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	f43f ae7e 	beq.w	8007a50 <_strtod_l+0x498>
 8007d54:	f1bb 0f00 	cmp.w	fp, #0
 8007d58:	dd08      	ble.n	8007d6c <_strtod_l+0x7b4>
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	465a      	mov	r2, fp
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f001 fec6 	bl	8009af0 <__lshift>
 8007d64:	4606      	mov	r6, r0
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f43f ae72 	beq.w	8007a50 <_strtod_l+0x498>
 8007d6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d6e:	463a      	mov	r2, r7
 8007d70:	4620      	mov	r0, r4
 8007d72:	f001 ff45 	bl	8009c00 <__mdiff>
 8007d76:	4605      	mov	r5, r0
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f43f ae69 	beq.w	8007a50 <_strtod_l+0x498>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007d84:	60c3      	str	r3, [r0, #12]
 8007d86:	4631      	mov	r1, r6
 8007d88:	f001 ff1e 	bl	8009bc8 <__mcmp>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	da7f      	bge.n	8007e90 <_strtod_l+0x8d8>
 8007d90:	ea5a 0308 	orrs.w	r3, sl, r8
 8007d94:	f040 80a5 	bne.w	8007ee2 <_strtod_l+0x92a>
 8007d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 80a0 	bne.w	8007ee2 <_strtod_l+0x92a>
 8007da2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007da6:	0d1b      	lsrs	r3, r3, #20
 8007da8:	051b      	lsls	r3, r3, #20
 8007daa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dae:	f240 8098 	bls.w	8007ee2 <_strtod_l+0x92a>
 8007db2:	696b      	ldr	r3, [r5, #20]
 8007db4:	b91b      	cbnz	r3, 8007dbe <_strtod_l+0x806>
 8007db6:	692b      	ldr	r3, [r5, #16]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	f340 8092 	ble.w	8007ee2 <_strtod_l+0x92a>
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f001 fe94 	bl	8009af0 <__lshift>
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4605      	mov	r5, r0
 8007dcc:	f001 fefc 	bl	8009bc8 <__mcmp>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	f340 8086 	ble.w	8007ee2 <_strtod_l+0x92a>
 8007dd6:	9904      	ldr	r1, [sp, #16]
 8007dd8:	4a2b      	ldr	r2, [pc, #172]	; (8007e88 <_strtod_l+0x8d0>)
 8007dda:	464b      	mov	r3, r9
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	f000 80a1 	beq.w	8007f24 <_strtod_l+0x96c>
 8007de2:	ea02 0109 	and.w	r1, r2, r9
 8007de6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007dea:	f300 809b 	bgt.w	8007f24 <_strtod_l+0x96c>
 8007dee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007df2:	f77f aea2 	ble.w	8007b3a <_strtod_l+0x582>
 8007df6:	4a25      	ldr	r2, [pc, #148]	; (8007e8c <_strtod_l+0x8d4>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007dfe:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007e02:	ec49 8b17 	vmov	d7, r8, r9
 8007e06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e0e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	bf08      	it	eq
 8007e16:	2322      	moveq	r3, #34	; 0x22
 8007e18:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007e1c:	bf08      	it	eq
 8007e1e:	6023      	streq	r3, [r4, #0]
 8007e20:	e620      	b.n	8007a64 <_strtod_l+0x4ac>
 8007e22:	f04f 31ff 	mov.w	r1, #4294967295
 8007e26:	fa01 f202 	lsl.w	r2, r1, r2
 8007e2a:	ea02 0808 	and.w	r8, r2, r8
 8007e2e:	e6d4      	b.n	8007bda <_strtod_l+0x622>
 8007e30:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007e34:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007e38:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007e3c:	33e2      	adds	r3, #226	; 0xe2
 8007e3e:	fa00 f303 	lsl.w	r3, r0, r3
 8007e42:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8007e46:	e73b      	b.n	8007cc0 <_strtod_l+0x708>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8007e50:	e736      	b.n	8007cc0 <_strtod_l+0x708>
 8007e52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e54:	461a      	mov	r2, r3
 8007e56:	4620      	mov	r0, r4
 8007e58:	f001 fe4a 	bl	8009af0 <__lshift>
 8007e5c:	9018      	str	r0, [sp, #96]	; 0x60
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f47f af60 	bne.w	8007d24 <_strtod_l+0x76c>
 8007e64:	e5f4      	b.n	8007a50 <_strtod_l+0x498>
 8007e66:	bf00      	nop
 8007e68:	94a03595 	.word	0x94a03595
 8007e6c:	3fcfffff 	.word	0x3fcfffff
 8007e70:	94a03595 	.word	0x94a03595
 8007e74:	3fdfffff 	.word	0x3fdfffff
 8007e78:	35afe535 	.word	0x35afe535
 8007e7c:	3fe00000 	.word	0x3fe00000
 8007e80:	0800bab0 	.word	0x0800bab0
 8007e84:	fffffc02 	.word	0xfffffc02
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	39500000 	.word	0x39500000
 8007e90:	46cb      	mov	fp, r9
 8007e92:	d165      	bne.n	8007f60 <_strtod_l+0x9a8>
 8007e94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e98:	f1ba 0f00 	cmp.w	sl, #0
 8007e9c:	d02a      	beq.n	8007ef4 <_strtod_l+0x93c>
 8007e9e:	4aaa      	ldr	r2, [pc, #680]	; (8008148 <_strtod_l+0xb90>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d12b      	bne.n	8007efc <_strtod_l+0x944>
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	b1fb      	cbz	r3, 8007eea <_strtod_l+0x932>
 8007eaa:	4aa8      	ldr	r2, [pc, #672]	; (800814c <_strtod_l+0xb94>)
 8007eac:	ea09 0202 	and.w	r2, r9, r2
 8007eb0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	d81a      	bhi.n	8007ef0 <_strtod_l+0x938>
 8007eba:	0d12      	lsrs	r2, r2, #20
 8007ebc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ec0:	fa00 f303 	lsl.w	r3, r0, r3
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	d119      	bne.n	8007efc <_strtod_l+0x944>
 8007ec8:	4ba1      	ldr	r3, [pc, #644]	; (8008150 <_strtod_l+0xb98>)
 8007eca:	459b      	cmp	fp, r3
 8007ecc:	d102      	bne.n	8007ed4 <_strtod_l+0x91c>
 8007ece:	3101      	adds	r1, #1
 8007ed0:	f43f adbe 	beq.w	8007a50 <_strtod_l+0x498>
 8007ed4:	4b9d      	ldr	r3, [pc, #628]	; (800814c <_strtod_l+0xb94>)
 8007ed6:	ea0b 0303 	and.w	r3, fp, r3
 8007eda:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007ede:	f04f 0800 	mov.w	r8, #0
 8007ee2:	9b04      	ldr	r3, [sp, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d186      	bne.n	8007df6 <_strtod_l+0x83e>
 8007ee8:	e5bc      	b.n	8007a64 <_strtod_l+0x4ac>
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
 8007eee:	e7e9      	b.n	8007ec4 <_strtod_l+0x90c>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	e7e7      	b.n	8007ec4 <_strtod_l+0x90c>
 8007ef4:	ea53 0308 	orrs.w	r3, r3, r8
 8007ef8:	f43f af6d 	beq.w	8007dd6 <_strtod_l+0x81e>
 8007efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007efe:	b1db      	cbz	r3, 8007f38 <_strtod_l+0x980>
 8007f00:	ea13 0f0b 	tst.w	r3, fp
 8007f04:	d0ed      	beq.n	8007ee2 <_strtod_l+0x92a>
 8007f06:	9a04      	ldr	r2, [sp, #16]
 8007f08:	4640      	mov	r0, r8
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	f1ba 0f00 	cmp.w	sl, #0
 8007f10:	d016      	beq.n	8007f40 <_strtod_l+0x988>
 8007f12:	f7ff fb37 	bl	8007584 <sulp>
 8007f16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007f1a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8007f1e:	ec59 8b17 	vmov	r8, r9, d7
 8007f22:	e7de      	b.n	8007ee2 <_strtod_l+0x92a>
 8007f24:	4013      	ands	r3, r2
 8007f26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f2a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007f2e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007f32:	f04f 38ff 	mov.w	r8, #4294967295
 8007f36:	e7d4      	b.n	8007ee2 <_strtod_l+0x92a>
 8007f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f3a:	ea13 0f08 	tst.w	r3, r8
 8007f3e:	e7e1      	b.n	8007f04 <_strtod_l+0x94c>
 8007f40:	f7ff fb20 	bl	8007584 <sulp>
 8007f44:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007f48:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007f4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f58:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007f5c:	d1c1      	bne.n	8007ee2 <_strtod_l+0x92a>
 8007f5e:	e5ec      	b.n	8007b3a <_strtod_l+0x582>
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	f001 ffac 	bl	8009ec0 <__ratio>
 8007f68:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007f6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f74:	d867      	bhi.n	8008046 <_strtod_l+0xa8e>
 8007f76:	f1ba 0f00 	cmp.w	sl, #0
 8007f7a:	d044      	beq.n	8008006 <_strtod_l+0xa4e>
 8007f7c:	4b75      	ldr	r3, [pc, #468]	; (8008154 <_strtod_l+0xb9c>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007f84:	4971      	ldr	r1, [pc, #452]	; (800814c <_strtod_l+0xb94>)
 8007f86:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008160 <_strtod_l+0xba8>
 8007f8a:	ea0b 0001 	and.w	r0, fp, r1
 8007f8e:	4560      	cmp	r0, ip
 8007f90:	900d      	str	r0, [sp, #52]	; 0x34
 8007f92:	f040 808b 	bne.w	80080ac <_strtod_l+0xaf4>
 8007f96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f9a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007f9e:	ec49 8b10 	vmov	d0, r8, r9
 8007fa2:	ec43 2b1c 	vmov	d12, r2, r3
 8007fa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007faa:	f001 feb1 	bl	8009d10 <__ulp>
 8007fae:	ec49 8b1d 	vmov	d13, r8, r9
 8007fb2:	eeac db00 	vfma.f64	d13, d12, d0
 8007fb6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fbc:	4963      	ldr	r1, [pc, #396]	; (800814c <_strtod_l+0xb94>)
 8007fbe:	4a66      	ldr	r2, [pc, #408]	; (8008158 <_strtod_l+0xba0>)
 8007fc0:	4019      	ands	r1, r3
 8007fc2:	4291      	cmp	r1, r2
 8007fc4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007fc8:	d947      	bls.n	800805a <_strtod_l+0xaa2>
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d103      	bne.n	8007fdc <_strtod_l+0xa24>
 8007fd4:	9b08      	ldr	r3, [sp, #32]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	f43f ad3a 	beq.w	8007a50 <_strtod_l+0x498>
 8007fdc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8008150 <_strtod_l+0xb98>
 8007fe0:	f04f 38ff 	mov.w	r8, #4294967295
 8007fe4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f001 fb66 	bl	80096b8 <_Bfree>
 8007fec:	4639      	mov	r1, r7
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f001 fb62 	bl	80096b8 <_Bfree>
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f001 fb5e 	bl	80096b8 <_Bfree>
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	4620      	mov	r0, r4
 8008000:	f001 fb5a 	bl	80096b8 <_Bfree>
 8008004:	e60f      	b.n	8007c26 <_strtod_l+0x66e>
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	d112      	bne.n	8008032 <_strtod_l+0xa7a>
 800800c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008010:	b9b3      	cbnz	r3, 8008040 <_strtod_l+0xa88>
 8008012:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008016:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008022:	d401      	bmi.n	8008028 <_strtod_l+0xa70>
 8008024:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008028:	eeb1 7b48 	vneg.f64	d7, d8
 800802c:	ec53 2b17 	vmov	r2, r3, d7
 8008030:	e7a8      	b.n	8007f84 <_strtod_l+0x9cc>
 8008032:	f1b8 0f01 	cmp.w	r8, #1
 8008036:	d103      	bne.n	8008040 <_strtod_l+0xa88>
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	f43f ad7d 	beq.w	8007b3a <_strtod_l+0x582>
 8008040:	4b46      	ldr	r3, [pc, #280]	; (800815c <_strtod_l+0xba4>)
 8008042:	2200      	movs	r2, #0
 8008044:	e79c      	b.n	8007f80 <_strtod_l+0x9c8>
 8008046:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800804a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800804e:	f1ba 0f00 	cmp.w	sl, #0
 8008052:	d0e9      	beq.n	8008028 <_strtod_l+0xa70>
 8008054:	ec53 2b18 	vmov	r2, r3, d8
 8008058:	e794      	b.n	8007f84 <_strtod_l+0x9cc>
 800805a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1bf      	bne.n	8007fe4 <_strtod_l+0xa2c>
 8008064:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008068:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800806a:	0d1b      	lsrs	r3, r3, #20
 800806c:	051b      	lsls	r3, r3, #20
 800806e:	429a      	cmp	r2, r3
 8008070:	d1b8      	bne.n	8007fe4 <_strtod_l+0xa2c>
 8008072:	ec51 0b18 	vmov	r0, r1, d8
 8008076:	f7f8 fb1f 	bl	80006b8 <__aeabi_d2lz>
 800807a:	f7f8 fad7 	bl	800062c <__aeabi_l2d>
 800807e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008082:	ec41 0b17 	vmov	d7, r0, r1
 8008086:	ea43 0308 	orr.w	r3, r3, r8
 800808a:	ea53 030a 	orrs.w	r3, r3, sl
 800808e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008092:	d03e      	beq.n	8008112 <_strtod_l+0xb5a>
 8008094:	eeb4 8bca 	vcmpe.f64	d8, d10
 8008098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809c:	f53f ace2 	bmi.w	8007a64 <_strtod_l+0x4ac>
 80080a0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80080a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a8:	dd9c      	ble.n	8007fe4 <_strtod_l+0xa2c>
 80080aa:	e4db      	b.n	8007a64 <_strtod_l+0x4ac>
 80080ac:	9904      	ldr	r1, [sp, #16]
 80080ae:	b301      	cbz	r1, 80080f2 <_strtod_l+0xb3a>
 80080b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080b2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80080b6:	d81c      	bhi.n	80080f2 <_strtod_l+0xb3a>
 80080b8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008140 <_strtod_l+0xb88>
 80080bc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80080c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c4:	d811      	bhi.n	80080ea <_strtod_l+0xb32>
 80080c6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80080ca:	ee18 3a10 	vmov	r3, s16
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	bf38      	it	cc
 80080d2:	2301      	movcc	r3, #1
 80080d4:	ee08 3a10 	vmov	s16, r3
 80080d8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80080dc:	f1ba 0f00 	cmp.w	sl, #0
 80080e0:	d114      	bne.n	800810c <_strtod_l+0xb54>
 80080e2:	eeb1 7b48 	vneg.f64	d7, d8
 80080e6:	ec53 2b17 	vmov	r2, r3, d7
 80080ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80080ec:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80080f0:	1a0b      	subs	r3, r1, r0
 80080f2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80080f6:	ec43 2b1c 	vmov	d12, r2, r3
 80080fa:	f001 fe09 	bl	8009d10 <__ulp>
 80080fe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008102:	eeac 7b00 	vfma.f64	d7, d12, d0
 8008106:	ec59 8b17 	vmov	r8, r9, d7
 800810a:	e7a8      	b.n	800805e <_strtod_l+0xaa6>
 800810c:	ec53 2b18 	vmov	r2, r3, d8
 8008110:	e7eb      	b.n	80080ea <_strtod_l+0xb32>
 8008112:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8008116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811a:	f57f af63 	bpl.w	8007fe4 <_strtod_l+0xa2c>
 800811e:	e4a1      	b.n	8007a64 <_strtod_l+0x4ac>
 8008120:	2300      	movs	r3, #0
 8008122:	930b      	str	r3, [sp, #44]	; 0x2c
 8008124:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	f7ff ba8d 	b.w	8007648 <_strtod_l+0x90>
 800812e:	2a65      	cmp	r2, #101	; 0x65
 8008130:	f43f ab89 	beq.w	8007846 <_strtod_l+0x28e>
 8008134:	2a45      	cmp	r2, #69	; 0x45
 8008136:	f43f ab86 	beq.w	8007846 <_strtod_l+0x28e>
 800813a:	2101      	movs	r1, #1
 800813c:	f7ff bbbe 	b.w	80078bc <_strtod_l+0x304>
 8008140:	ffc00000 	.word	0xffc00000
 8008144:	41dfffff 	.word	0x41dfffff
 8008148:	000fffff 	.word	0x000fffff
 800814c:	7ff00000 	.word	0x7ff00000
 8008150:	7fefffff 	.word	0x7fefffff
 8008154:	3ff00000 	.word	0x3ff00000
 8008158:	7c9fffff 	.word	0x7c9fffff
 800815c:	bff00000 	.word	0xbff00000
 8008160:	7fe00000 	.word	0x7fe00000

08008164 <_strtod_r>:
 8008164:	4b01      	ldr	r3, [pc, #4]	; (800816c <_strtod_r+0x8>)
 8008166:	f7ff ba27 	b.w	80075b8 <_strtod_l>
 800816a:	bf00      	nop
 800816c:	20000110 	.word	0x20000110

08008170 <_strtol_l.isra.0>:
 8008170:	2b01      	cmp	r3, #1
 8008172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008176:	d001      	beq.n	800817c <_strtol_l.isra.0+0xc>
 8008178:	2b24      	cmp	r3, #36	; 0x24
 800817a:	d906      	bls.n	800818a <_strtol_l.isra.0+0x1a>
 800817c:	f7fe fac4 	bl	8006708 <__errno>
 8008180:	2316      	movs	r3, #22
 8008182:	6003      	str	r3, [r0, #0]
 8008184:	2000      	movs	r0, #0
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	4f3a      	ldr	r7, [pc, #232]	; (8008274 <_strtol_l.isra.0+0x104>)
 800818c:	468e      	mov	lr, r1
 800818e:	4676      	mov	r6, lr
 8008190:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008194:	5de5      	ldrb	r5, [r4, r7]
 8008196:	f015 0508 	ands.w	r5, r5, #8
 800819a:	d1f8      	bne.n	800818e <_strtol_l.isra.0+0x1e>
 800819c:	2c2d      	cmp	r4, #45	; 0x2d
 800819e:	d134      	bne.n	800820a <_strtol_l.isra.0+0x9a>
 80081a0:	f89e 4000 	ldrb.w	r4, [lr]
 80081a4:	f04f 0801 	mov.w	r8, #1
 80081a8:	f106 0e02 	add.w	lr, r6, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d05c      	beq.n	800826a <_strtol_l.isra.0+0xfa>
 80081b0:	2b10      	cmp	r3, #16
 80081b2:	d10c      	bne.n	80081ce <_strtol_l.isra.0+0x5e>
 80081b4:	2c30      	cmp	r4, #48	; 0x30
 80081b6:	d10a      	bne.n	80081ce <_strtol_l.isra.0+0x5e>
 80081b8:	f89e 4000 	ldrb.w	r4, [lr]
 80081bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80081c0:	2c58      	cmp	r4, #88	; 0x58
 80081c2:	d14d      	bne.n	8008260 <_strtol_l.isra.0+0xf0>
 80081c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80081c8:	2310      	movs	r3, #16
 80081ca:	f10e 0e02 	add.w	lr, lr, #2
 80081ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80081d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081d6:	2600      	movs	r6, #0
 80081d8:	fbbc f9f3 	udiv	r9, ip, r3
 80081dc:	4635      	mov	r5, r6
 80081de:	fb03 ca19 	mls	sl, r3, r9, ip
 80081e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80081e6:	2f09      	cmp	r7, #9
 80081e8:	d818      	bhi.n	800821c <_strtol_l.isra.0+0xac>
 80081ea:	463c      	mov	r4, r7
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	dd24      	ble.n	800823a <_strtol_l.isra.0+0xca>
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	db1f      	blt.n	8008234 <_strtol_l.isra.0+0xc4>
 80081f4:	45a9      	cmp	r9, r5
 80081f6:	d31d      	bcc.n	8008234 <_strtol_l.isra.0+0xc4>
 80081f8:	d101      	bne.n	80081fe <_strtol_l.isra.0+0x8e>
 80081fa:	45a2      	cmp	sl, r4
 80081fc:	db1a      	blt.n	8008234 <_strtol_l.isra.0+0xc4>
 80081fe:	fb05 4503 	mla	r5, r5, r3, r4
 8008202:	2601      	movs	r6, #1
 8008204:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008208:	e7eb      	b.n	80081e2 <_strtol_l.isra.0+0x72>
 800820a:	2c2b      	cmp	r4, #43	; 0x2b
 800820c:	bf08      	it	eq
 800820e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008212:	46a8      	mov	r8, r5
 8008214:	bf08      	it	eq
 8008216:	f106 0e02 	addeq.w	lr, r6, #2
 800821a:	e7c7      	b.n	80081ac <_strtol_l.isra.0+0x3c>
 800821c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008220:	2f19      	cmp	r7, #25
 8008222:	d801      	bhi.n	8008228 <_strtol_l.isra.0+0xb8>
 8008224:	3c37      	subs	r4, #55	; 0x37
 8008226:	e7e1      	b.n	80081ec <_strtol_l.isra.0+0x7c>
 8008228:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800822c:	2f19      	cmp	r7, #25
 800822e:	d804      	bhi.n	800823a <_strtol_l.isra.0+0xca>
 8008230:	3c57      	subs	r4, #87	; 0x57
 8008232:	e7db      	b.n	80081ec <_strtol_l.isra.0+0x7c>
 8008234:	f04f 36ff 	mov.w	r6, #4294967295
 8008238:	e7e4      	b.n	8008204 <_strtol_l.isra.0+0x94>
 800823a:	2e00      	cmp	r6, #0
 800823c:	da05      	bge.n	800824a <_strtol_l.isra.0+0xda>
 800823e:	2322      	movs	r3, #34	; 0x22
 8008240:	6003      	str	r3, [r0, #0]
 8008242:	4665      	mov	r5, ip
 8008244:	b942      	cbnz	r2, 8008258 <_strtol_l.isra.0+0xe8>
 8008246:	4628      	mov	r0, r5
 8008248:	e79d      	b.n	8008186 <_strtol_l.isra.0+0x16>
 800824a:	f1b8 0f00 	cmp.w	r8, #0
 800824e:	d000      	beq.n	8008252 <_strtol_l.isra.0+0xe2>
 8008250:	426d      	negs	r5, r5
 8008252:	2a00      	cmp	r2, #0
 8008254:	d0f7      	beq.n	8008246 <_strtol_l.isra.0+0xd6>
 8008256:	b10e      	cbz	r6, 800825c <_strtol_l.isra.0+0xec>
 8008258:	f10e 31ff 	add.w	r1, lr, #4294967295
 800825c:	6011      	str	r1, [r2, #0]
 800825e:	e7f2      	b.n	8008246 <_strtol_l.isra.0+0xd6>
 8008260:	2430      	movs	r4, #48	; 0x30
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1b3      	bne.n	80081ce <_strtol_l.isra.0+0x5e>
 8008266:	2308      	movs	r3, #8
 8008268:	e7b1      	b.n	80081ce <_strtol_l.isra.0+0x5e>
 800826a:	2c30      	cmp	r4, #48	; 0x30
 800826c:	d0a4      	beq.n	80081b8 <_strtol_l.isra.0+0x48>
 800826e:	230a      	movs	r3, #10
 8008270:	e7ad      	b.n	80081ce <_strtol_l.isra.0+0x5e>
 8008272:	bf00      	nop
 8008274:	0800bad9 	.word	0x0800bad9

08008278 <_strtol_r>:
 8008278:	f7ff bf7a 	b.w	8008170 <_strtol_l.isra.0>

0800827c <_write_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d07      	ldr	r5, [pc, #28]	; (800829c <_write_r+0x20>)
 8008280:	4604      	mov	r4, r0
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	2200      	movs	r2, #0
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f7f9 fa9f 	bl	80017ce <_write>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_write_r+0x1e>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_write_r+0x1e>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20000618 	.word	0x20000618

080082a0 <_close_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d06      	ldr	r5, [pc, #24]	; (80082bc <_close_r+0x1c>)
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	602b      	str	r3, [r5, #0]
 80082ac:	f7f9 faab 	bl	8001806 <_close>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <_close_r+0x1a>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	b103      	cbz	r3, 80082ba <_close_r+0x1a>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	20000618 	.word	0x20000618

080082c0 <quorem>:
 80082c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	6903      	ldr	r3, [r0, #16]
 80082c6:	690c      	ldr	r4, [r1, #16]
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	4607      	mov	r7, r0
 80082cc:	f2c0 8081 	blt.w	80083d2 <quorem+0x112>
 80082d0:	3c01      	subs	r4, #1
 80082d2:	f101 0814 	add.w	r8, r1, #20
 80082d6:	f100 0514 	add.w	r5, r0, #20
 80082da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082e8:	3301      	adds	r3, #1
 80082ea:	429a      	cmp	r2, r3
 80082ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082f8:	d331      	bcc.n	800835e <quorem+0x9e>
 80082fa:	f04f 0e00 	mov.w	lr, #0
 80082fe:	4640      	mov	r0, r8
 8008300:	46ac      	mov	ip, r5
 8008302:	46f2      	mov	sl, lr
 8008304:	f850 2b04 	ldr.w	r2, [r0], #4
 8008308:	b293      	uxth	r3, r2
 800830a:	fb06 e303 	mla	r3, r6, r3, lr
 800830e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008312:	b29b      	uxth	r3, r3
 8008314:	ebaa 0303 	sub.w	r3, sl, r3
 8008318:	0c12      	lsrs	r2, r2, #16
 800831a:	f8dc a000 	ldr.w	sl, [ip]
 800831e:	fb06 e202 	mla	r2, r6, r2, lr
 8008322:	fa13 f38a 	uxtah	r3, r3, sl
 8008326:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800832a:	fa1f fa82 	uxth.w	sl, r2
 800832e:	f8dc 2000 	ldr.w	r2, [ip]
 8008332:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008336:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800833a:	b29b      	uxth	r3, r3
 800833c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008340:	4581      	cmp	r9, r0
 8008342:	f84c 3b04 	str.w	r3, [ip], #4
 8008346:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800834a:	d2db      	bcs.n	8008304 <quorem+0x44>
 800834c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008350:	b92b      	cbnz	r3, 800835e <quorem+0x9e>
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	3b04      	subs	r3, #4
 8008356:	429d      	cmp	r5, r3
 8008358:	461a      	mov	r2, r3
 800835a:	d32e      	bcc.n	80083ba <quorem+0xfa>
 800835c:	613c      	str	r4, [r7, #16]
 800835e:	4638      	mov	r0, r7
 8008360:	f001 fc32 	bl	8009bc8 <__mcmp>
 8008364:	2800      	cmp	r0, #0
 8008366:	db24      	blt.n	80083b2 <quorem+0xf2>
 8008368:	3601      	adds	r6, #1
 800836a:	4628      	mov	r0, r5
 800836c:	f04f 0c00 	mov.w	ip, #0
 8008370:	f858 2b04 	ldr.w	r2, [r8], #4
 8008374:	f8d0 e000 	ldr.w	lr, [r0]
 8008378:	b293      	uxth	r3, r2
 800837a:	ebac 0303 	sub.w	r3, ip, r3
 800837e:	0c12      	lsrs	r2, r2, #16
 8008380:	fa13 f38e 	uxtah	r3, r3, lr
 8008384:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008392:	45c1      	cmp	r9, r8
 8008394:	f840 3b04 	str.w	r3, [r0], #4
 8008398:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800839c:	d2e8      	bcs.n	8008370 <quorem+0xb0>
 800839e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083a6:	b922      	cbnz	r2, 80083b2 <quorem+0xf2>
 80083a8:	3b04      	subs	r3, #4
 80083aa:	429d      	cmp	r5, r3
 80083ac:	461a      	mov	r2, r3
 80083ae:	d30a      	bcc.n	80083c6 <quorem+0x106>
 80083b0:	613c      	str	r4, [r7, #16]
 80083b2:	4630      	mov	r0, r6
 80083b4:	b003      	add	sp, #12
 80083b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ba:	6812      	ldr	r2, [r2, #0]
 80083bc:	3b04      	subs	r3, #4
 80083be:	2a00      	cmp	r2, #0
 80083c0:	d1cc      	bne.n	800835c <quorem+0x9c>
 80083c2:	3c01      	subs	r4, #1
 80083c4:	e7c7      	b.n	8008356 <quorem+0x96>
 80083c6:	6812      	ldr	r2, [r2, #0]
 80083c8:	3b04      	subs	r3, #4
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	d1f0      	bne.n	80083b0 <quorem+0xf0>
 80083ce:	3c01      	subs	r4, #1
 80083d0:	e7eb      	b.n	80083aa <quorem+0xea>
 80083d2:	2000      	movs	r0, #0
 80083d4:	e7ee      	b.n	80083b4 <quorem+0xf4>
	...

080083d8 <_dtoa_r>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	ec59 8b10 	vmov	r8, r9, d0
 80083e0:	b095      	sub	sp, #84	; 0x54
 80083e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083e4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80083e6:	9107      	str	r1, [sp, #28]
 80083e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80083ec:	4606      	mov	r6, r0
 80083ee:	9209      	str	r2, [sp, #36]	; 0x24
 80083f0:	9310      	str	r3, [sp, #64]	; 0x40
 80083f2:	b975      	cbnz	r5, 8008412 <_dtoa_r+0x3a>
 80083f4:	2010      	movs	r0, #16
 80083f6:	f001 f8f7 	bl	80095e8 <malloc>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6270      	str	r0, [r6, #36]	; 0x24
 80083fe:	b920      	cbnz	r0, 800840a <_dtoa_r+0x32>
 8008400:	4bab      	ldr	r3, [pc, #684]	; (80086b0 <_dtoa_r+0x2d8>)
 8008402:	21ea      	movs	r1, #234	; 0xea
 8008404:	48ab      	ldr	r0, [pc, #684]	; (80086b4 <_dtoa_r+0x2dc>)
 8008406:	f002 fc33 	bl	800ac70 <__assert_func>
 800840a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800840e:	6005      	str	r5, [r0, #0]
 8008410:	60c5      	str	r5, [r0, #12]
 8008412:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008414:	6819      	ldr	r1, [r3, #0]
 8008416:	b151      	cbz	r1, 800842e <_dtoa_r+0x56>
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	604a      	str	r2, [r1, #4]
 800841c:	2301      	movs	r3, #1
 800841e:	4093      	lsls	r3, r2
 8008420:	608b      	str	r3, [r1, #8]
 8008422:	4630      	mov	r0, r6
 8008424:	f001 f948 	bl	80096b8 <_Bfree>
 8008428:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	f1b9 0300 	subs.w	r3, r9, #0
 8008432:	bfbb      	ittet	lt
 8008434:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008438:	9303      	strlt	r3, [sp, #12]
 800843a:	2300      	movge	r3, #0
 800843c:	2201      	movlt	r2, #1
 800843e:	bfac      	ite	ge
 8008440:	6023      	strge	r3, [r4, #0]
 8008442:	6022      	strlt	r2, [r4, #0]
 8008444:	4b9c      	ldr	r3, [pc, #624]	; (80086b8 <_dtoa_r+0x2e0>)
 8008446:	9c03      	ldr	r4, [sp, #12]
 8008448:	43a3      	bics	r3, r4
 800844a:	d11a      	bne.n	8008482 <_dtoa_r+0xaa>
 800844c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800844e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008458:	ea53 0308 	orrs.w	r3, r3, r8
 800845c:	f000 8512 	beq.w	8008e84 <_dtoa_r+0xaac>
 8008460:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008462:	b953      	cbnz	r3, 800847a <_dtoa_r+0xa2>
 8008464:	4b95      	ldr	r3, [pc, #596]	; (80086bc <_dtoa_r+0x2e4>)
 8008466:	e01f      	b.n	80084a8 <_dtoa_r+0xd0>
 8008468:	4b95      	ldr	r3, [pc, #596]	; (80086c0 <_dtoa_r+0x2e8>)
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	9800      	ldr	r0, [sp, #0]
 8008474:	b015      	add	sp, #84	; 0x54
 8008476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847a:	4b90      	ldr	r3, [pc, #576]	; (80086bc <_dtoa_r+0x2e4>)
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	3303      	adds	r3, #3
 8008480:	e7f5      	b.n	800846e <_dtoa_r+0x96>
 8008482:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008486:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800848a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008492:	d10b      	bne.n	80084ac <_dtoa_r+0xd4>
 8008494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008496:	2301      	movs	r3, #1
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 84ee 	beq.w	8008e7e <_dtoa_r+0xaa6>
 80084a2:	4888      	ldr	r0, [pc, #544]	; (80086c4 <_dtoa_r+0x2ec>)
 80084a4:	6018      	str	r0, [r3, #0]
 80084a6:	1e43      	subs	r3, r0, #1
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	e7e2      	b.n	8008472 <_dtoa_r+0x9a>
 80084ac:	a913      	add	r1, sp, #76	; 0x4c
 80084ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80084b2:	aa12      	add	r2, sp, #72	; 0x48
 80084b4:	4630      	mov	r0, r6
 80084b6:	f001 fca7 	bl	8009e08 <__d2b>
 80084ba:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80084be:	4605      	mov	r5, r0
 80084c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084c2:	2900      	cmp	r1, #0
 80084c4:	d047      	beq.n	8008556 <_dtoa_r+0x17e>
 80084c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80084c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80084cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084d0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80084d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80084d8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80084dc:	2400      	movs	r4, #0
 80084de:	ec43 2b16 	vmov	d6, r2, r3
 80084e2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80084e6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008698 <_dtoa_r+0x2c0>
 80084ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084ee:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80086a0 <_dtoa_r+0x2c8>
 80084f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80084f6:	eeb0 7b46 	vmov.f64	d7, d6
 80084fa:	ee06 1a90 	vmov	s13, r1
 80084fe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008502:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80086a8 <_dtoa_r+0x2d0>
 8008506:	eea5 7b06 	vfma.f64	d7, d5, d6
 800850a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800850e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008516:	ee16 ba90 	vmov	fp, s13
 800851a:	9411      	str	r4, [sp, #68]	; 0x44
 800851c:	d508      	bpl.n	8008530 <_dtoa_r+0x158>
 800851e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008522:	eeb4 6b47 	vcmp.f64	d6, d7
 8008526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852a:	bf18      	it	ne
 800852c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008530:	f1bb 0f16 	cmp.w	fp, #22
 8008534:	d832      	bhi.n	800859c <_dtoa_r+0x1c4>
 8008536:	4b64      	ldr	r3, [pc, #400]	; (80086c8 <_dtoa_r+0x2f0>)
 8008538:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800853c:	ed93 7b00 	vldr	d7, [r3]
 8008540:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008544:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854c:	d501      	bpl.n	8008552 <_dtoa_r+0x17a>
 800854e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008552:	2300      	movs	r3, #0
 8008554:	e023      	b.n	800859e <_dtoa_r+0x1c6>
 8008556:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008558:	4401      	add	r1, r0
 800855a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800855e:	2b20      	cmp	r3, #32
 8008560:	bfc3      	ittte	gt
 8008562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008566:	fa04 f303 	lslgt.w	r3, r4, r3
 800856a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800856e:	f1c3 0320 	rsble	r3, r3, #32
 8008572:	bfc6      	itte	gt
 8008574:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008578:	ea43 0308 	orrgt.w	r3, r3, r8
 800857c:	fa08 f303 	lslle.w	r3, r8, r3
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008588:	3901      	subs	r1, #1
 800858a:	ed8d 7b00 	vstr	d7, [sp]
 800858e:	9c01      	ldr	r4, [sp, #4]
 8008590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008594:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008598:	2401      	movs	r4, #1
 800859a:	e7a0      	b.n	80084de <_dtoa_r+0x106>
 800859c:	2301      	movs	r3, #1
 800859e:	930f      	str	r3, [sp, #60]	; 0x3c
 80085a0:	1a43      	subs	r3, r0, r1
 80085a2:	1e5a      	subs	r2, r3, #1
 80085a4:	bf45      	ittet	mi
 80085a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80085aa:	9305      	strmi	r3, [sp, #20]
 80085ac:	2300      	movpl	r3, #0
 80085ae:	2300      	movmi	r3, #0
 80085b0:	9206      	str	r2, [sp, #24]
 80085b2:	bf54      	ite	pl
 80085b4:	9305      	strpl	r3, [sp, #20]
 80085b6:	9306      	strmi	r3, [sp, #24]
 80085b8:	f1bb 0f00 	cmp.w	fp, #0
 80085bc:	db18      	blt.n	80085f0 <_dtoa_r+0x218>
 80085be:	9b06      	ldr	r3, [sp, #24]
 80085c0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80085c4:	445b      	add	r3, fp
 80085c6:	9306      	str	r3, [sp, #24]
 80085c8:	2300      	movs	r3, #0
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	2a09      	cmp	r2, #9
 80085ce:	d849      	bhi.n	8008664 <_dtoa_r+0x28c>
 80085d0:	2a05      	cmp	r2, #5
 80085d2:	bfc4      	itt	gt
 80085d4:	3a04      	subgt	r2, #4
 80085d6:	9207      	strgt	r2, [sp, #28]
 80085d8:	9a07      	ldr	r2, [sp, #28]
 80085da:	f1a2 0202 	sub.w	r2, r2, #2
 80085de:	bfcc      	ite	gt
 80085e0:	2400      	movgt	r4, #0
 80085e2:	2401      	movle	r4, #1
 80085e4:	2a03      	cmp	r2, #3
 80085e6:	d848      	bhi.n	800867a <_dtoa_r+0x2a2>
 80085e8:	e8df f002 	tbb	[pc, r2]
 80085ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80085f0:	9b05      	ldr	r3, [sp, #20]
 80085f2:	2200      	movs	r2, #0
 80085f4:	eba3 030b 	sub.w	r3, r3, fp
 80085f8:	9305      	str	r3, [sp, #20]
 80085fa:	920e      	str	r2, [sp, #56]	; 0x38
 80085fc:	f1cb 0300 	rsb	r3, fp, #0
 8008600:	e7e3      	b.n	80085ca <_dtoa_r+0x1f2>
 8008602:	2200      	movs	r2, #0
 8008604:	9208      	str	r2, [sp, #32]
 8008606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008608:	2a00      	cmp	r2, #0
 800860a:	dc39      	bgt.n	8008680 <_dtoa_r+0x2a8>
 800860c:	f04f 0a01 	mov.w	sl, #1
 8008610:	46d1      	mov	r9, sl
 8008612:	4652      	mov	r2, sl
 8008614:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008618:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800861a:	2100      	movs	r1, #0
 800861c:	6079      	str	r1, [r7, #4]
 800861e:	2004      	movs	r0, #4
 8008620:	f100 0c14 	add.w	ip, r0, #20
 8008624:	4594      	cmp	ip, r2
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	d92f      	bls.n	800868a <_dtoa_r+0x2b2>
 800862a:	4630      	mov	r0, r6
 800862c:	930c      	str	r3, [sp, #48]	; 0x30
 800862e:	f001 f803 	bl	8009638 <_Balloc>
 8008632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008634:	9000      	str	r0, [sp, #0]
 8008636:	4602      	mov	r2, r0
 8008638:	2800      	cmp	r0, #0
 800863a:	d149      	bne.n	80086d0 <_dtoa_r+0x2f8>
 800863c:	4b23      	ldr	r3, [pc, #140]	; (80086cc <_dtoa_r+0x2f4>)
 800863e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008642:	e6df      	b.n	8008404 <_dtoa_r+0x2c>
 8008644:	2201      	movs	r2, #1
 8008646:	e7dd      	b.n	8008604 <_dtoa_r+0x22c>
 8008648:	2200      	movs	r2, #0
 800864a:	9208      	str	r2, [sp, #32]
 800864c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800864e:	eb0b 0a02 	add.w	sl, fp, r2
 8008652:	f10a 0901 	add.w	r9, sl, #1
 8008656:	464a      	mov	r2, r9
 8008658:	2a01      	cmp	r2, #1
 800865a:	bfb8      	it	lt
 800865c:	2201      	movlt	r2, #1
 800865e:	e7db      	b.n	8008618 <_dtoa_r+0x240>
 8008660:	2201      	movs	r2, #1
 8008662:	e7f2      	b.n	800864a <_dtoa_r+0x272>
 8008664:	2401      	movs	r4, #1
 8008666:	2200      	movs	r2, #0
 8008668:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800866c:	f04f 3aff 	mov.w	sl, #4294967295
 8008670:	2100      	movs	r1, #0
 8008672:	46d1      	mov	r9, sl
 8008674:	2212      	movs	r2, #18
 8008676:	9109      	str	r1, [sp, #36]	; 0x24
 8008678:	e7ce      	b.n	8008618 <_dtoa_r+0x240>
 800867a:	2201      	movs	r2, #1
 800867c:	9208      	str	r2, [sp, #32]
 800867e:	e7f5      	b.n	800866c <_dtoa_r+0x294>
 8008680:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008684:	46d1      	mov	r9, sl
 8008686:	4652      	mov	r2, sl
 8008688:	e7c6      	b.n	8008618 <_dtoa_r+0x240>
 800868a:	3101      	adds	r1, #1
 800868c:	6079      	str	r1, [r7, #4]
 800868e:	0040      	lsls	r0, r0, #1
 8008690:	e7c6      	b.n	8008620 <_dtoa_r+0x248>
 8008692:	bf00      	nop
 8008694:	f3af 8000 	nop.w
 8008698:	636f4361 	.word	0x636f4361
 800869c:	3fd287a7 	.word	0x3fd287a7
 80086a0:	8b60c8b3 	.word	0x8b60c8b3
 80086a4:	3fc68a28 	.word	0x3fc68a28
 80086a8:	509f79fb 	.word	0x509f79fb
 80086ac:	3fd34413 	.word	0x3fd34413
 80086b0:	0800bbe6 	.word	0x0800bbe6
 80086b4:	0800bbfd 	.word	0x0800bbfd
 80086b8:	7ff00000 	.word	0x7ff00000
 80086bc:	0800bbe2 	.word	0x0800bbe2
 80086c0:	0800bbd9 	.word	0x0800bbd9
 80086c4:	0800be62 	.word	0x0800be62
 80086c8:	0800bd78 	.word	0x0800bd78
 80086cc:	0800bc5c 	.word	0x0800bc5c
 80086d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80086d2:	9900      	ldr	r1, [sp, #0]
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	f1b9 0f0e 	cmp.w	r9, #14
 80086da:	d872      	bhi.n	80087c2 <_dtoa_r+0x3ea>
 80086dc:	2c00      	cmp	r4, #0
 80086de:	d070      	beq.n	80087c2 <_dtoa_r+0x3ea>
 80086e0:	f1bb 0f00 	cmp.w	fp, #0
 80086e4:	f340 80a6 	ble.w	8008834 <_dtoa_r+0x45c>
 80086e8:	49ca      	ldr	r1, [pc, #808]	; (8008a14 <_dtoa_r+0x63c>)
 80086ea:	f00b 020f 	and.w	r2, fp, #15
 80086ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80086f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086f6:	ed92 7b00 	vldr	d7, [r2]
 80086fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80086fe:	f000 808d 	beq.w	800881c <_dtoa_r+0x444>
 8008702:	4ac5      	ldr	r2, [pc, #788]	; (8008a18 <_dtoa_r+0x640>)
 8008704:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008708:	ed92 6b08 	vldr	d6, [r2, #32]
 800870c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008710:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008714:	f001 010f 	and.w	r1, r1, #15
 8008718:	2203      	movs	r2, #3
 800871a:	48bf      	ldr	r0, [pc, #764]	; (8008a18 <_dtoa_r+0x640>)
 800871c:	2900      	cmp	r1, #0
 800871e:	d17f      	bne.n	8008820 <_dtoa_r+0x448>
 8008720:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008724:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008728:	ed8d 7b02 	vstr	d7, [sp, #8]
 800872c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800872e:	2900      	cmp	r1, #0
 8008730:	f000 80b2 	beq.w	8008898 <_dtoa_r+0x4c0>
 8008734:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800873c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008744:	f140 80a8 	bpl.w	8008898 <_dtoa_r+0x4c0>
 8008748:	f1b9 0f00 	cmp.w	r9, #0
 800874c:	f000 80a4 	beq.w	8008898 <_dtoa_r+0x4c0>
 8008750:	f1ba 0f00 	cmp.w	sl, #0
 8008754:	dd31      	ble.n	80087ba <_dtoa_r+0x3e2>
 8008756:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800875a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800875e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008762:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008766:	3201      	adds	r2, #1
 8008768:	4650      	mov	r0, sl
 800876a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800876e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008772:	ee07 2a90 	vmov	s15, r2
 8008776:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800877a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800877e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008782:	9c03      	ldr	r4, [sp, #12]
 8008784:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008788:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800878c:	2800      	cmp	r0, #0
 800878e:	f040 8086 	bne.w	800889e <_dtoa_r+0x4c6>
 8008792:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008796:	ee36 6b47 	vsub.f64	d6, d6, d7
 800879a:	ec42 1b17 	vmov	d7, r1, r2
 800879e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a6:	f300 8272 	bgt.w	8008c8e <_dtoa_r+0x8b6>
 80087aa:	eeb1 7b47 	vneg.f64	d7, d7
 80087ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b6:	f100 8267 	bmi.w	8008c88 <_dtoa_r+0x8b0>
 80087ba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80087be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80087c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087c4:	2a00      	cmp	r2, #0
 80087c6:	f2c0 8129 	blt.w	8008a1c <_dtoa_r+0x644>
 80087ca:	f1bb 0f0e 	cmp.w	fp, #14
 80087ce:	f300 8125 	bgt.w	8008a1c <_dtoa_r+0x644>
 80087d2:	4b90      	ldr	r3, [pc, #576]	; (8008a14 <_dtoa_r+0x63c>)
 80087d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087d8:	ed93 6b00 	vldr	d6, [r3]
 80087dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f280 80c3 	bge.w	800896a <_dtoa_r+0x592>
 80087e4:	f1b9 0f00 	cmp.w	r9, #0
 80087e8:	f300 80bf 	bgt.w	800896a <_dtoa_r+0x592>
 80087ec:	f040 824c 	bne.w	8008c88 <_dtoa_r+0x8b0>
 80087f0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80087f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80087f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008804:	464c      	mov	r4, r9
 8008806:	464f      	mov	r7, r9
 8008808:	f280 8222 	bge.w	8008c50 <_dtoa_r+0x878>
 800880c:	f8dd 8000 	ldr.w	r8, [sp]
 8008810:	2331      	movs	r3, #49	; 0x31
 8008812:	f808 3b01 	strb.w	r3, [r8], #1
 8008816:	f10b 0b01 	add.w	fp, fp, #1
 800881a:	e21e      	b.n	8008c5a <_dtoa_r+0x882>
 800881c:	2202      	movs	r2, #2
 800881e:	e77c      	b.n	800871a <_dtoa_r+0x342>
 8008820:	07cc      	lsls	r4, r1, #31
 8008822:	d504      	bpl.n	800882e <_dtoa_r+0x456>
 8008824:	ed90 6b00 	vldr	d6, [r0]
 8008828:	3201      	adds	r2, #1
 800882a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800882e:	1049      	asrs	r1, r1, #1
 8008830:	3008      	adds	r0, #8
 8008832:	e773      	b.n	800871c <_dtoa_r+0x344>
 8008834:	d02e      	beq.n	8008894 <_dtoa_r+0x4bc>
 8008836:	f1cb 0100 	rsb	r1, fp, #0
 800883a:	4a76      	ldr	r2, [pc, #472]	; (8008a14 <_dtoa_r+0x63c>)
 800883c:	f001 000f 	and.w	r0, r1, #15
 8008840:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008844:	ed92 7b00 	vldr	d7, [r2]
 8008848:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800884c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008850:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008854:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008858:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800885c:	486e      	ldr	r0, [pc, #440]	; (8008a18 <_dtoa_r+0x640>)
 800885e:	1109      	asrs	r1, r1, #4
 8008860:	2400      	movs	r4, #0
 8008862:	2202      	movs	r2, #2
 8008864:	b939      	cbnz	r1, 8008876 <_dtoa_r+0x49e>
 8008866:	2c00      	cmp	r4, #0
 8008868:	f43f af60 	beq.w	800872c <_dtoa_r+0x354>
 800886c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008874:	e75a      	b.n	800872c <_dtoa_r+0x354>
 8008876:	07cf      	lsls	r7, r1, #31
 8008878:	d509      	bpl.n	800888e <_dtoa_r+0x4b6>
 800887a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800887e:	ed90 7b00 	vldr	d7, [r0]
 8008882:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008886:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800888a:	3201      	adds	r2, #1
 800888c:	2401      	movs	r4, #1
 800888e:	1049      	asrs	r1, r1, #1
 8008890:	3008      	adds	r0, #8
 8008892:	e7e7      	b.n	8008864 <_dtoa_r+0x48c>
 8008894:	2202      	movs	r2, #2
 8008896:	e749      	b.n	800872c <_dtoa_r+0x354>
 8008898:	465f      	mov	r7, fp
 800889a:	4648      	mov	r0, r9
 800889c:	e765      	b.n	800876a <_dtoa_r+0x392>
 800889e:	ec42 1b17 	vmov	d7, r1, r2
 80088a2:	4a5c      	ldr	r2, [pc, #368]	; (8008a14 <_dtoa_r+0x63c>)
 80088a4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80088a8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80088ac:	9a00      	ldr	r2, [sp, #0]
 80088ae:	1814      	adds	r4, r2, r0
 80088b0:	9a08      	ldr	r2, [sp, #32]
 80088b2:	b352      	cbz	r2, 800890a <_dtoa_r+0x532>
 80088b4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80088b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80088bc:	f8dd 8000 	ldr.w	r8, [sp]
 80088c0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80088c4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80088c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80088cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80088d0:	ee14 2a90 	vmov	r2, s9
 80088d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80088d8:	3230      	adds	r2, #48	; 0x30
 80088da:	ee36 6b45 	vsub.f64	d6, d6, d5
 80088de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80088e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e6:	f808 2b01 	strb.w	r2, [r8], #1
 80088ea:	d439      	bmi.n	8008960 <_dtoa_r+0x588>
 80088ec:	ee32 5b46 	vsub.f64	d5, d2, d6
 80088f0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80088f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f8:	d472      	bmi.n	80089e0 <_dtoa_r+0x608>
 80088fa:	45a0      	cmp	r8, r4
 80088fc:	f43f af5d 	beq.w	80087ba <_dtoa_r+0x3e2>
 8008900:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008904:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008908:	e7e0      	b.n	80088cc <_dtoa_r+0x4f4>
 800890a:	f8dd 8000 	ldr.w	r8, [sp]
 800890e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008912:	4621      	mov	r1, r4
 8008914:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008918:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800891c:	ee14 2a90 	vmov	r2, s9
 8008920:	3230      	adds	r2, #48	; 0x30
 8008922:	f808 2b01 	strb.w	r2, [r8], #1
 8008926:	45a0      	cmp	r8, r4
 8008928:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800892c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008930:	d118      	bne.n	8008964 <_dtoa_r+0x58c>
 8008932:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008936:	ee37 4b05 	vadd.f64	d4, d7, d5
 800893a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800893e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008942:	dc4d      	bgt.n	80089e0 <_dtoa_r+0x608>
 8008944:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008948:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008950:	f57f af33 	bpl.w	80087ba <_dtoa_r+0x3e2>
 8008954:	4688      	mov	r8, r1
 8008956:	3901      	subs	r1, #1
 8008958:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800895c:	2b30      	cmp	r3, #48	; 0x30
 800895e:	d0f9      	beq.n	8008954 <_dtoa_r+0x57c>
 8008960:	46bb      	mov	fp, r7
 8008962:	e02a      	b.n	80089ba <_dtoa_r+0x5e2>
 8008964:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008968:	e7d6      	b.n	8008918 <_dtoa_r+0x540>
 800896a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800896e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008972:	f8dd 8000 	ldr.w	r8, [sp]
 8008976:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800897a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800897e:	ee15 3a10 	vmov	r3, s10
 8008982:	3330      	adds	r3, #48	; 0x30
 8008984:	f808 3b01 	strb.w	r3, [r8], #1
 8008988:	9b00      	ldr	r3, [sp, #0]
 800898a:	eba8 0303 	sub.w	r3, r8, r3
 800898e:	4599      	cmp	r9, r3
 8008990:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008994:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008998:	d133      	bne.n	8008a02 <_dtoa_r+0x62a>
 800899a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800899e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	dc1a      	bgt.n	80089de <_dtoa_r+0x606>
 80089a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80089ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b0:	d103      	bne.n	80089ba <_dtoa_r+0x5e2>
 80089b2:	ee15 3a10 	vmov	r3, s10
 80089b6:	07d9      	lsls	r1, r3, #31
 80089b8:	d411      	bmi.n	80089de <_dtoa_r+0x606>
 80089ba:	4629      	mov	r1, r5
 80089bc:	4630      	mov	r0, r6
 80089be:	f000 fe7b 	bl	80096b8 <_Bfree>
 80089c2:	2300      	movs	r3, #0
 80089c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089c6:	f888 3000 	strb.w	r3, [r8]
 80089ca:	f10b 0301 	add.w	r3, fp, #1
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f43f ad4d 	beq.w	8008472 <_dtoa_r+0x9a>
 80089d8:	f8c3 8000 	str.w	r8, [r3]
 80089dc:	e549      	b.n	8008472 <_dtoa_r+0x9a>
 80089de:	465f      	mov	r7, fp
 80089e0:	4643      	mov	r3, r8
 80089e2:	4698      	mov	r8, r3
 80089e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089e8:	2a39      	cmp	r2, #57	; 0x39
 80089ea:	d106      	bne.n	80089fa <_dtoa_r+0x622>
 80089ec:	9a00      	ldr	r2, [sp, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d1f7      	bne.n	80089e2 <_dtoa_r+0x60a>
 80089f2:	9900      	ldr	r1, [sp, #0]
 80089f4:	2230      	movs	r2, #48	; 0x30
 80089f6:	3701      	adds	r7, #1
 80089f8:	700a      	strb	r2, [r1, #0]
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	3201      	adds	r2, #1
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	e7ae      	b.n	8008960 <_dtoa_r+0x588>
 8008a02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008a06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0e:	d1b2      	bne.n	8008976 <_dtoa_r+0x59e>
 8008a10:	e7d3      	b.n	80089ba <_dtoa_r+0x5e2>
 8008a12:	bf00      	nop
 8008a14:	0800bd78 	.word	0x0800bd78
 8008a18:	0800bd50 	.word	0x0800bd50
 8008a1c:	9908      	ldr	r1, [sp, #32]
 8008a1e:	2900      	cmp	r1, #0
 8008a20:	f000 80d1 	beq.w	8008bc6 <_dtoa_r+0x7ee>
 8008a24:	9907      	ldr	r1, [sp, #28]
 8008a26:	2901      	cmp	r1, #1
 8008a28:	f300 80b4 	bgt.w	8008b94 <_dtoa_r+0x7bc>
 8008a2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	f000 80ac 	beq.w	8008b8c <_dtoa_r+0x7b4>
 8008a34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a38:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008a3c:	461c      	mov	r4, r3
 8008a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a40:	9b05      	ldr	r3, [sp, #20]
 8008a42:	4413      	add	r3, r2
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	9b06      	ldr	r3, [sp, #24]
 8008a48:	2101      	movs	r1, #1
 8008a4a:	4413      	add	r3, r2
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	9306      	str	r3, [sp, #24]
 8008a50:	f000 ff38 	bl	80098c4 <__i2b>
 8008a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a56:	4607      	mov	r7, r0
 8008a58:	f1b8 0f00 	cmp.w	r8, #0
 8008a5c:	dd0d      	ble.n	8008a7a <_dtoa_r+0x6a2>
 8008a5e:	9a06      	ldr	r2, [sp, #24]
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	dd0a      	ble.n	8008a7a <_dtoa_r+0x6a2>
 8008a64:	4542      	cmp	r2, r8
 8008a66:	9905      	ldr	r1, [sp, #20]
 8008a68:	bfa8      	it	ge
 8008a6a:	4642      	movge	r2, r8
 8008a6c:	1a89      	subs	r1, r1, r2
 8008a6e:	9105      	str	r1, [sp, #20]
 8008a70:	9906      	ldr	r1, [sp, #24]
 8008a72:	eba8 0802 	sub.w	r8, r8, r2
 8008a76:	1a8a      	subs	r2, r1, r2
 8008a78:	9206      	str	r2, [sp, #24]
 8008a7a:	b303      	cbz	r3, 8008abe <_dtoa_r+0x6e6>
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	f000 80a6 	beq.w	8008bd0 <_dtoa_r+0x7f8>
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	dd13      	ble.n	8008ab0 <_dtoa_r+0x6d8>
 8008a88:	4639      	mov	r1, r7
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a90:	f000 ffd4 	bl	8009a3c <__pow5mult>
 8008a94:	462a      	mov	r2, r5
 8008a96:	4601      	mov	r1, r0
 8008a98:	4607      	mov	r7, r0
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 ff28 	bl	80098f0 <__multiply>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	900a      	str	r0, [sp, #40]	; 0x28
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f000 fe07 	bl	80096b8 <_Bfree>
 8008aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aae:	4615      	mov	r5, r2
 8008ab0:	1b1a      	subs	r2, r3, r4
 8008ab2:	d004      	beq.n	8008abe <_dtoa_r+0x6e6>
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 ffc0 	bl	8009a3c <__pow5mult>
 8008abc:	4605      	mov	r5, r0
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f000 feff 	bl	80098c4 <__i2b>
 8008ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	f340 8082 	ble.w	8008bd4 <_dtoa_r+0x7fc>
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f000 ffb1 	bl	8009a3c <__pow5mult>
 8008ada:	9b07      	ldr	r3, [sp, #28]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	4604      	mov	r4, r0
 8008ae0:	dd7b      	ble.n	8008bda <_dtoa_r+0x802>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae6:	6922      	ldr	r2, [r4, #16]
 8008ae8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008aec:	6910      	ldr	r0, [r2, #16]
 8008aee:	f000 fe99 	bl	8009824 <__hi0bits>
 8008af2:	f1c0 0020 	rsb	r0, r0, #32
 8008af6:	9b06      	ldr	r3, [sp, #24]
 8008af8:	4418      	add	r0, r3
 8008afa:	f010 001f 	ands.w	r0, r0, #31
 8008afe:	f000 808d 	beq.w	8008c1c <_dtoa_r+0x844>
 8008b02:	f1c0 0220 	rsb	r2, r0, #32
 8008b06:	2a04      	cmp	r2, #4
 8008b08:	f340 8086 	ble.w	8008c18 <_dtoa_r+0x840>
 8008b0c:	f1c0 001c 	rsb	r0, r0, #28
 8008b10:	9b05      	ldr	r3, [sp, #20]
 8008b12:	4403      	add	r3, r0
 8008b14:	9305      	str	r3, [sp, #20]
 8008b16:	9b06      	ldr	r3, [sp, #24]
 8008b18:	4403      	add	r3, r0
 8008b1a:	4480      	add	r8, r0
 8008b1c:	9306      	str	r3, [sp, #24]
 8008b1e:	9b05      	ldr	r3, [sp, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dd05      	ble.n	8008b30 <_dtoa_r+0x758>
 8008b24:	4629      	mov	r1, r5
 8008b26:	461a      	mov	r2, r3
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f000 ffe1 	bl	8009af0 <__lshift>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	9b06      	ldr	r3, [sp, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dd05      	ble.n	8008b42 <_dtoa_r+0x76a>
 8008b36:	4621      	mov	r1, r4
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 ffd8 	bl	8009af0 <__lshift>
 8008b40:	4604      	mov	r4, r0
 8008b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d06b      	beq.n	8008c20 <_dtoa_r+0x848>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f001 f83c 	bl	8009bc8 <__mcmp>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	da65      	bge.n	8008c20 <_dtoa_r+0x848>
 8008b54:	2300      	movs	r3, #0
 8008b56:	4629      	mov	r1, r5
 8008b58:	220a      	movs	r2, #10
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 fdce 	bl	80096fc <__multadd>
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b66:	4605      	mov	r5, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 8192 	beq.w	8008e92 <_dtoa_r+0xaba>
 8008b6e:	4639      	mov	r1, r7
 8008b70:	2300      	movs	r3, #0
 8008b72:	220a      	movs	r2, #10
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 fdc1 	bl	80096fc <__multadd>
 8008b7a:	f1ba 0f00 	cmp.w	sl, #0
 8008b7e:	4607      	mov	r7, r0
 8008b80:	f300 808e 	bgt.w	8008ca0 <_dtoa_r+0x8c8>
 8008b84:	9b07      	ldr	r3, [sp, #28]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	dc51      	bgt.n	8008c2e <_dtoa_r+0x856>
 8008b8a:	e089      	b.n	8008ca0 <_dtoa_r+0x8c8>
 8008b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b92:	e751      	b.n	8008a38 <_dtoa_r+0x660>
 8008b94:	f109 34ff 	add.w	r4, r9, #4294967295
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	bfbf      	itttt	lt
 8008b9c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008b9e:	1ae3      	sublt	r3, r4, r3
 8008ba0:	18d2      	addlt	r2, r2, r3
 8008ba2:	4613      	movlt	r3, r2
 8008ba4:	bfb7      	itett	lt
 8008ba6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008ba8:	1b1c      	subge	r4, r3, r4
 8008baa:	4623      	movlt	r3, r4
 8008bac:	2400      	movlt	r4, #0
 8008bae:	f1b9 0f00 	cmp.w	r9, #0
 8008bb2:	bfb5      	itete	lt
 8008bb4:	9a05      	ldrlt	r2, [sp, #20]
 8008bb6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008bba:	eba2 0809 	sublt.w	r8, r2, r9
 8008bbe:	464a      	movge	r2, r9
 8008bc0:	bfb8      	it	lt
 8008bc2:	2200      	movlt	r2, #0
 8008bc4:	e73b      	b.n	8008a3e <_dtoa_r+0x666>
 8008bc6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008bca:	9f08      	ldr	r7, [sp, #32]
 8008bcc:	461c      	mov	r4, r3
 8008bce:	e743      	b.n	8008a58 <_dtoa_r+0x680>
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	e76f      	b.n	8008ab4 <_dtoa_r+0x6dc>
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	dc18      	bgt.n	8008c0c <_dtoa_r+0x834>
 8008bda:	9b02      	ldr	r3, [sp, #8]
 8008bdc:	b9b3      	cbnz	r3, 8008c0c <_dtoa_r+0x834>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008be4:	b9a2      	cbnz	r2, 8008c10 <_dtoa_r+0x838>
 8008be6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008bea:	0d12      	lsrs	r2, r2, #20
 8008bec:	0512      	lsls	r2, r2, #20
 8008bee:	b18a      	cbz	r2, 8008c14 <_dtoa_r+0x83c>
 8008bf0:	9b05      	ldr	r3, [sp, #20]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	9b06      	ldr	r3, [sp, #24]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	9306      	str	r3, [sp, #24]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8008c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f47f af6f 	bne.w	8008ae6 <_dtoa_r+0x70e>
 8008c08:	2001      	movs	r0, #1
 8008c0a:	e774      	b.n	8008af6 <_dtoa_r+0x71e>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e7f6      	b.n	8008bfe <_dtoa_r+0x826>
 8008c10:	9b02      	ldr	r3, [sp, #8]
 8008c12:	e7f4      	b.n	8008bfe <_dtoa_r+0x826>
 8008c14:	920a      	str	r2, [sp, #40]	; 0x28
 8008c16:	e7f3      	b.n	8008c00 <_dtoa_r+0x828>
 8008c18:	d081      	beq.n	8008b1e <_dtoa_r+0x746>
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	301c      	adds	r0, #28
 8008c1e:	e777      	b.n	8008b10 <_dtoa_r+0x738>
 8008c20:	f1b9 0f00 	cmp.w	r9, #0
 8008c24:	dc37      	bgt.n	8008c96 <_dtoa_r+0x8be>
 8008c26:	9b07      	ldr	r3, [sp, #28]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	dd34      	ble.n	8008c96 <_dtoa_r+0x8be>
 8008c2c:	46ca      	mov	sl, r9
 8008c2e:	f1ba 0f00 	cmp.w	sl, #0
 8008c32:	d10d      	bne.n	8008c50 <_dtoa_r+0x878>
 8008c34:	4621      	mov	r1, r4
 8008c36:	4653      	mov	r3, sl
 8008c38:	2205      	movs	r2, #5
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f000 fd5e 	bl	80096fc <__multadd>
 8008c40:	4601      	mov	r1, r0
 8008c42:	4604      	mov	r4, r0
 8008c44:	4628      	mov	r0, r5
 8008c46:	f000 ffbf 	bl	8009bc8 <__mcmp>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f73f adde 	bgt.w	800880c <_dtoa_r+0x434>
 8008c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c52:	f8dd 8000 	ldr.w	r8, [sp]
 8008c56:	ea6f 0b03 	mvn.w	fp, r3
 8008c5a:	f04f 0900 	mov.w	r9, #0
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4630      	mov	r0, r6
 8008c62:	f000 fd29 	bl	80096b8 <_Bfree>
 8008c66:	2f00      	cmp	r7, #0
 8008c68:	f43f aea7 	beq.w	80089ba <_dtoa_r+0x5e2>
 8008c6c:	f1b9 0f00 	cmp.w	r9, #0
 8008c70:	d005      	beq.n	8008c7e <_dtoa_r+0x8a6>
 8008c72:	45b9      	cmp	r9, r7
 8008c74:	d003      	beq.n	8008c7e <_dtoa_r+0x8a6>
 8008c76:	4649      	mov	r1, r9
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 fd1d 	bl	80096b8 <_Bfree>
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 fd19 	bl	80096b8 <_Bfree>
 8008c86:	e698      	b.n	80089ba <_dtoa_r+0x5e2>
 8008c88:	2400      	movs	r4, #0
 8008c8a:	4627      	mov	r7, r4
 8008c8c:	e7e0      	b.n	8008c50 <_dtoa_r+0x878>
 8008c8e:	46bb      	mov	fp, r7
 8008c90:	4604      	mov	r4, r0
 8008c92:	4607      	mov	r7, r0
 8008c94:	e5ba      	b.n	800880c <_dtoa_r+0x434>
 8008c96:	9b08      	ldr	r3, [sp, #32]
 8008c98:	46ca      	mov	sl, r9
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8100 	beq.w	8008ea0 <_dtoa_r+0xac8>
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	dd05      	ble.n	8008cb2 <_dtoa_r+0x8da>
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	4642      	mov	r2, r8
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 ff20 	bl	8009af0 <__lshift>
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d05d      	beq.n	8008d74 <_dtoa_r+0x99c>
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f000 fcbc 	bl	8009638 <_Balloc>
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	b928      	cbnz	r0, 8008cd0 <_dtoa_r+0x8f8>
 8008cc4:	4b82      	ldr	r3, [pc, #520]	; (8008ed0 <_dtoa_r+0xaf8>)
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ccc:	f7ff bb9a 	b.w	8008404 <_dtoa_r+0x2c>
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	3202      	adds	r2, #2
 8008cd4:	0092      	lsls	r2, r2, #2
 8008cd6:	f107 010c 	add.w	r1, r7, #12
 8008cda:	300c      	adds	r0, #12
 8008cdc:	f000 fc9e 	bl	800961c <memcpy>
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f000 ff03 	bl	8009af0 <__lshift>
 8008cea:	9b00      	ldr	r3, [sp, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	9305      	str	r3, [sp, #20]
 8008cf0:	9b00      	ldr	r3, [sp, #0]
 8008cf2:	4453      	add	r3, sl
 8008cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf6:	9b02      	ldr	r3, [sp, #8]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	46b9      	mov	r9, r7
 8008cfe:	9308      	str	r3, [sp, #32]
 8008d00:	4607      	mov	r7, r0
 8008d02:	9b05      	ldr	r3, [sp, #20]
 8008d04:	4621      	mov	r1, r4
 8008d06:	3b01      	subs	r3, #1
 8008d08:	4628      	mov	r0, r5
 8008d0a:	9302      	str	r3, [sp, #8]
 8008d0c:	f7ff fad8 	bl	80082c0 <quorem>
 8008d10:	4603      	mov	r3, r0
 8008d12:	3330      	adds	r3, #48	; 0x30
 8008d14:	9006      	str	r0, [sp, #24]
 8008d16:	4649      	mov	r1, r9
 8008d18:	4628      	mov	r0, r5
 8008d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d1c:	f000 ff54 	bl	8009bc8 <__mcmp>
 8008d20:	463a      	mov	r2, r7
 8008d22:	4682      	mov	sl, r0
 8008d24:	4621      	mov	r1, r4
 8008d26:	4630      	mov	r0, r6
 8008d28:	f000 ff6a 	bl	8009c00 <__mdiff>
 8008d2c:	68c2      	ldr	r2, [r0, #12]
 8008d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d30:	4680      	mov	r8, r0
 8008d32:	bb0a      	cbnz	r2, 8008d78 <_dtoa_r+0x9a0>
 8008d34:	4601      	mov	r1, r0
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 ff46 	bl	8009bc8 <__mcmp>
 8008d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3e:	4602      	mov	r2, r0
 8008d40:	4641      	mov	r1, r8
 8008d42:	4630      	mov	r0, r6
 8008d44:	920e      	str	r2, [sp, #56]	; 0x38
 8008d46:	930a      	str	r3, [sp, #40]	; 0x28
 8008d48:	f000 fcb6 	bl	80096b8 <_Bfree>
 8008d4c:	9b07      	ldr	r3, [sp, #28]
 8008d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008d54:	ea43 0102 	orr.w	r1, r3, r2
 8008d58:	9b08      	ldr	r3, [sp, #32]
 8008d5a:	430b      	orrs	r3, r1
 8008d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5e:	d10d      	bne.n	8008d7c <_dtoa_r+0x9a4>
 8008d60:	2b39      	cmp	r3, #57	; 0x39
 8008d62:	d029      	beq.n	8008db8 <_dtoa_r+0x9e0>
 8008d64:	f1ba 0f00 	cmp.w	sl, #0
 8008d68:	dd01      	ble.n	8008d6e <_dtoa_r+0x996>
 8008d6a:	9b06      	ldr	r3, [sp, #24]
 8008d6c:	3331      	adds	r3, #49	; 0x31
 8008d6e:	9a02      	ldr	r2, [sp, #8]
 8008d70:	7013      	strb	r3, [r2, #0]
 8008d72:	e774      	b.n	8008c5e <_dtoa_r+0x886>
 8008d74:	4638      	mov	r0, r7
 8008d76:	e7b8      	b.n	8008cea <_dtoa_r+0x912>
 8008d78:	2201      	movs	r2, #1
 8008d7a:	e7e1      	b.n	8008d40 <_dtoa_r+0x968>
 8008d7c:	f1ba 0f00 	cmp.w	sl, #0
 8008d80:	db06      	blt.n	8008d90 <_dtoa_r+0x9b8>
 8008d82:	9907      	ldr	r1, [sp, #28]
 8008d84:	ea41 0a0a 	orr.w	sl, r1, sl
 8008d88:	9908      	ldr	r1, [sp, #32]
 8008d8a:	ea5a 0101 	orrs.w	r1, sl, r1
 8008d8e:	d120      	bne.n	8008dd2 <_dtoa_r+0x9fa>
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	ddec      	ble.n	8008d6e <_dtoa_r+0x996>
 8008d94:	4629      	mov	r1, r5
 8008d96:	2201      	movs	r2, #1
 8008d98:	4630      	mov	r0, r6
 8008d9a:	9305      	str	r3, [sp, #20]
 8008d9c:	f000 fea8 	bl	8009af0 <__lshift>
 8008da0:	4621      	mov	r1, r4
 8008da2:	4605      	mov	r5, r0
 8008da4:	f000 ff10 	bl	8009bc8 <__mcmp>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	9b05      	ldr	r3, [sp, #20]
 8008dac:	dc02      	bgt.n	8008db4 <_dtoa_r+0x9dc>
 8008dae:	d1de      	bne.n	8008d6e <_dtoa_r+0x996>
 8008db0:	07da      	lsls	r2, r3, #31
 8008db2:	d5dc      	bpl.n	8008d6e <_dtoa_r+0x996>
 8008db4:	2b39      	cmp	r3, #57	; 0x39
 8008db6:	d1d8      	bne.n	8008d6a <_dtoa_r+0x992>
 8008db8:	9a02      	ldr	r2, [sp, #8]
 8008dba:	2339      	movs	r3, #57	; 0x39
 8008dbc:	7013      	strb	r3, [r2, #0]
 8008dbe:	4643      	mov	r3, r8
 8008dc0:	4698      	mov	r8, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008dc8:	2a39      	cmp	r2, #57	; 0x39
 8008dca:	d051      	beq.n	8008e70 <_dtoa_r+0xa98>
 8008dcc:	3201      	adds	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
 8008dd0:	e745      	b.n	8008c5e <_dtoa_r+0x886>
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	dd03      	ble.n	8008dde <_dtoa_r+0xa06>
 8008dd6:	2b39      	cmp	r3, #57	; 0x39
 8008dd8:	d0ee      	beq.n	8008db8 <_dtoa_r+0x9e0>
 8008dda:	3301      	adds	r3, #1
 8008ddc:	e7c7      	b.n	8008d6e <_dtoa_r+0x996>
 8008dde:	9a05      	ldr	r2, [sp, #20]
 8008de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008de2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008de6:	428a      	cmp	r2, r1
 8008de8:	d02b      	beq.n	8008e42 <_dtoa_r+0xa6a>
 8008dea:	4629      	mov	r1, r5
 8008dec:	2300      	movs	r3, #0
 8008dee:	220a      	movs	r2, #10
 8008df0:	4630      	mov	r0, r6
 8008df2:	f000 fc83 	bl	80096fc <__multadd>
 8008df6:	45b9      	cmp	r9, r7
 8008df8:	4605      	mov	r5, r0
 8008dfa:	f04f 0300 	mov.w	r3, #0
 8008dfe:	f04f 020a 	mov.w	r2, #10
 8008e02:	4649      	mov	r1, r9
 8008e04:	4630      	mov	r0, r6
 8008e06:	d107      	bne.n	8008e18 <_dtoa_r+0xa40>
 8008e08:	f000 fc78 	bl	80096fc <__multadd>
 8008e0c:	4681      	mov	r9, r0
 8008e0e:	4607      	mov	r7, r0
 8008e10:	9b05      	ldr	r3, [sp, #20]
 8008e12:	3301      	adds	r3, #1
 8008e14:	9305      	str	r3, [sp, #20]
 8008e16:	e774      	b.n	8008d02 <_dtoa_r+0x92a>
 8008e18:	f000 fc70 	bl	80096fc <__multadd>
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	4681      	mov	r9, r0
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	4630      	mov	r0, r6
 8008e26:	f000 fc69 	bl	80096fc <__multadd>
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	e7f0      	b.n	8008e10 <_dtoa_r+0xa38>
 8008e2e:	f1ba 0f00 	cmp.w	sl, #0
 8008e32:	9a00      	ldr	r2, [sp, #0]
 8008e34:	bfcc      	ite	gt
 8008e36:	46d0      	movgt	r8, sl
 8008e38:	f04f 0801 	movle.w	r8, #1
 8008e3c:	4490      	add	r8, r2
 8008e3e:	f04f 0900 	mov.w	r9, #0
 8008e42:	4629      	mov	r1, r5
 8008e44:	2201      	movs	r2, #1
 8008e46:	4630      	mov	r0, r6
 8008e48:	9302      	str	r3, [sp, #8]
 8008e4a:	f000 fe51 	bl	8009af0 <__lshift>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4605      	mov	r5, r0
 8008e52:	f000 feb9 	bl	8009bc8 <__mcmp>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	dcb1      	bgt.n	8008dbe <_dtoa_r+0x9e6>
 8008e5a:	d102      	bne.n	8008e62 <_dtoa_r+0xa8a>
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	07db      	lsls	r3, r3, #31
 8008e60:	d4ad      	bmi.n	8008dbe <_dtoa_r+0x9e6>
 8008e62:	4643      	mov	r3, r8
 8008e64:	4698      	mov	r8, r3
 8008e66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e6a:	2a30      	cmp	r2, #48	; 0x30
 8008e6c:	d0fa      	beq.n	8008e64 <_dtoa_r+0xa8c>
 8008e6e:	e6f6      	b.n	8008c5e <_dtoa_r+0x886>
 8008e70:	9a00      	ldr	r2, [sp, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d1a4      	bne.n	8008dc0 <_dtoa_r+0x9e8>
 8008e76:	f10b 0b01 	add.w	fp, fp, #1
 8008e7a:	2331      	movs	r3, #49	; 0x31
 8008e7c:	e778      	b.n	8008d70 <_dtoa_r+0x998>
 8008e7e:	4b15      	ldr	r3, [pc, #84]	; (8008ed4 <_dtoa_r+0xafc>)
 8008e80:	f7ff bb12 	b.w	80084a8 <_dtoa_r+0xd0>
 8008e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f47f aaee 	bne.w	8008468 <_dtoa_r+0x90>
 8008e8c:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <_dtoa_r+0xb00>)
 8008e8e:	f7ff bb0b 	b.w	80084a8 <_dtoa_r+0xd0>
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	dc03      	bgt.n	8008ea0 <_dtoa_r+0xac8>
 8008e98:	9b07      	ldr	r3, [sp, #28]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	f73f aec7 	bgt.w	8008c2e <_dtoa_r+0x856>
 8008ea0:	f8dd 8000 	ldr.w	r8, [sp]
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f7ff fa0a 	bl	80082c0 <quorem>
 8008eac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008eb0:	f808 3b01 	strb.w	r3, [r8], #1
 8008eb4:	9a00      	ldr	r2, [sp, #0]
 8008eb6:	eba8 0202 	sub.w	r2, r8, r2
 8008eba:	4592      	cmp	sl, r2
 8008ebc:	ddb7      	ble.n	8008e2e <_dtoa_r+0xa56>
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	220a      	movs	r2, #10
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 fc19 	bl	80096fc <__multadd>
 8008eca:	4605      	mov	r5, r0
 8008ecc:	e7ea      	b.n	8008ea4 <_dtoa_r+0xacc>
 8008ece:	bf00      	nop
 8008ed0:	0800bc5c 	.word	0x0800bc5c
 8008ed4:	0800be61 	.word	0x0800be61
 8008ed8:	0800bbd9 	.word	0x0800bbd9

08008edc <rshift>:
 8008edc:	6903      	ldr	r3, [r0, #16]
 8008ede:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ee6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008eea:	f100 0414 	add.w	r4, r0, #20
 8008eee:	dd45      	ble.n	8008f7c <rshift+0xa0>
 8008ef0:	f011 011f 	ands.w	r1, r1, #31
 8008ef4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ef8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008efc:	d10c      	bne.n	8008f18 <rshift+0x3c>
 8008efe:	f100 0710 	add.w	r7, r0, #16
 8008f02:	4629      	mov	r1, r5
 8008f04:	42b1      	cmp	r1, r6
 8008f06:	d334      	bcc.n	8008f72 <rshift+0x96>
 8008f08:	1a9b      	subs	r3, r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	1eea      	subs	r2, r5, #3
 8008f0e:	4296      	cmp	r6, r2
 8008f10:	bf38      	it	cc
 8008f12:	2300      	movcc	r3, #0
 8008f14:	4423      	add	r3, r4
 8008f16:	e015      	b.n	8008f44 <rshift+0x68>
 8008f18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f1c:	f1c1 0820 	rsb	r8, r1, #32
 8008f20:	40cf      	lsrs	r7, r1
 8008f22:	f105 0e04 	add.w	lr, r5, #4
 8008f26:	46a1      	mov	r9, r4
 8008f28:	4576      	cmp	r6, lr
 8008f2a:	46f4      	mov	ip, lr
 8008f2c:	d815      	bhi.n	8008f5a <rshift+0x7e>
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	009a      	lsls	r2, r3, #2
 8008f32:	3a04      	subs	r2, #4
 8008f34:	3501      	adds	r5, #1
 8008f36:	42ae      	cmp	r6, r5
 8008f38:	bf38      	it	cc
 8008f3a:	2200      	movcc	r2, #0
 8008f3c:	18a3      	adds	r3, r4, r2
 8008f3e:	50a7      	str	r7, [r4, r2]
 8008f40:	b107      	cbz	r7, 8008f44 <rshift+0x68>
 8008f42:	3304      	adds	r3, #4
 8008f44:	1b1a      	subs	r2, r3, r4
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f4c:	bf08      	it	eq
 8008f4e:	2300      	moveq	r3, #0
 8008f50:	6102      	str	r2, [r0, #16]
 8008f52:	bf08      	it	eq
 8008f54:	6143      	streq	r3, [r0, #20]
 8008f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f5a:	f8dc c000 	ldr.w	ip, [ip]
 8008f5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f62:	ea4c 0707 	orr.w	r7, ip, r7
 8008f66:	f849 7b04 	str.w	r7, [r9], #4
 8008f6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f6e:	40cf      	lsrs	r7, r1
 8008f70:	e7da      	b.n	8008f28 <rshift+0x4c>
 8008f72:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f76:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f7a:	e7c3      	b.n	8008f04 <rshift+0x28>
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	e7e1      	b.n	8008f44 <rshift+0x68>

08008f80 <__hexdig_fun>:
 8008f80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d802      	bhi.n	8008f8e <__hexdig_fun+0xe>
 8008f88:	3820      	subs	r0, #32
 8008f8a:	b2c0      	uxtb	r0, r0
 8008f8c:	4770      	bx	lr
 8008f8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	d801      	bhi.n	8008f9a <__hexdig_fun+0x1a>
 8008f96:	3847      	subs	r0, #71	; 0x47
 8008f98:	e7f7      	b.n	8008f8a <__hexdig_fun+0xa>
 8008f9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	d801      	bhi.n	8008fa6 <__hexdig_fun+0x26>
 8008fa2:	3827      	subs	r0, #39	; 0x27
 8008fa4:	e7f1      	b.n	8008f8a <__hexdig_fun+0xa>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	4770      	bx	lr
	...

08008fac <__gethex>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	ed2d 8b02 	vpush	{d8}
 8008fb4:	b089      	sub	sp, #36	; 0x24
 8008fb6:	ee08 0a10 	vmov	s16, r0
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	4bbc      	ldr	r3, [pc, #752]	; (80092b0 <__gethex+0x304>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	468b      	mov	fp, r1
 8008fc6:	4690      	mov	r8, r2
 8008fc8:	f7f7 f944 	bl	8000254 <strlen>
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	f8db 2000 	ldr.w	r2, [fp]
 8008fd2:	4403      	add	r3, r0
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	1c93      	adds	r3, r2, #2
 8008fde:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008fe2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008fe6:	32fe      	adds	r2, #254	; 0xfe
 8008fe8:	18d1      	adds	r1, r2, r3
 8008fea:	461f      	mov	r7, r3
 8008fec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ff0:	9100      	str	r1, [sp, #0]
 8008ff2:	2830      	cmp	r0, #48	; 0x30
 8008ff4:	d0f8      	beq.n	8008fe8 <__gethex+0x3c>
 8008ff6:	f7ff ffc3 	bl	8008f80 <__hexdig_fun>
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d13a      	bne.n	8009076 <__gethex+0xca>
 8009000:	9901      	ldr	r1, [sp, #4]
 8009002:	4652      	mov	r2, sl
 8009004:	4638      	mov	r0, r7
 8009006:	f7fe fa98 	bl	800753a <strncmp>
 800900a:	4605      	mov	r5, r0
 800900c:	2800      	cmp	r0, #0
 800900e:	d168      	bne.n	80090e2 <__gethex+0x136>
 8009010:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009014:	eb07 060a 	add.w	r6, r7, sl
 8009018:	f7ff ffb2 	bl	8008f80 <__hexdig_fun>
 800901c:	2800      	cmp	r0, #0
 800901e:	d062      	beq.n	80090e6 <__gethex+0x13a>
 8009020:	4633      	mov	r3, r6
 8009022:	7818      	ldrb	r0, [r3, #0]
 8009024:	2830      	cmp	r0, #48	; 0x30
 8009026:	461f      	mov	r7, r3
 8009028:	f103 0301 	add.w	r3, r3, #1
 800902c:	d0f9      	beq.n	8009022 <__gethex+0x76>
 800902e:	f7ff ffa7 	bl	8008f80 <__hexdig_fun>
 8009032:	2301      	movs	r3, #1
 8009034:	fab0 f480 	clz	r4, r0
 8009038:	0964      	lsrs	r4, r4, #5
 800903a:	4635      	mov	r5, r6
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	463a      	mov	r2, r7
 8009040:	4616      	mov	r6, r2
 8009042:	3201      	adds	r2, #1
 8009044:	7830      	ldrb	r0, [r6, #0]
 8009046:	f7ff ff9b 	bl	8008f80 <__hexdig_fun>
 800904a:	2800      	cmp	r0, #0
 800904c:	d1f8      	bne.n	8009040 <__gethex+0x94>
 800904e:	9901      	ldr	r1, [sp, #4]
 8009050:	4652      	mov	r2, sl
 8009052:	4630      	mov	r0, r6
 8009054:	f7fe fa71 	bl	800753a <strncmp>
 8009058:	b980      	cbnz	r0, 800907c <__gethex+0xd0>
 800905a:	b94d      	cbnz	r5, 8009070 <__gethex+0xc4>
 800905c:	eb06 050a 	add.w	r5, r6, sl
 8009060:	462a      	mov	r2, r5
 8009062:	4616      	mov	r6, r2
 8009064:	3201      	adds	r2, #1
 8009066:	7830      	ldrb	r0, [r6, #0]
 8009068:	f7ff ff8a 	bl	8008f80 <__hexdig_fun>
 800906c:	2800      	cmp	r0, #0
 800906e:	d1f8      	bne.n	8009062 <__gethex+0xb6>
 8009070:	1bad      	subs	r5, r5, r6
 8009072:	00ad      	lsls	r5, r5, #2
 8009074:	e004      	b.n	8009080 <__gethex+0xd4>
 8009076:	2400      	movs	r4, #0
 8009078:	4625      	mov	r5, r4
 800907a:	e7e0      	b.n	800903e <__gethex+0x92>
 800907c:	2d00      	cmp	r5, #0
 800907e:	d1f7      	bne.n	8009070 <__gethex+0xc4>
 8009080:	7833      	ldrb	r3, [r6, #0]
 8009082:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009086:	2b50      	cmp	r3, #80	; 0x50
 8009088:	d13b      	bne.n	8009102 <__gethex+0x156>
 800908a:	7873      	ldrb	r3, [r6, #1]
 800908c:	2b2b      	cmp	r3, #43	; 0x2b
 800908e:	d02c      	beq.n	80090ea <__gethex+0x13e>
 8009090:	2b2d      	cmp	r3, #45	; 0x2d
 8009092:	d02e      	beq.n	80090f2 <__gethex+0x146>
 8009094:	1c71      	adds	r1, r6, #1
 8009096:	f04f 0900 	mov.w	r9, #0
 800909a:	7808      	ldrb	r0, [r1, #0]
 800909c:	f7ff ff70 	bl	8008f80 <__hexdig_fun>
 80090a0:	1e43      	subs	r3, r0, #1
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b18      	cmp	r3, #24
 80090a6:	d82c      	bhi.n	8009102 <__gethex+0x156>
 80090a8:	f1a0 0210 	sub.w	r2, r0, #16
 80090ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090b0:	f7ff ff66 	bl	8008f80 <__hexdig_fun>
 80090b4:	1e43      	subs	r3, r0, #1
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b18      	cmp	r3, #24
 80090ba:	d91d      	bls.n	80090f8 <__gethex+0x14c>
 80090bc:	f1b9 0f00 	cmp.w	r9, #0
 80090c0:	d000      	beq.n	80090c4 <__gethex+0x118>
 80090c2:	4252      	negs	r2, r2
 80090c4:	4415      	add	r5, r2
 80090c6:	f8cb 1000 	str.w	r1, [fp]
 80090ca:	b1e4      	cbz	r4, 8009106 <__gethex+0x15a>
 80090cc:	9b00      	ldr	r3, [sp, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bf14      	ite	ne
 80090d2:	2700      	movne	r7, #0
 80090d4:	2706      	moveq	r7, #6
 80090d6:	4638      	mov	r0, r7
 80090d8:	b009      	add	sp, #36	; 0x24
 80090da:	ecbd 8b02 	vpop	{d8}
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	463e      	mov	r6, r7
 80090e4:	4625      	mov	r5, r4
 80090e6:	2401      	movs	r4, #1
 80090e8:	e7ca      	b.n	8009080 <__gethex+0xd4>
 80090ea:	f04f 0900 	mov.w	r9, #0
 80090ee:	1cb1      	adds	r1, r6, #2
 80090f0:	e7d3      	b.n	800909a <__gethex+0xee>
 80090f2:	f04f 0901 	mov.w	r9, #1
 80090f6:	e7fa      	b.n	80090ee <__gethex+0x142>
 80090f8:	230a      	movs	r3, #10
 80090fa:	fb03 0202 	mla	r2, r3, r2, r0
 80090fe:	3a10      	subs	r2, #16
 8009100:	e7d4      	b.n	80090ac <__gethex+0x100>
 8009102:	4631      	mov	r1, r6
 8009104:	e7df      	b.n	80090c6 <__gethex+0x11a>
 8009106:	1bf3      	subs	r3, r6, r7
 8009108:	3b01      	subs	r3, #1
 800910a:	4621      	mov	r1, r4
 800910c:	2b07      	cmp	r3, #7
 800910e:	dc0b      	bgt.n	8009128 <__gethex+0x17c>
 8009110:	ee18 0a10 	vmov	r0, s16
 8009114:	f000 fa90 	bl	8009638 <_Balloc>
 8009118:	4604      	mov	r4, r0
 800911a:	b940      	cbnz	r0, 800912e <__gethex+0x182>
 800911c:	4b65      	ldr	r3, [pc, #404]	; (80092b4 <__gethex+0x308>)
 800911e:	4602      	mov	r2, r0
 8009120:	21de      	movs	r1, #222	; 0xde
 8009122:	4865      	ldr	r0, [pc, #404]	; (80092b8 <__gethex+0x30c>)
 8009124:	f001 fda4 	bl	800ac70 <__assert_func>
 8009128:	3101      	adds	r1, #1
 800912a:	105b      	asrs	r3, r3, #1
 800912c:	e7ee      	b.n	800910c <__gethex+0x160>
 800912e:	f100 0914 	add.w	r9, r0, #20
 8009132:	f04f 0b00 	mov.w	fp, #0
 8009136:	f1ca 0301 	rsb	r3, sl, #1
 800913a:	f8cd 9008 	str.w	r9, [sp, #8]
 800913e:	f8cd b000 	str.w	fp, [sp]
 8009142:	9306      	str	r3, [sp, #24]
 8009144:	42b7      	cmp	r7, r6
 8009146:	d340      	bcc.n	80091ca <__gethex+0x21e>
 8009148:	9802      	ldr	r0, [sp, #8]
 800914a:	9b00      	ldr	r3, [sp, #0]
 800914c:	f840 3b04 	str.w	r3, [r0], #4
 8009150:	eba0 0009 	sub.w	r0, r0, r9
 8009154:	1080      	asrs	r0, r0, #2
 8009156:	0146      	lsls	r6, r0, #5
 8009158:	6120      	str	r0, [r4, #16]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fb62 	bl	8009824 <__hi0bits>
 8009160:	1a30      	subs	r0, r6, r0
 8009162:	f8d8 6000 	ldr.w	r6, [r8]
 8009166:	42b0      	cmp	r0, r6
 8009168:	dd63      	ble.n	8009232 <__gethex+0x286>
 800916a:	1b87      	subs	r7, r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fefd 	bl	8009f6e <__any_on>
 8009174:	4682      	mov	sl, r0
 8009176:	b1a8      	cbz	r0, 80091a4 <__gethex+0x1f8>
 8009178:	1e7b      	subs	r3, r7, #1
 800917a:	1159      	asrs	r1, r3, #5
 800917c:	f003 021f 	and.w	r2, r3, #31
 8009180:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009184:	f04f 0a01 	mov.w	sl, #1
 8009188:	fa0a f202 	lsl.w	r2, sl, r2
 800918c:	420a      	tst	r2, r1
 800918e:	d009      	beq.n	80091a4 <__gethex+0x1f8>
 8009190:	4553      	cmp	r3, sl
 8009192:	dd05      	ble.n	80091a0 <__gethex+0x1f4>
 8009194:	1eb9      	subs	r1, r7, #2
 8009196:	4620      	mov	r0, r4
 8009198:	f000 fee9 	bl	8009f6e <__any_on>
 800919c:	2800      	cmp	r0, #0
 800919e:	d145      	bne.n	800922c <__gethex+0x280>
 80091a0:	f04f 0a02 	mov.w	sl, #2
 80091a4:	4639      	mov	r1, r7
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff fe98 	bl	8008edc <rshift>
 80091ac:	443d      	add	r5, r7
 80091ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091b2:	42ab      	cmp	r3, r5
 80091b4:	da4c      	bge.n	8009250 <__gethex+0x2a4>
 80091b6:	ee18 0a10 	vmov	r0, s16
 80091ba:	4621      	mov	r1, r4
 80091bc:	f000 fa7c 	bl	80096b8 <_Bfree>
 80091c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091c2:	2300      	movs	r3, #0
 80091c4:	6013      	str	r3, [r2, #0]
 80091c6:	27a3      	movs	r7, #163	; 0xa3
 80091c8:	e785      	b.n	80090d6 <__gethex+0x12a>
 80091ca:	1e73      	subs	r3, r6, #1
 80091cc:	9a05      	ldr	r2, [sp, #20]
 80091ce:	9303      	str	r3, [sp, #12]
 80091d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d019      	beq.n	800920c <__gethex+0x260>
 80091d8:	f1bb 0f20 	cmp.w	fp, #32
 80091dc:	d107      	bne.n	80091ee <__gethex+0x242>
 80091de:	9b02      	ldr	r3, [sp, #8]
 80091e0:	9a00      	ldr	r2, [sp, #0]
 80091e2:	f843 2b04 	str.w	r2, [r3], #4
 80091e6:	9302      	str	r3, [sp, #8]
 80091e8:	2300      	movs	r3, #0
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	469b      	mov	fp, r3
 80091ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80091f2:	f7ff fec5 	bl	8008f80 <__hexdig_fun>
 80091f6:	9b00      	ldr	r3, [sp, #0]
 80091f8:	f000 000f 	and.w	r0, r0, #15
 80091fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009200:	4303      	orrs	r3, r0
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	f10b 0b04 	add.w	fp, fp, #4
 8009208:	9b03      	ldr	r3, [sp, #12]
 800920a:	e00d      	b.n	8009228 <__gethex+0x27c>
 800920c:	9b03      	ldr	r3, [sp, #12]
 800920e:	9a06      	ldr	r2, [sp, #24]
 8009210:	4413      	add	r3, r2
 8009212:	42bb      	cmp	r3, r7
 8009214:	d3e0      	bcc.n	80091d8 <__gethex+0x22c>
 8009216:	4618      	mov	r0, r3
 8009218:	9901      	ldr	r1, [sp, #4]
 800921a:	9307      	str	r3, [sp, #28]
 800921c:	4652      	mov	r2, sl
 800921e:	f7fe f98c 	bl	800753a <strncmp>
 8009222:	9b07      	ldr	r3, [sp, #28]
 8009224:	2800      	cmp	r0, #0
 8009226:	d1d7      	bne.n	80091d8 <__gethex+0x22c>
 8009228:	461e      	mov	r6, r3
 800922a:	e78b      	b.n	8009144 <__gethex+0x198>
 800922c:	f04f 0a03 	mov.w	sl, #3
 8009230:	e7b8      	b.n	80091a4 <__gethex+0x1f8>
 8009232:	da0a      	bge.n	800924a <__gethex+0x29e>
 8009234:	1a37      	subs	r7, r6, r0
 8009236:	4621      	mov	r1, r4
 8009238:	ee18 0a10 	vmov	r0, s16
 800923c:	463a      	mov	r2, r7
 800923e:	f000 fc57 	bl	8009af0 <__lshift>
 8009242:	1bed      	subs	r5, r5, r7
 8009244:	4604      	mov	r4, r0
 8009246:	f100 0914 	add.w	r9, r0, #20
 800924a:	f04f 0a00 	mov.w	sl, #0
 800924e:	e7ae      	b.n	80091ae <__gethex+0x202>
 8009250:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009254:	42a8      	cmp	r0, r5
 8009256:	dd72      	ble.n	800933e <__gethex+0x392>
 8009258:	1b45      	subs	r5, r0, r5
 800925a:	42ae      	cmp	r6, r5
 800925c:	dc36      	bgt.n	80092cc <__gethex+0x320>
 800925e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d02a      	beq.n	80092bc <__gethex+0x310>
 8009266:	2b03      	cmp	r3, #3
 8009268:	d02c      	beq.n	80092c4 <__gethex+0x318>
 800926a:	2b01      	cmp	r3, #1
 800926c:	d115      	bne.n	800929a <__gethex+0x2ee>
 800926e:	42ae      	cmp	r6, r5
 8009270:	d113      	bne.n	800929a <__gethex+0x2ee>
 8009272:	2e01      	cmp	r6, #1
 8009274:	d10b      	bne.n	800928e <__gethex+0x2e2>
 8009276:	9a04      	ldr	r2, [sp, #16]
 8009278:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	2301      	movs	r3, #1
 8009280:	6123      	str	r3, [r4, #16]
 8009282:	f8c9 3000 	str.w	r3, [r9]
 8009286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009288:	2762      	movs	r7, #98	; 0x62
 800928a:	601c      	str	r4, [r3, #0]
 800928c:	e723      	b.n	80090d6 <__gethex+0x12a>
 800928e:	1e71      	subs	r1, r6, #1
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fe6c 	bl	8009f6e <__any_on>
 8009296:	2800      	cmp	r0, #0
 8009298:	d1ed      	bne.n	8009276 <__gethex+0x2ca>
 800929a:	ee18 0a10 	vmov	r0, s16
 800929e:	4621      	mov	r1, r4
 80092a0:	f000 fa0a 	bl	80096b8 <_Bfree>
 80092a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092a6:	2300      	movs	r3, #0
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	2750      	movs	r7, #80	; 0x50
 80092ac:	e713      	b.n	80090d6 <__gethex+0x12a>
 80092ae:	bf00      	nop
 80092b0:	0800bcd8 	.word	0x0800bcd8
 80092b4:	0800bc5c 	.word	0x0800bc5c
 80092b8:	0800bc6d 	.word	0x0800bc6d
 80092bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1eb      	bne.n	800929a <__gethex+0x2ee>
 80092c2:	e7d8      	b.n	8009276 <__gethex+0x2ca>
 80092c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1d5      	bne.n	8009276 <__gethex+0x2ca>
 80092ca:	e7e6      	b.n	800929a <__gethex+0x2ee>
 80092cc:	1e6f      	subs	r7, r5, #1
 80092ce:	f1ba 0f00 	cmp.w	sl, #0
 80092d2:	d131      	bne.n	8009338 <__gethex+0x38c>
 80092d4:	b127      	cbz	r7, 80092e0 <__gethex+0x334>
 80092d6:	4639      	mov	r1, r7
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fe48 	bl	8009f6e <__any_on>
 80092de:	4682      	mov	sl, r0
 80092e0:	117b      	asrs	r3, r7, #5
 80092e2:	2101      	movs	r1, #1
 80092e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092e8:	f007 071f 	and.w	r7, r7, #31
 80092ec:	fa01 f707 	lsl.w	r7, r1, r7
 80092f0:	421f      	tst	r7, r3
 80092f2:	4629      	mov	r1, r5
 80092f4:	4620      	mov	r0, r4
 80092f6:	bf18      	it	ne
 80092f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80092fc:	1b76      	subs	r6, r6, r5
 80092fe:	f7ff fded 	bl	8008edc <rshift>
 8009302:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009306:	2702      	movs	r7, #2
 8009308:	f1ba 0f00 	cmp.w	sl, #0
 800930c:	d048      	beq.n	80093a0 <__gethex+0x3f4>
 800930e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009312:	2b02      	cmp	r3, #2
 8009314:	d015      	beq.n	8009342 <__gethex+0x396>
 8009316:	2b03      	cmp	r3, #3
 8009318:	d017      	beq.n	800934a <__gethex+0x39e>
 800931a:	2b01      	cmp	r3, #1
 800931c:	d109      	bne.n	8009332 <__gethex+0x386>
 800931e:	f01a 0f02 	tst.w	sl, #2
 8009322:	d006      	beq.n	8009332 <__gethex+0x386>
 8009324:	f8d9 0000 	ldr.w	r0, [r9]
 8009328:	ea4a 0a00 	orr.w	sl, sl, r0
 800932c:	f01a 0f01 	tst.w	sl, #1
 8009330:	d10e      	bne.n	8009350 <__gethex+0x3a4>
 8009332:	f047 0710 	orr.w	r7, r7, #16
 8009336:	e033      	b.n	80093a0 <__gethex+0x3f4>
 8009338:	f04f 0a01 	mov.w	sl, #1
 800933c:	e7d0      	b.n	80092e0 <__gethex+0x334>
 800933e:	2701      	movs	r7, #1
 8009340:	e7e2      	b.n	8009308 <__gethex+0x35c>
 8009342:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009344:	f1c3 0301 	rsb	r3, r3, #1
 8009348:	9315      	str	r3, [sp, #84]	; 0x54
 800934a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f0      	beq.n	8009332 <__gethex+0x386>
 8009350:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009354:	f104 0314 	add.w	r3, r4, #20
 8009358:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800935c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009360:	f04f 0c00 	mov.w	ip, #0
 8009364:	4618      	mov	r0, r3
 8009366:	f853 2b04 	ldr.w	r2, [r3], #4
 800936a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800936e:	d01c      	beq.n	80093aa <__gethex+0x3fe>
 8009370:	3201      	adds	r2, #1
 8009372:	6002      	str	r2, [r0, #0]
 8009374:	2f02      	cmp	r7, #2
 8009376:	f104 0314 	add.w	r3, r4, #20
 800937a:	d13f      	bne.n	80093fc <__gethex+0x450>
 800937c:	f8d8 2000 	ldr.w	r2, [r8]
 8009380:	3a01      	subs	r2, #1
 8009382:	42b2      	cmp	r2, r6
 8009384:	d10a      	bne.n	800939c <__gethex+0x3f0>
 8009386:	1171      	asrs	r1, r6, #5
 8009388:	2201      	movs	r2, #1
 800938a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800938e:	f006 061f 	and.w	r6, r6, #31
 8009392:	fa02 f606 	lsl.w	r6, r2, r6
 8009396:	421e      	tst	r6, r3
 8009398:	bf18      	it	ne
 800939a:	4617      	movne	r7, r2
 800939c:	f047 0720 	orr.w	r7, r7, #32
 80093a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093a2:	601c      	str	r4, [r3, #0]
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	601d      	str	r5, [r3, #0]
 80093a8:	e695      	b.n	80090d6 <__gethex+0x12a>
 80093aa:	4299      	cmp	r1, r3
 80093ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80093b0:	d8d8      	bhi.n	8009364 <__gethex+0x3b8>
 80093b2:	68a3      	ldr	r3, [r4, #8]
 80093b4:	459b      	cmp	fp, r3
 80093b6:	db19      	blt.n	80093ec <__gethex+0x440>
 80093b8:	6861      	ldr	r1, [r4, #4]
 80093ba:	ee18 0a10 	vmov	r0, s16
 80093be:	3101      	adds	r1, #1
 80093c0:	f000 f93a 	bl	8009638 <_Balloc>
 80093c4:	4681      	mov	r9, r0
 80093c6:	b918      	cbnz	r0, 80093d0 <__gethex+0x424>
 80093c8:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <__gethex+0x488>)
 80093ca:	4602      	mov	r2, r0
 80093cc:	2184      	movs	r1, #132	; 0x84
 80093ce:	e6a8      	b.n	8009122 <__gethex+0x176>
 80093d0:	6922      	ldr	r2, [r4, #16]
 80093d2:	3202      	adds	r2, #2
 80093d4:	f104 010c 	add.w	r1, r4, #12
 80093d8:	0092      	lsls	r2, r2, #2
 80093da:	300c      	adds	r0, #12
 80093dc:	f000 f91e 	bl	800961c <memcpy>
 80093e0:	4621      	mov	r1, r4
 80093e2:	ee18 0a10 	vmov	r0, s16
 80093e6:	f000 f967 	bl	80096b8 <_Bfree>
 80093ea:	464c      	mov	r4, r9
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093f4:	6122      	str	r2, [r4, #16]
 80093f6:	2201      	movs	r2, #1
 80093f8:	615a      	str	r2, [r3, #20]
 80093fa:	e7bb      	b.n	8009374 <__gethex+0x3c8>
 80093fc:	6922      	ldr	r2, [r4, #16]
 80093fe:	455a      	cmp	r2, fp
 8009400:	dd0b      	ble.n	800941a <__gethex+0x46e>
 8009402:	2101      	movs	r1, #1
 8009404:	4620      	mov	r0, r4
 8009406:	f7ff fd69 	bl	8008edc <rshift>
 800940a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800940e:	3501      	adds	r5, #1
 8009410:	42ab      	cmp	r3, r5
 8009412:	f6ff aed0 	blt.w	80091b6 <__gethex+0x20a>
 8009416:	2701      	movs	r7, #1
 8009418:	e7c0      	b.n	800939c <__gethex+0x3f0>
 800941a:	f016 061f 	ands.w	r6, r6, #31
 800941e:	d0fa      	beq.n	8009416 <__gethex+0x46a>
 8009420:	449a      	add	sl, r3
 8009422:	f1c6 0620 	rsb	r6, r6, #32
 8009426:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800942a:	f000 f9fb 	bl	8009824 <__hi0bits>
 800942e:	42b0      	cmp	r0, r6
 8009430:	dbe7      	blt.n	8009402 <__gethex+0x456>
 8009432:	e7f0      	b.n	8009416 <__gethex+0x46a>
 8009434:	0800bc5c 	.word	0x0800bc5c

08009438 <L_shift>:
 8009438:	f1c2 0208 	rsb	r2, r2, #8
 800943c:	0092      	lsls	r2, r2, #2
 800943e:	b570      	push	{r4, r5, r6, lr}
 8009440:	f1c2 0620 	rsb	r6, r2, #32
 8009444:	6843      	ldr	r3, [r0, #4]
 8009446:	6804      	ldr	r4, [r0, #0]
 8009448:	fa03 f506 	lsl.w	r5, r3, r6
 800944c:	432c      	orrs	r4, r5
 800944e:	40d3      	lsrs	r3, r2
 8009450:	6004      	str	r4, [r0, #0]
 8009452:	f840 3f04 	str.w	r3, [r0, #4]!
 8009456:	4288      	cmp	r0, r1
 8009458:	d3f4      	bcc.n	8009444 <L_shift+0xc>
 800945a:	bd70      	pop	{r4, r5, r6, pc}

0800945c <__match>:
 800945c:	b530      	push	{r4, r5, lr}
 800945e:	6803      	ldr	r3, [r0, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009466:	b914      	cbnz	r4, 800946e <__match+0x12>
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	2001      	movs	r0, #1
 800946c:	bd30      	pop	{r4, r5, pc}
 800946e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009472:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009476:	2d19      	cmp	r5, #25
 8009478:	bf98      	it	ls
 800947a:	3220      	addls	r2, #32
 800947c:	42a2      	cmp	r2, r4
 800947e:	d0f0      	beq.n	8009462 <__match+0x6>
 8009480:	2000      	movs	r0, #0
 8009482:	e7f3      	b.n	800946c <__match+0x10>

08009484 <__hexnan>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	680b      	ldr	r3, [r1, #0]
 800948a:	6801      	ldr	r1, [r0, #0]
 800948c:	115e      	asrs	r6, r3, #5
 800948e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009492:	f013 031f 	ands.w	r3, r3, #31
 8009496:	b087      	sub	sp, #28
 8009498:	bf18      	it	ne
 800949a:	3604      	addne	r6, #4
 800949c:	2500      	movs	r5, #0
 800949e:	1f37      	subs	r7, r6, #4
 80094a0:	4682      	mov	sl, r0
 80094a2:	4690      	mov	r8, r2
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80094aa:	46b9      	mov	r9, r7
 80094ac:	463c      	mov	r4, r7
 80094ae:	9502      	str	r5, [sp, #8]
 80094b0:	46ab      	mov	fp, r5
 80094b2:	784a      	ldrb	r2, [r1, #1]
 80094b4:	1c4b      	adds	r3, r1, #1
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	b342      	cbz	r2, 800950c <__hexnan+0x88>
 80094ba:	4610      	mov	r0, r2
 80094bc:	9105      	str	r1, [sp, #20]
 80094be:	9204      	str	r2, [sp, #16]
 80094c0:	f7ff fd5e 	bl	8008f80 <__hexdig_fun>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d14f      	bne.n	8009568 <__hexnan+0xe4>
 80094c8:	9a04      	ldr	r2, [sp, #16]
 80094ca:	9905      	ldr	r1, [sp, #20]
 80094cc:	2a20      	cmp	r2, #32
 80094ce:	d818      	bhi.n	8009502 <__hexnan+0x7e>
 80094d0:	9b02      	ldr	r3, [sp, #8]
 80094d2:	459b      	cmp	fp, r3
 80094d4:	dd13      	ble.n	80094fe <__hexnan+0x7a>
 80094d6:	454c      	cmp	r4, r9
 80094d8:	d206      	bcs.n	80094e8 <__hexnan+0x64>
 80094da:	2d07      	cmp	r5, #7
 80094dc:	dc04      	bgt.n	80094e8 <__hexnan+0x64>
 80094de:	462a      	mov	r2, r5
 80094e0:	4649      	mov	r1, r9
 80094e2:	4620      	mov	r0, r4
 80094e4:	f7ff ffa8 	bl	8009438 <L_shift>
 80094e8:	4544      	cmp	r4, r8
 80094ea:	d950      	bls.n	800958e <__hexnan+0x10a>
 80094ec:	2300      	movs	r3, #0
 80094ee:	f1a4 0904 	sub.w	r9, r4, #4
 80094f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80094f6:	f8cd b008 	str.w	fp, [sp, #8]
 80094fa:	464c      	mov	r4, r9
 80094fc:	461d      	mov	r5, r3
 80094fe:	9903      	ldr	r1, [sp, #12]
 8009500:	e7d7      	b.n	80094b2 <__hexnan+0x2e>
 8009502:	2a29      	cmp	r2, #41	; 0x29
 8009504:	d156      	bne.n	80095b4 <__hexnan+0x130>
 8009506:	3102      	adds	r1, #2
 8009508:	f8ca 1000 	str.w	r1, [sl]
 800950c:	f1bb 0f00 	cmp.w	fp, #0
 8009510:	d050      	beq.n	80095b4 <__hexnan+0x130>
 8009512:	454c      	cmp	r4, r9
 8009514:	d206      	bcs.n	8009524 <__hexnan+0xa0>
 8009516:	2d07      	cmp	r5, #7
 8009518:	dc04      	bgt.n	8009524 <__hexnan+0xa0>
 800951a:	462a      	mov	r2, r5
 800951c:	4649      	mov	r1, r9
 800951e:	4620      	mov	r0, r4
 8009520:	f7ff ff8a 	bl	8009438 <L_shift>
 8009524:	4544      	cmp	r4, r8
 8009526:	d934      	bls.n	8009592 <__hexnan+0x10e>
 8009528:	f1a8 0204 	sub.w	r2, r8, #4
 800952c:	4623      	mov	r3, r4
 800952e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009532:	f842 1f04 	str.w	r1, [r2, #4]!
 8009536:	429f      	cmp	r7, r3
 8009538:	d2f9      	bcs.n	800952e <__hexnan+0xaa>
 800953a:	1b3b      	subs	r3, r7, r4
 800953c:	f023 0303 	bic.w	r3, r3, #3
 8009540:	3304      	adds	r3, #4
 8009542:	3401      	adds	r4, #1
 8009544:	3e03      	subs	r6, #3
 8009546:	42b4      	cmp	r4, r6
 8009548:	bf88      	it	hi
 800954a:	2304      	movhi	r3, #4
 800954c:	4443      	add	r3, r8
 800954e:	2200      	movs	r2, #0
 8009550:	f843 2b04 	str.w	r2, [r3], #4
 8009554:	429f      	cmp	r7, r3
 8009556:	d2fb      	bcs.n	8009550 <__hexnan+0xcc>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	b91b      	cbnz	r3, 8009564 <__hexnan+0xe0>
 800955c:	4547      	cmp	r7, r8
 800955e:	d127      	bne.n	80095b0 <__hexnan+0x12c>
 8009560:	2301      	movs	r3, #1
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	2005      	movs	r0, #5
 8009566:	e026      	b.n	80095b6 <__hexnan+0x132>
 8009568:	3501      	adds	r5, #1
 800956a:	2d08      	cmp	r5, #8
 800956c:	f10b 0b01 	add.w	fp, fp, #1
 8009570:	dd06      	ble.n	8009580 <__hexnan+0xfc>
 8009572:	4544      	cmp	r4, r8
 8009574:	d9c3      	bls.n	80094fe <__hexnan+0x7a>
 8009576:	2300      	movs	r3, #0
 8009578:	f844 3c04 	str.w	r3, [r4, #-4]
 800957c:	2501      	movs	r5, #1
 800957e:	3c04      	subs	r4, #4
 8009580:	6822      	ldr	r2, [r4, #0]
 8009582:	f000 000f 	and.w	r0, r0, #15
 8009586:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800958a:	6022      	str	r2, [r4, #0]
 800958c:	e7b7      	b.n	80094fe <__hexnan+0x7a>
 800958e:	2508      	movs	r5, #8
 8009590:	e7b5      	b.n	80094fe <__hexnan+0x7a>
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0df      	beq.n	8009558 <__hexnan+0xd4>
 8009598:	f04f 32ff 	mov.w	r2, #4294967295
 800959c:	f1c3 0320 	rsb	r3, r3, #32
 80095a0:	fa22 f303 	lsr.w	r3, r2, r3
 80095a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095a8:	401a      	ands	r2, r3
 80095aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80095ae:	e7d3      	b.n	8009558 <__hexnan+0xd4>
 80095b0:	3f04      	subs	r7, #4
 80095b2:	e7d1      	b.n	8009558 <__hexnan+0xd4>
 80095b4:	2004      	movs	r0, #4
 80095b6:	b007      	add	sp, #28
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095bc <_localeconv_r>:
 80095bc:	4800      	ldr	r0, [pc, #0]	; (80095c0 <_localeconv_r+0x4>)
 80095be:	4770      	bx	lr
 80095c0:	20000200 	.word	0x20000200

080095c4 <_lseek_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4d07      	ldr	r5, [pc, #28]	; (80095e4 <_lseek_r+0x20>)
 80095c8:	4604      	mov	r4, r0
 80095ca:	4608      	mov	r0, r1
 80095cc:	4611      	mov	r1, r2
 80095ce:	2200      	movs	r2, #0
 80095d0:	602a      	str	r2, [r5, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	f7f8 f93e 	bl	8001854 <_lseek>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_lseek_r+0x1e>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_lseek_r+0x1e>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	20000618 	.word	0x20000618

080095e8 <malloc>:
 80095e8:	4b02      	ldr	r3, [pc, #8]	; (80095f4 <malloc+0xc>)
 80095ea:	4601      	mov	r1, r0
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f000 bd3f 	b.w	800a070 <_malloc_r>
 80095f2:	bf00      	nop
 80095f4:	200000a8 	.word	0x200000a8

080095f8 <__ascii_mbtowc>:
 80095f8:	b082      	sub	sp, #8
 80095fa:	b901      	cbnz	r1, 80095fe <__ascii_mbtowc+0x6>
 80095fc:	a901      	add	r1, sp, #4
 80095fe:	b142      	cbz	r2, 8009612 <__ascii_mbtowc+0x1a>
 8009600:	b14b      	cbz	r3, 8009616 <__ascii_mbtowc+0x1e>
 8009602:	7813      	ldrb	r3, [r2, #0]
 8009604:	600b      	str	r3, [r1, #0]
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	1e10      	subs	r0, r2, #0
 800960a:	bf18      	it	ne
 800960c:	2001      	movne	r0, #1
 800960e:	b002      	add	sp, #8
 8009610:	4770      	bx	lr
 8009612:	4610      	mov	r0, r2
 8009614:	e7fb      	b.n	800960e <__ascii_mbtowc+0x16>
 8009616:	f06f 0001 	mvn.w	r0, #1
 800961a:	e7f8      	b.n	800960e <__ascii_mbtowc+0x16>

0800961c <memcpy>:
 800961c:	440a      	add	r2, r1
 800961e:	4291      	cmp	r1, r2
 8009620:	f100 33ff 	add.w	r3, r0, #4294967295
 8009624:	d100      	bne.n	8009628 <memcpy+0xc>
 8009626:	4770      	bx	lr
 8009628:	b510      	push	{r4, lr}
 800962a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800962e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009632:	4291      	cmp	r1, r2
 8009634:	d1f9      	bne.n	800962a <memcpy+0xe>
 8009636:	bd10      	pop	{r4, pc}

08009638 <_Balloc>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800963c:	4604      	mov	r4, r0
 800963e:	460d      	mov	r5, r1
 8009640:	b976      	cbnz	r6, 8009660 <_Balloc+0x28>
 8009642:	2010      	movs	r0, #16
 8009644:	f7ff ffd0 	bl	80095e8 <malloc>
 8009648:	4602      	mov	r2, r0
 800964a:	6260      	str	r0, [r4, #36]	; 0x24
 800964c:	b920      	cbnz	r0, 8009658 <_Balloc+0x20>
 800964e:	4b18      	ldr	r3, [pc, #96]	; (80096b0 <_Balloc+0x78>)
 8009650:	4818      	ldr	r0, [pc, #96]	; (80096b4 <_Balloc+0x7c>)
 8009652:	2166      	movs	r1, #102	; 0x66
 8009654:	f001 fb0c 	bl	800ac70 <__assert_func>
 8009658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800965c:	6006      	str	r6, [r0, #0]
 800965e:	60c6      	str	r6, [r0, #12]
 8009660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009662:	68f3      	ldr	r3, [r6, #12]
 8009664:	b183      	cbz	r3, 8009688 <_Balloc+0x50>
 8009666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800966e:	b9b8      	cbnz	r0, 80096a0 <_Balloc+0x68>
 8009670:	2101      	movs	r1, #1
 8009672:	fa01 f605 	lsl.w	r6, r1, r5
 8009676:	1d72      	adds	r2, r6, #5
 8009678:	0092      	lsls	r2, r2, #2
 800967a:	4620      	mov	r0, r4
 800967c:	f000 fc98 	bl	8009fb0 <_calloc_r>
 8009680:	b160      	cbz	r0, 800969c <_Balloc+0x64>
 8009682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009686:	e00e      	b.n	80096a6 <_Balloc+0x6e>
 8009688:	2221      	movs	r2, #33	; 0x21
 800968a:	2104      	movs	r1, #4
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fc8f 	bl	8009fb0 <_calloc_r>
 8009692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009694:	60f0      	str	r0, [r6, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e4      	bne.n	8009666 <_Balloc+0x2e>
 800969c:	2000      	movs	r0, #0
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	6802      	ldr	r2, [r0, #0]
 80096a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096a6:	2300      	movs	r3, #0
 80096a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096ac:	e7f7      	b.n	800969e <_Balloc+0x66>
 80096ae:	bf00      	nop
 80096b0:	0800bbe6 	.word	0x0800bbe6
 80096b4:	0800bcec 	.word	0x0800bcec

080096b8 <_Bfree>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096bc:	4605      	mov	r5, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	b976      	cbnz	r6, 80096e0 <_Bfree+0x28>
 80096c2:	2010      	movs	r0, #16
 80096c4:	f7ff ff90 	bl	80095e8 <malloc>
 80096c8:	4602      	mov	r2, r0
 80096ca:	6268      	str	r0, [r5, #36]	; 0x24
 80096cc:	b920      	cbnz	r0, 80096d8 <_Bfree+0x20>
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <_Bfree+0x3c>)
 80096d0:	4809      	ldr	r0, [pc, #36]	; (80096f8 <_Bfree+0x40>)
 80096d2:	218a      	movs	r1, #138	; 0x8a
 80096d4:	f001 facc 	bl	800ac70 <__assert_func>
 80096d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096dc:	6006      	str	r6, [r0, #0]
 80096de:	60c6      	str	r6, [r0, #12]
 80096e0:	b13c      	cbz	r4, 80096f2 <_Bfree+0x3a>
 80096e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096e4:	6862      	ldr	r2, [r4, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096ec:	6021      	str	r1, [r4, #0]
 80096ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	0800bbe6 	.word	0x0800bbe6
 80096f8:	0800bcec 	.word	0x0800bcec

080096fc <__multadd>:
 80096fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009700:	690e      	ldr	r6, [r1, #16]
 8009702:	4607      	mov	r7, r0
 8009704:	4698      	mov	r8, r3
 8009706:	460c      	mov	r4, r1
 8009708:	f101 0014 	add.w	r0, r1, #20
 800970c:	2300      	movs	r3, #0
 800970e:	6805      	ldr	r5, [r0, #0]
 8009710:	b2a9      	uxth	r1, r5
 8009712:	fb02 8101 	mla	r1, r2, r1, r8
 8009716:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800971a:	0c2d      	lsrs	r5, r5, #16
 800971c:	fb02 c505 	mla	r5, r2, r5, ip
 8009720:	b289      	uxth	r1, r1
 8009722:	3301      	adds	r3, #1
 8009724:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009728:	429e      	cmp	r6, r3
 800972a:	f840 1b04 	str.w	r1, [r0], #4
 800972e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009732:	dcec      	bgt.n	800970e <__multadd+0x12>
 8009734:	f1b8 0f00 	cmp.w	r8, #0
 8009738:	d022      	beq.n	8009780 <__multadd+0x84>
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	42b3      	cmp	r3, r6
 800973e:	dc19      	bgt.n	8009774 <__multadd+0x78>
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	4638      	mov	r0, r7
 8009744:	3101      	adds	r1, #1
 8009746:	f7ff ff77 	bl	8009638 <_Balloc>
 800974a:	4605      	mov	r5, r0
 800974c:	b928      	cbnz	r0, 800975a <__multadd+0x5e>
 800974e:	4602      	mov	r2, r0
 8009750:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <__multadd+0x8c>)
 8009752:	480e      	ldr	r0, [pc, #56]	; (800978c <__multadd+0x90>)
 8009754:	21b5      	movs	r1, #181	; 0xb5
 8009756:	f001 fa8b 	bl	800ac70 <__assert_func>
 800975a:	6922      	ldr	r2, [r4, #16]
 800975c:	3202      	adds	r2, #2
 800975e:	f104 010c 	add.w	r1, r4, #12
 8009762:	0092      	lsls	r2, r2, #2
 8009764:	300c      	adds	r0, #12
 8009766:	f7ff ff59 	bl	800961c <memcpy>
 800976a:	4621      	mov	r1, r4
 800976c:	4638      	mov	r0, r7
 800976e:	f7ff ffa3 	bl	80096b8 <_Bfree>
 8009772:	462c      	mov	r4, r5
 8009774:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009778:	3601      	adds	r6, #1
 800977a:	f8c3 8014 	str.w	r8, [r3, #20]
 800977e:	6126      	str	r6, [r4, #16]
 8009780:	4620      	mov	r0, r4
 8009782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009786:	bf00      	nop
 8009788:	0800bc5c 	.word	0x0800bc5c
 800978c:	0800bcec 	.word	0x0800bcec

08009790 <__s2b>:
 8009790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	4615      	mov	r5, r2
 8009798:	461f      	mov	r7, r3
 800979a:	2209      	movs	r2, #9
 800979c:	3308      	adds	r3, #8
 800979e:	4606      	mov	r6, r0
 80097a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a4:	2100      	movs	r1, #0
 80097a6:	2201      	movs	r2, #1
 80097a8:	429a      	cmp	r2, r3
 80097aa:	db09      	blt.n	80097c0 <__s2b+0x30>
 80097ac:	4630      	mov	r0, r6
 80097ae:	f7ff ff43 	bl	8009638 <_Balloc>
 80097b2:	b940      	cbnz	r0, 80097c6 <__s2b+0x36>
 80097b4:	4602      	mov	r2, r0
 80097b6:	4b19      	ldr	r3, [pc, #100]	; (800981c <__s2b+0x8c>)
 80097b8:	4819      	ldr	r0, [pc, #100]	; (8009820 <__s2b+0x90>)
 80097ba:	21ce      	movs	r1, #206	; 0xce
 80097bc:	f001 fa58 	bl	800ac70 <__assert_func>
 80097c0:	0052      	lsls	r2, r2, #1
 80097c2:	3101      	adds	r1, #1
 80097c4:	e7f0      	b.n	80097a8 <__s2b+0x18>
 80097c6:	9b08      	ldr	r3, [sp, #32]
 80097c8:	6143      	str	r3, [r0, #20]
 80097ca:	2d09      	cmp	r5, #9
 80097cc:	f04f 0301 	mov.w	r3, #1
 80097d0:	6103      	str	r3, [r0, #16]
 80097d2:	dd16      	ble.n	8009802 <__s2b+0x72>
 80097d4:	f104 0909 	add.w	r9, r4, #9
 80097d8:	46c8      	mov	r8, r9
 80097da:	442c      	add	r4, r5
 80097dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097e0:	4601      	mov	r1, r0
 80097e2:	3b30      	subs	r3, #48	; 0x30
 80097e4:	220a      	movs	r2, #10
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff ff88 	bl	80096fc <__multadd>
 80097ec:	45a0      	cmp	r8, r4
 80097ee:	d1f5      	bne.n	80097dc <__s2b+0x4c>
 80097f0:	f1a5 0408 	sub.w	r4, r5, #8
 80097f4:	444c      	add	r4, r9
 80097f6:	1b2d      	subs	r5, r5, r4
 80097f8:	1963      	adds	r3, r4, r5
 80097fa:	42bb      	cmp	r3, r7
 80097fc:	db04      	blt.n	8009808 <__s2b+0x78>
 80097fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009802:	340a      	adds	r4, #10
 8009804:	2509      	movs	r5, #9
 8009806:	e7f6      	b.n	80097f6 <__s2b+0x66>
 8009808:	f814 3b01 	ldrb.w	r3, [r4], #1
 800980c:	4601      	mov	r1, r0
 800980e:	3b30      	subs	r3, #48	; 0x30
 8009810:	220a      	movs	r2, #10
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ff72 	bl	80096fc <__multadd>
 8009818:	e7ee      	b.n	80097f8 <__s2b+0x68>
 800981a:	bf00      	nop
 800981c:	0800bc5c 	.word	0x0800bc5c
 8009820:	0800bcec 	.word	0x0800bcec

08009824 <__hi0bits>:
 8009824:	0c03      	lsrs	r3, r0, #16
 8009826:	041b      	lsls	r3, r3, #16
 8009828:	b9d3      	cbnz	r3, 8009860 <__hi0bits+0x3c>
 800982a:	0400      	lsls	r0, r0, #16
 800982c:	2310      	movs	r3, #16
 800982e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009832:	bf04      	itt	eq
 8009834:	0200      	lsleq	r0, r0, #8
 8009836:	3308      	addeq	r3, #8
 8009838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800983c:	bf04      	itt	eq
 800983e:	0100      	lsleq	r0, r0, #4
 8009840:	3304      	addeq	r3, #4
 8009842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009846:	bf04      	itt	eq
 8009848:	0080      	lsleq	r0, r0, #2
 800984a:	3302      	addeq	r3, #2
 800984c:	2800      	cmp	r0, #0
 800984e:	db05      	blt.n	800985c <__hi0bits+0x38>
 8009850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009854:	f103 0301 	add.w	r3, r3, #1
 8009858:	bf08      	it	eq
 800985a:	2320      	moveq	r3, #32
 800985c:	4618      	mov	r0, r3
 800985e:	4770      	bx	lr
 8009860:	2300      	movs	r3, #0
 8009862:	e7e4      	b.n	800982e <__hi0bits+0xa>

08009864 <__lo0bits>:
 8009864:	6803      	ldr	r3, [r0, #0]
 8009866:	f013 0207 	ands.w	r2, r3, #7
 800986a:	4601      	mov	r1, r0
 800986c:	d00b      	beq.n	8009886 <__lo0bits+0x22>
 800986e:	07da      	lsls	r2, r3, #31
 8009870:	d424      	bmi.n	80098bc <__lo0bits+0x58>
 8009872:	0798      	lsls	r0, r3, #30
 8009874:	bf49      	itett	mi
 8009876:	085b      	lsrmi	r3, r3, #1
 8009878:	089b      	lsrpl	r3, r3, #2
 800987a:	2001      	movmi	r0, #1
 800987c:	600b      	strmi	r3, [r1, #0]
 800987e:	bf5c      	itt	pl
 8009880:	600b      	strpl	r3, [r1, #0]
 8009882:	2002      	movpl	r0, #2
 8009884:	4770      	bx	lr
 8009886:	b298      	uxth	r0, r3
 8009888:	b9b0      	cbnz	r0, 80098b8 <__lo0bits+0x54>
 800988a:	0c1b      	lsrs	r3, r3, #16
 800988c:	2010      	movs	r0, #16
 800988e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009892:	bf04      	itt	eq
 8009894:	0a1b      	lsreq	r3, r3, #8
 8009896:	3008      	addeq	r0, #8
 8009898:	071a      	lsls	r2, r3, #28
 800989a:	bf04      	itt	eq
 800989c:	091b      	lsreq	r3, r3, #4
 800989e:	3004      	addeq	r0, #4
 80098a0:	079a      	lsls	r2, r3, #30
 80098a2:	bf04      	itt	eq
 80098a4:	089b      	lsreq	r3, r3, #2
 80098a6:	3002      	addeq	r0, #2
 80098a8:	07da      	lsls	r2, r3, #31
 80098aa:	d403      	bmi.n	80098b4 <__lo0bits+0x50>
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	f100 0001 	add.w	r0, r0, #1
 80098b2:	d005      	beq.n	80098c0 <__lo0bits+0x5c>
 80098b4:	600b      	str	r3, [r1, #0]
 80098b6:	4770      	bx	lr
 80098b8:	4610      	mov	r0, r2
 80098ba:	e7e8      	b.n	800988e <__lo0bits+0x2a>
 80098bc:	2000      	movs	r0, #0
 80098be:	4770      	bx	lr
 80098c0:	2020      	movs	r0, #32
 80098c2:	4770      	bx	lr

080098c4 <__i2b>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	460c      	mov	r4, r1
 80098c8:	2101      	movs	r1, #1
 80098ca:	f7ff feb5 	bl	8009638 <_Balloc>
 80098ce:	4602      	mov	r2, r0
 80098d0:	b928      	cbnz	r0, 80098de <__i2b+0x1a>
 80098d2:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <__i2b+0x24>)
 80098d4:	4805      	ldr	r0, [pc, #20]	; (80098ec <__i2b+0x28>)
 80098d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098da:	f001 f9c9 	bl	800ac70 <__assert_func>
 80098de:	2301      	movs	r3, #1
 80098e0:	6144      	str	r4, [r0, #20]
 80098e2:	6103      	str	r3, [r0, #16]
 80098e4:	bd10      	pop	{r4, pc}
 80098e6:	bf00      	nop
 80098e8:	0800bc5c 	.word	0x0800bc5c
 80098ec:	0800bcec 	.word	0x0800bcec

080098f0 <__multiply>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	4614      	mov	r4, r2
 80098f6:	690a      	ldr	r2, [r1, #16]
 80098f8:	6923      	ldr	r3, [r4, #16]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	bfb8      	it	lt
 80098fe:	460b      	movlt	r3, r1
 8009900:	460d      	mov	r5, r1
 8009902:	bfbc      	itt	lt
 8009904:	4625      	movlt	r5, r4
 8009906:	461c      	movlt	r4, r3
 8009908:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800990c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009910:	68ab      	ldr	r3, [r5, #8]
 8009912:	6869      	ldr	r1, [r5, #4]
 8009914:	eb0a 0709 	add.w	r7, sl, r9
 8009918:	42bb      	cmp	r3, r7
 800991a:	b085      	sub	sp, #20
 800991c:	bfb8      	it	lt
 800991e:	3101      	addlt	r1, #1
 8009920:	f7ff fe8a 	bl	8009638 <_Balloc>
 8009924:	b930      	cbnz	r0, 8009934 <__multiply+0x44>
 8009926:	4602      	mov	r2, r0
 8009928:	4b42      	ldr	r3, [pc, #264]	; (8009a34 <__multiply+0x144>)
 800992a:	4843      	ldr	r0, [pc, #268]	; (8009a38 <__multiply+0x148>)
 800992c:	f240 115d 	movw	r1, #349	; 0x15d
 8009930:	f001 f99e 	bl	800ac70 <__assert_func>
 8009934:	f100 0614 	add.w	r6, r0, #20
 8009938:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800993c:	4633      	mov	r3, r6
 800993e:	2200      	movs	r2, #0
 8009940:	4543      	cmp	r3, r8
 8009942:	d31e      	bcc.n	8009982 <__multiply+0x92>
 8009944:	f105 0c14 	add.w	ip, r5, #20
 8009948:	f104 0314 	add.w	r3, r4, #20
 800994c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009950:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009954:	9202      	str	r2, [sp, #8]
 8009956:	ebac 0205 	sub.w	r2, ip, r5
 800995a:	3a15      	subs	r2, #21
 800995c:	f022 0203 	bic.w	r2, r2, #3
 8009960:	3204      	adds	r2, #4
 8009962:	f105 0115 	add.w	r1, r5, #21
 8009966:	458c      	cmp	ip, r1
 8009968:	bf38      	it	cc
 800996a:	2204      	movcc	r2, #4
 800996c:	9201      	str	r2, [sp, #4]
 800996e:	9a02      	ldr	r2, [sp, #8]
 8009970:	9303      	str	r3, [sp, #12]
 8009972:	429a      	cmp	r2, r3
 8009974:	d808      	bhi.n	8009988 <__multiply+0x98>
 8009976:	2f00      	cmp	r7, #0
 8009978:	dc55      	bgt.n	8009a26 <__multiply+0x136>
 800997a:	6107      	str	r7, [r0, #16]
 800997c:	b005      	add	sp, #20
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	f843 2b04 	str.w	r2, [r3], #4
 8009986:	e7db      	b.n	8009940 <__multiply+0x50>
 8009988:	f8b3 a000 	ldrh.w	sl, [r3]
 800998c:	f1ba 0f00 	cmp.w	sl, #0
 8009990:	d020      	beq.n	80099d4 <__multiply+0xe4>
 8009992:	f105 0e14 	add.w	lr, r5, #20
 8009996:	46b1      	mov	r9, r6
 8009998:	2200      	movs	r2, #0
 800999a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800999e:	f8d9 b000 	ldr.w	fp, [r9]
 80099a2:	b2a1      	uxth	r1, r4
 80099a4:	fa1f fb8b 	uxth.w	fp, fp
 80099a8:	fb0a b101 	mla	r1, sl, r1, fp
 80099ac:	4411      	add	r1, r2
 80099ae:	f8d9 2000 	ldr.w	r2, [r9]
 80099b2:	0c24      	lsrs	r4, r4, #16
 80099b4:	0c12      	lsrs	r2, r2, #16
 80099b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80099ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80099be:	b289      	uxth	r1, r1
 80099c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80099c4:	45f4      	cmp	ip, lr
 80099c6:	f849 1b04 	str.w	r1, [r9], #4
 80099ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80099ce:	d8e4      	bhi.n	800999a <__multiply+0xaa>
 80099d0:	9901      	ldr	r1, [sp, #4]
 80099d2:	5072      	str	r2, [r6, r1]
 80099d4:	9a03      	ldr	r2, [sp, #12]
 80099d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099da:	3304      	adds	r3, #4
 80099dc:	f1b9 0f00 	cmp.w	r9, #0
 80099e0:	d01f      	beq.n	8009a22 <__multiply+0x132>
 80099e2:	6834      	ldr	r4, [r6, #0]
 80099e4:	f105 0114 	add.w	r1, r5, #20
 80099e8:	46b6      	mov	lr, r6
 80099ea:	f04f 0a00 	mov.w	sl, #0
 80099ee:	880a      	ldrh	r2, [r1, #0]
 80099f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80099f4:	fb09 b202 	mla	r2, r9, r2, fp
 80099f8:	4492      	add	sl, r2
 80099fa:	b2a4      	uxth	r4, r4
 80099fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a00:	f84e 4b04 	str.w	r4, [lr], #4
 8009a04:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a08:	f8be 2000 	ldrh.w	r2, [lr]
 8009a0c:	0c24      	lsrs	r4, r4, #16
 8009a0e:	fb09 2404 	mla	r4, r9, r4, r2
 8009a12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a16:	458c      	cmp	ip, r1
 8009a18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a1c:	d8e7      	bhi.n	80099ee <__multiply+0xfe>
 8009a1e:	9a01      	ldr	r2, [sp, #4]
 8009a20:	50b4      	str	r4, [r6, r2]
 8009a22:	3604      	adds	r6, #4
 8009a24:	e7a3      	b.n	800996e <__multiply+0x7e>
 8009a26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1a5      	bne.n	800997a <__multiply+0x8a>
 8009a2e:	3f01      	subs	r7, #1
 8009a30:	e7a1      	b.n	8009976 <__multiply+0x86>
 8009a32:	bf00      	nop
 8009a34:	0800bc5c 	.word	0x0800bc5c
 8009a38:	0800bcec 	.word	0x0800bcec

08009a3c <__pow5mult>:
 8009a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a40:	4615      	mov	r5, r2
 8009a42:	f012 0203 	ands.w	r2, r2, #3
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	d007      	beq.n	8009a5c <__pow5mult+0x20>
 8009a4c:	4c25      	ldr	r4, [pc, #148]	; (8009ae4 <__pow5mult+0xa8>)
 8009a4e:	3a01      	subs	r2, #1
 8009a50:	2300      	movs	r3, #0
 8009a52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a56:	f7ff fe51 	bl	80096fc <__multadd>
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	10ad      	asrs	r5, r5, #2
 8009a5e:	d03d      	beq.n	8009adc <__pow5mult+0xa0>
 8009a60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a62:	b97c      	cbnz	r4, 8009a84 <__pow5mult+0x48>
 8009a64:	2010      	movs	r0, #16
 8009a66:	f7ff fdbf 	bl	80095e8 <malloc>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a6e:	b928      	cbnz	r0, 8009a7c <__pow5mult+0x40>
 8009a70:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <__pow5mult+0xac>)
 8009a72:	481e      	ldr	r0, [pc, #120]	; (8009aec <__pow5mult+0xb0>)
 8009a74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a78:	f001 f8fa 	bl	800ac70 <__assert_func>
 8009a7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a80:	6004      	str	r4, [r0, #0]
 8009a82:	60c4      	str	r4, [r0, #12]
 8009a84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a8c:	b94c      	cbnz	r4, 8009aa2 <__pow5mult+0x66>
 8009a8e:	f240 2171 	movw	r1, #625	; 0x271
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff ff16 	bl	80098c4 <__i2b>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	f04f 0900 	mov.w	r9, #0
 8009aa6:	07eb      	lsls	r3, r5, #31
 8009aa8:	d50a      	bpl.n	8009ac0 <__pow5mult+0x84>
 8009aaa:	4639      	mov	r1, r7
 8009aac:	4622      	mov	r2, r4
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7ff ff1e 	bl	80098f0 <__multiply>
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f7ff fdfd 	bl	80096b8 <_Bfree>
 8009abe:	4647      	mov	r7, r8
 8009ac0:	106d      	asrs	r5, r5, #1
 8009ac2:	d00b      	beq.n	8009adc <__pow5mult+0xa0>
 8009ac4:	6820      	ldr	r0, [r4, #0]
 8009ac6:	b938      	cbnz	r0, 8009ad8 <__pow5mult+0x9c>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	4621      	mov	r1, r4
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7ff ff0f 	bl	80098f0 <__multiply>
 8009ad2:	6020      	str	r0, [r4, #0]
 8009ad4:	f8c0 9000 	str.w	r9, [r0]
 8009ad8:	4604      	mov	r4, r0
 8009ada:	e7e4      	b.n	8009aa6 <__pow5mult+0x6a>
 8009adc:	4638      	mov	r0, r7
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800be40 	.word	0x0800be40
 8009ae8:	0800bbe6 	.word	0x0800bbe6
 8009aec:	0800bcec 	.word	0x0800bcec

08009af0 <__lshift>:
 8009af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	460c      	mov	r4, r1
 8009af6:	6849      	ldr	r1, [r1, #4]
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	4607      	mov	r7, r0
 8009b02:	4691      	mov	r9, r2
 8009b04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b08:	f108 0601 	add.w	r6, r8, #1
 8009b0c:	42b3      	cmp	r3, r6
 8009b0e:	db0b      	blt.n	8009b28 <__lshift+0x38>
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff fd91 	bl	8009638 <_Balloc>
 8009b16:	4605      	mov	r5, r0
 8009b18:	b948      	cbnz	r0, 8009b2e <__lshift+0x3e>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4b28      	ldr	r3, [pc, #160]	; (8009bc0 <__lshift+0xd0>)
 8009b1e:	4829      	ldr	r0, [pc, #164]	; (8009bc4 <__lshift+0xd4>)
 8009b20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b24:	f001 f8a4 	bl	800ac70 <__assert_func>
 8009b28:	3101      	adds	r1, #1
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	e7ee      	b.n	8009b0c <__lshift+0x1c>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f100 0114 	add.w	r1, r0, #20
 8009b34:	f100 0210 	add.w	r2, r0, #16
 8009b38:	4618      	mov	r0, r3
 8009b3a:	4553      	cmp	r3, sl
 8009b3c:	db33      	blt.n	8009ba6 <__lshift+0xb6>
 8009b3e:	6920      	ldr	r0, [r4, #16]
 8009b40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b44:	f104 0314 	add.w	r3, r4, #20
 8009b48:	f019 091f 	ands.w	r9, r9, #31
 8009b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b54:	d02b      	beq.n	8009bae <__lshift+0xbe>
 8009b56:	f1c9 0e20 	rsb	lr, r9, #32
 8009b5a:	468a      	mov	sl, r1
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	fa00 f009 	lsl.w	r0, r0, r9
 8009b64:	4302      	orrs	r2, r0
 8009b66:	f84a 2b04 	str.w	r2, [sl], #4
 8009b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6e:	459c      	cmp	ip, r3
 8009b70:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b74:	d8f3      	bhi.n	8009b5e <__lshift+0x6e>
 8009b76:	ebac 0304 	sub.w	r3, ip, r4
 8009b7a:	3b15      	subs	r3, #21
 8009b7c:	f023 0303 	bic.w	r3, r3, #3
 8009b80:	3304      	adds	r3, #4
 8009b82:	f104 0015 	add.w	r0, r4, #21
 8009b86:	4584      	cmp	ip, r0
 8009b88:	bf38      	it	cc
 8009b8a:	2304      	movcc	r3, #4
 8009b8c:	50ca      	str	r2, [r1, r3]
 8009b8e:	b10a      	cbz	r2, 8009b94 <__lshift+0xa4>
 8009b90:	f108 0602 	add.w	r6, r8, #2
 8009b94:	3e01      	subs	r6, #1
 8009b96:	4638      	mov	r0, r7
 8009b98:	612e      	str	r6, [r5, #16]
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	f7ff fd8c 	bl	80096b8 <_Bfree>
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009baa:	3301      	adds	r3, #1
 8009bac:	e7c5      	b.n	8009b3a <__lshift+0x4a>
 8009bae:	3904      	subs	r1, #4
 8009bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bb8:	459c      	cmp	ip, r3
 8009bba:	d8f9      	bhi.n	8009bb0 <__lshift+0xc0>
 8009bbc:	e7ea      	b.n	8009b94 <__lshift+0xa4>
 8009bbe:	bf00      	nop
 8009bc0:	0800bc5c 	.word	0x0800bc5c
 8009bc4:	0800bcec 	.word	0x0800bcec

08009bc8 <__mcmp>:
 8009bc8:	b530      	push	{r4, r5, lr}
 8009bca:	6902      	ldr	r2, [r0, #16]
 8009bcc:	690c      	ldr	r4, [r1, #16]
 8009bce:	1b12      	subs	r2, r2, r4
 8009bd0:	d10e      	bne.n	8009bf0 <__mcmp+0x28>
 8009bd2:	f100 0314 	add.w	r3, r0, #20
 8009bd6:	3114      	adds	r1, #20
 8009bd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009be0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009be4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009be8:	42a5      	cmp	r5, r4
 8009bea:	d003      	beq.n	8009bf4 <__mcmp+0x2c>
 8009bec:	d305      	bcc.n	8009bfa <__mcmp+0x32>
 8009bee:	2201      	movs	r2, #1
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	bd30      	pop	{r4, r5, pc}
 8009bf4:	4283      	cmp	r3, r0
 8009bf6:	d3f3      	bcc.n	8009be0 <__mcmp+0x18>
 8009bf8:	e7fa      	b.n	8009bf0 <__mcmp+0x28>
 8009bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfe:	e7f7      	b.n	8009bf0 <__mcmp+0x28>

08009c00 <__mdiff>:
 8009c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	460c      	mov	r4, r1
 8009c06:	4606      	mov	r6, r0
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4617      	mov	r7, r2
 8009c0e:	f7ff ffdb 	bl	8009bc8 <__mcmp>
 8009c12:	1e05      	subs	r5, r0, #0
 8009c14:	d110      	bne.n	8009c38 <__mdiff+0x38>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff fd0d 	bl	8009638 <_Balloc>
 8009c1e:	b930      	cbnz	r0, 8009c2e <__mdiff+0x2e>
 8009c20:	4b39      	ldr	r3, [pc, #228]	; (8009d08 <__mdiff+0x108>)
 8009c22:	4602      	mov	r2, r0
 8009c24:	f240 2132 	movw	r1, #562	; 0x232
 8009c28:	4838      	ldr	r0, [pc, #224]	; (8009d0c <__mdiff+0x10c>)
 8009c2a:	f001 f821 	bl	800ac70 <__assert_func>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c38:	bfa4      	itt	ge
 8009c3a:	463b      	movge	r3, r7
 8009c3c:	4627      	movge	r7, r4
 8009c3e:	4630      	mov	r0, r6
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	bfa6      	itte	ge
 8009c44:	461c      	movge	r4, r3
 8009c46:	2500      	movge	r5, #0
 8009c48:	2501      	movlt	r5, #1
 8009c4a:	f7ff fcf5 	bl	8009638 <_Balloc>
 8009c4e:	b920      	cbnz	r0, 8009c5a <__mdiff+0x5a>
 8009c50:	4b2d      	ldr	r3, [pc, #180]	; (8009d08 <__mdiff+0x108>)
 8009c52:	4602      	mov	r2, r0
 8009c54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c58:	e7e6      	b.n	8009c28 <__mdiff+0x28>
 8009c5a:	693e      	ldr	r6, [r7, #16]
 8009c5c:	60c5      	str	r5, [r0, #12]
 8009c5e:	6925      	ldr	r5, [r4, #16]
 8009c60:	f107 0114 	add.w	r1, r7, #20
 8009c64:	f104 0914 	add.w	r9, r4, #20
 8009c68:	f100 0e14 	add.w	lr, r0, #20
 8009c6c:	f107 0210 	add.w	r2, r7, #16
 8009c70:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c74:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c78:	46f2      	mov	sl, lr
 8009c7a:	2700      	movs	r7, #0
 8009c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c84:	fa1f f883 	uxth.w	r8, r3
 8009c88:	fa17 f78b 	uxtah	r7, r7, fp
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	eba7 0808 	sub.w	r8, r7, r8
 8009c92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c9a:	fa1f f888 	uxth.w	r8, r8
 8009c9e:	141f      	asrs	r7, r3, #16
 8009ca0:	454d      	cmp	r5, r9
 8009ca2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ca6:	f84a 3b04 	str.w	r3, [sl], #4
 8009caa:	d8e7      	bhi.n	8009c7c <__mdiff+0x7c>
 8009cac:	1b2b      	subs	r3, r5, r4
 8009cae:	3b15      	subs	r3, #21
 8009cb0:	f023 0303 	bic.w	r3, r3, #3
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	3415      	adds	r4, #21
 8009cb8:	42a5      	cmp	r5, r4
 8009cba:	bf38      	it	cc
 8009cbc:	2304      	movcc	r3, #4
 8009cbe:	4419      	add	r1, r3
 8009cc0:	4473      	add	r3, lr
 8009cc2:	469e      	mov	lr, r3
 8009cc4:	460d      	mov	r5, r1
 8009cc6:	4565      	cmp	r5, ip
 8009cc8:	d30e      	bcc.n	8009ce8 <__mdiff+0xe8>
 8009cca:	f10c 0203 	add.w	r2, ip, #3
 8009cce:	1a52      	subs	r2, r2, r1
 8009cd0:	f022 0203 	bic.w	r2, r2, #3
 8009cd4:	3903      	subs	r1, #3
 8009cd6:	458c      	cmp	ip, r1
 8009cd8:	bf38      	it	cc
 8009cda:	2200      	movcc	r2, #0
 8009cdc:	441a      	add	r2, r3
 8009cde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ce2:	b17b      	cbz	r3, 8009d04 <__mdiff+0x104>
 8009ce4:	6106      	str	r6, [r0, #16]
 8009ce6:	e7a5      	b.n	8009c34 <__mdiff+0x34>
 8009ce8:	f855 8b04 	ldr.w	r8, [r5], #4
 8009cec:	fa17 f488 	uxtah	r4, r7, r8
 8009cf0:	1422      	asrs	r2, r4, #16
 8009cf2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009cf6:	b2a4      	uxth	r4, r4
 8009cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009cfc:	f84e 4b04 	str.w	r4, [lr], #4
 8009d00:	1417      	asrs	r7, r2, #16
 8009d02:	e7e0      	b.n	8009cc6 <__mdiff+0xc6>
 8009d04:	3e01      	subs	r6, #1
 8009d06:	e7ea      	b.n	8009cde <__mdiff+0xde>
 8009d08:	0800bc5c 	.word	0x0800bc5c
 8009d0c:	0800bcec 	.word	0x0800bcec

08009d10 <__ulp>:
 8009d10:	b082      	sub	sp, #8
 8009d12:	ed8d 0b00 	vstr	d0, [sp]
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	4912      	ldr	r1, [pc, #72]	; (8009d64 <__ulp+0x54>)
 8009d1a:	4019      	ands	r1, r3
 8009d1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009d20:	2900      	cmp	r1, #0
 8009d22:	dd05      	ble.n	8009d30 <__ulp+0x20>
 8009d24:	2200      	movs	r2, #0
 8009d26:	460b      	mov	r3, r1
 8009d28:	ec43 2b10 	vmov	d0, r2, r3
 8009d2c:	b002      	add	sp, #8
 8009d2e:	4770      	bx	lr
 8009d30:	4249      	negs	r1, r1
 8009d32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009d36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	da04      	bge.n	8009d4e <__ulp+0x3e>
 8009d44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009d48:	fa41 f300 	asr.w	r3, r1, r0
 8009d4c:	e7ec      	b.n	8009d28 <__ulp+0x18>
 8009d4e:	f1a0 0114 	sub.w	r1, r0, #20
 8009d52:	291e      	cmp	r1, #30
 8009d54:	bfda      	itte	le
 8009d56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009d5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d5e:	2101      	movgt	r1, #1
 8009d60:	460a      	mov	r2, r1
 8009d62:	e7e1      	b.n	8009d28 <__ulp+0x18>
 8009d64:	7ff00000 	.word	0x7ff00000

08009d68 <__b2d>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	6905      	ldr	r5, [r0, #16]
 8009d6c:	f100 0714 	add.w	r7, r0, #20
 8009d70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d74:	1f2e      	subs	r6, r5, #4
 8009d76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff fd52 	bl	8009824 <__hi0bits>
 8009d80:	f1c0 0320 	rsb	r3, r0, #32
 8009d84:	280a      	cmp	r0, #10
 8009d86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009e04 <__b2d+0x9c>
 8009d8a:	600b      	str	r3, [r1, #0]
 8009d8c:	dc14      	bgt.n	8009db8 <__b2d+0x50>
 8009d8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d92:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d96:	42b7      	cmp	r7, r6
 8009d98:	ea41 030c 	orr.w	r3, r1, ip
 8009d9c:	bf34      	ite	cc
 8009d9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009da2:	2100      	movcs	r1, #0
 8009da4:	3015      	adds	r0, #21
 8009da6:	fa04 f000 	lsl.w	r0, r4, r0
 8009daa:	fa21 f10e 	lsr.w	r1, r1, lr
 8009dae:	ea40 0201 	orr.w	r2, r0, r1
 8009db2:	ec43 2b10 	vmov	d0, r2, r3
 8009db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db8:	42b7      	cmp	r7, r6
 8009dba:	bf3a      	itte	cc
 8009dbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009dc0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009dc4:	2100      	movcs	r1, #0
 8009dc6:	380b      	subs	r0, #11
 8009dc8:	d017      	beq.n	8009dfa <__b2d+0x92>
 8009dca:	f1c0 0c20 	rsb	ip, r0, #32
 8009dce:	fa04 f500 	lsl.w	r5, r4, r0
 8009dd2:	42be      	cmp	r6, r7
 8009dd4:	fa21 f40c 	lsr.w	r4, r1, ip
 8009dd8:	ea45 0504 	orr.w	r5, r5, r4
 8009ddc:	bf8c      	ite	hi
 8009dde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009de2:	2400      	movls	r4, #0
 8009de4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009de8:	fa01 f000 	lsl.w	r0, r1, r0
 8009dec:	fa24 f40c 	lsr.w	r4, r4, ip
 8009df0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009df4:	ea40 0204 	orr.w	r2, r0, r4
 8009df8:	e7db      	b.n	8009db2 <__b2d+0x4a>
 8009dfa:	ea44 030c 	orr.w	r3, r4, ip
 8009dfe:	460a      	mov	r2, r1
 8009e00:	e7d7      	b.n	8009db2 <__b2d+0x4a>
 8009e02:	bf00      	nop
 8009e04:	3ff00000 	.word	0x3ff00000

08009e08 <__d2b>:
 8009e08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	4689      	mov	r9, r1
 8009e0e:	2101      	movs	r1, #1
 8009e10:	ec57 6b10 	vmov	r6, r7, d0
 8009e14:	4690      	mov	r8, r2
 8009e16:	f7ff fc0f 	bl	8009638 <_Balloc>
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	b930      	cbnz	r0, 8009e2c <__d2b+0x24>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4b25      	ldr	r3, [pc, #148]	; (8009eb8 <__d2b+0xb0>)
 8009e22:	4826      	ldr	r0, [pc, #152]	; (8009ebc <__d2b+0xb4>)
 8009e24:	f240 310a 	movw	r1, #778	; 0x30a
 8009e28:	f000 ff22 	bl	800ac70 <__assert_func>
 8009e2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e34:	bb35      	cbnz	r5, 8009e84 <__d2b+0x7c>
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	d028      	beq.n	8009e8e <__d2b+0x86>
 8009e3c:	4668      	mov	r0, sp
 8009e3e:	9600      	str	r6, [sp, #0]
 8009e40:	f7ff fd10 	bl	8009864 <__lo0bits>
 8009e44:	9900      	ldr	r1, [sp, #0]
 8009e46:	b300      	cbz	r0, 8009e8a <__d2b+0x82>
 8009e48:	9a01      	ldr	r2, [sp, #4]
 8009e4a:	f1c0 0320 	rsb	r3, r0, #32
 8009e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e52:	430b      	orrs	r3, r1
 8009e54:	40c2      	lsrs	r2, r0
 8009e56:	6163      	str	r3, [r4, #20]
 8009e58:	9201      	str	r2, [sp, #4]
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	61a3      	str	r3, [r4, #24]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bf14      	ite	ne
 8009e62:	2202      	movne	r2, #2
 8009e64:	2201      	moveq	r2, #1
 8009e66:	6122      	str	r2, [r4, #16]
 8009e68:	b1d5      	cbz	r5, 8009ea0 <__d2b+0x98>
 8009e6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e6e:	4405      	add	r5, r0
 8009e70:	f8c9 5000 	str.w	r5, [r9]
 8009e74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e78:	f8c8 0000 	str.w	r0, [r8]
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	b003      	add	sp, #12
 8009e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e88:	e7d5      	b.n	8009e36 <__d2b+0x2e>
 8009e8a:	6161      	str	r1, [r4, #20]
 8009e8c:	e7e5      	b.n	8009e5a <__d2b+0x52>
 8009e8e:	a801      	add	r0, sp, #4
 8009e90:	f7ff fce8 	bl	8009864 <__lo0bits>
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	6163      	str	r3, [r4, #20]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	6122      	str	r2, [r4, #16]
 8009e9c:	3020      	adds	r0, #32
 8009e9e:	e7e3      	b.n	8009e68 <__d2b+0x60>
 8009ea0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ea4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ea8:	f8c9 0000 	str.w	r0, [r9]
 8009eac:	6918      	ldr	r0, [r3, #16]
 8009eae:	f7ff fcb9 	bl	8009824 <__hi0bits>
 8009eb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009eb6:	e7df      	b.n	8009e78 <__d2b+0x70>
 8009eb8:	0800bc5c 	.word	0x0800bc5c
 8009ebc:	0800bcec 	.word	0x0800bcec

08009ec0 <__ratio>:
 8009ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	468a      	mov	sl, r1
 8009ec6:	4669      	mov	r1, sp
 8009ec8:	4683      	mov	fp, r0
 8009eca:	f7ff ff4d 	bl	8009d68 <__b2d>
 8009ece:	a901      	add	r1, sp, #4
 8009ed0:	4650      	mov	r0, sl
 8009ed2:	ec59 8b10 	vmov	r8, r9, d0
 8009ed6:	ee10 6a10 	vmov	r6, s0
 8009eda:	f7ff ff45 	bl	8009d68 <__b2d>
 8009ede:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009ee2:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009ee6:	eba3 0c02 	sub.w	ip, r3, r2
 8009eea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ef4:	ec55 4b10 	vmov	r4, r5, d0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	ee10 0a10 	vmov	r0, s0
 8009efe:	bfce      	itee	gt
 8009f00:	464a      	movgt	r2, r9
 8009f02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f06:	462a      	movle	r2, r5
 8009f08:	464f      	mov	r7, r9
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	bfcc      	ite	gt
 8009f0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f12:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009f16:	ec47 6b17 	vmov	d7, r6, r7
 8009f1a:	ec41 0b16 	vmov	d6, r0, r1
 8009f1e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009f22:	b003      	add	sp, #12
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f28 <__copybits>:
 8009f28:	3901      	subs	r1, #1
 8009f2a:	b570      	push	{r4, r5, r6, lr}
 8009f2c:	1149      	asrs	r1, r1, #5
 8009f2e:	6914      	ldr	r4, [r2, #16]
 8009f30:	3101      	adds	r1, #1
 8009f32:	f102 0314 	add.w	r3, r2, #20
 8009f36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f3e:	1f05      	subs	r5, r0, #4
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	d30c      	bcc.n	8009f5e <__copybits+0x36>
 8009f44:	1aa3      	subs	r3, r4, r2
 8009f46:	3b11      	subs	r3, #17
 8009f48:	f023 0303 	bic.w	r3, r3, #3
 8009f4c:	3211      	adds	r2, #17
 8009f4e:	42a2      	cmp	r2, r4
 8009f50:	bf88      	it	hi
 8009f52:	2300      	movhi	r3, #0
 8009f54:	4418      	add	r0, r3
 8009f56:	2300      	movs	r3, #0
 8009f58:	4288      	cmp	r0, r1
 8009f5a:	d305      	bcc.n	8009f68 <__copybits+0x40>
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f62:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f66:	e7eb      	b.n	8009f40 <__copybits+0x18>
 8009f68:	f840 3b04 	str.w	r3, [r0], #4
 8009f6c:	e7f4      	b.n	8009f58 <__copybits+0x30>

08009f6e <__any_on>:
 8009f6e:	f100 0214 	add.w	r2, r0, #20
 8009f72:	6900      	ldr	r0, [r0, #16]
 8009f74:	114b      	asrs	r3, r1, #5
 8009f76:	4298      	cmp	r0, r3
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	db11      	blt.n	8009fa0 <__any_on+0x32>
 8009f7c:	dd0a      	ble.n	8009f94 <__any_on+0x26>
 8009f7e:	f011 011f 	ands.w	r1, r1, #31
 8009f82:	d007      	beq.n	8009f94 <__any_on+0x26>
 8009f84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f88:	fa24 f001 	lsr.w	r0, r4, r1
 8009f8c:	fa00 f101 	lsl.w	r1, r0, r1
 8009f90:	428c      	cmp	r4, r1
 8009f92:	d10b      	bne.n	8009fac <__any_on+0x3e>
 8009f94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d803      	bhi.n	8009fa4 <__any_on+0x36>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	bd10      	pop	{r4, pc}
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	e7f7      	b.n	8009f94 <__any_on+0x26>
 8009fa4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	d0f5      	beq.n	8009f98 <__any_on+0x2a>
 8009fac:	2001      	movs	r0, #1
 8009fae:	e7f6      	b.n	8009f9e <__any_on+0x30>

08009fb0 <_calloc_r>:
 8009fb0:	b513      	push	{r0, r1, r4, lr}
 8009fb2:	434a      	muls	r2, r1
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	9201      	str	r2, [sp, #4]
 8009fb8:	f000 f85a 	bl	800a070 <_malloc_r>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	b118      	cbz	r0, 8009fc8 <_calloc_r+0x18>
 8009fc0:	9a01      	ldr	r2, [sp, #4]
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	f7fc fbca 	bl	800675c <memset>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	b002      	add	sp, #8
 8009fcc:	bd10      	pop	{r4, pc}
	...

08009fd0 <_free_r>:
 8009fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fd2:	2900      	cmp	r1, #0
 8009fd4:	d048      	beq.n	800a068 <_free_r+0x98>
 8009fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fda:	9001      	str	r0, [sp, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f1a1 0404 	sub.w	r4, r1, #4
 8009fe2:	bfb8      	it	lt
 8009fe4:	18e4      	addlt	r4, r4, r3
 8009fe6:	f001 f847 	bl	800b078 <__malloc_lock>
 8009fea:	4a20      	ldr	r2, [pc, #128]	; (800a06c <_free_r+0x9c>)
 8009fec:	9801      	ldr	r0, [sp, #4]
 8009fee:	6813      	ldr	r3, [r2, #0]
 8009ff0:	4615      	mov	r5, r2
 8009ff2:	b933      	cbnz	r3, 800a002 <_free_r+0x32>
 8009ff4:	6063      	str	r3, [r4, #4]
 8009ff6:	6014      	str	r4, [r2, #0]
 8009ff8:	b003      	add	sp, #12
 8009ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ffe:	f001 b841 	b.w	800b084 <__malloc_unlock>
 800a002:	42a3      	cmp	r3, r4
 800a004:	d90b      	bls.n	800a01e <_free_r+0x4e>
 800a006:	6821      	ldr	r1, [r4, #0]
 800a008:	1862      	adds	r2, r4, r1
 800a00a:	4293      	cmp	r3, r2
 800a00c:	bf04      	itt	eq
 800a00e:	681a      	ldreq	r2, [r3, #0]
 800a010:	685b      	ldreq	r3, [r3, #4]
 800a012:	6063      	str	r3, [r4, #4]
 800a014:	bf04      	itt	eq
 800a016:	1852      	addeq	r2, r2, r1
 800a018:	6022      	streq	r2, [r4, #0]
 800a01a:	602c      	str	r4, [r5, #0]
 800a01c:	e7ec      	b.n	8009ff8 <_free_r+0x28>
 800a01e:	461a      	mov	r2, r3
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	b10b      	cbz	r3, 800a028 <_free_r+0x58>
 800a024:	42a3      	cmp	r3, r4
 800a026:	d9fa      	bls.n	800a01e <_free_r+0x4e>
 800a028:	6811      	ldr	r1, [r2, #0]
 800a02a:	1855      	adds	r5, r2, r1
 800a02c:	42a5      	cmp	r5, r4
 800a02e:	d10b      	bne.n	800a048 <_free_r+0x78>
 800a030:	6824      	ldr	r4, [r4, #0]
 800a032:	4421      	add	r1, r4
 800a034:	1854      	adds	r4, r2, r1
 800a036:	42a3      	cmp	r3, r4
 800a038:	6011      	str	r1, [r2, #0]
 800a03a:	d1dd      	bne.n	8009ff8 <_free_r+0x28>
 800a03c:	681c      	ldr	r4, [r3, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	6053      	str	r3, [r2, #4]
 800a042:	4421      	add	r1, r4
 800a044:	6011      	str	r1, [r2, #0]
 800a046:	e7d7      	b.n	8009ff8 <_free_r+0x28>
 800a048:	d902      	bls.n	800a050 <_free_r+0x80>
 800a04a:	230c      	movs	r3, #12
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	e7d3      	b.n	8009ff8 <_free_r+0x28>
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	1961      	adds	r1, r4, r5
 800a054:	428b      	cmp	r3, r1
 800a056:	bf04      	itt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	bf04      	itt	eq
 800a060:	1949      	addeq	r1, r1, r5
 800a062:	6021      	streq	r1, [r4, #0]
 800a064:	6054      	str	r4, [r2, #4]
 800a066:	e7c7      	b.n	8009ff8 <_free_r+0x28>
 800a068:	b003      	add	sp, #12
 800a06a:	bd30      	pop	{r4, r5, pc}
 800a06c:	200002dc 	.word	0x200002dc

0800a070 <_malloc_r>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	1ccd      	adds	r5, r1, #3
 800a074:	f025 0503 	bic.w	r5, r5, #3
 800a078:	3508      	adds	r5, #8
 800a07a:	2d0c      	cmp	r5, #12
 800a07c:	bf38      	it	cc
 800a07e:	250c      	movcc	r5, #12
 800a080:	2d00      	cmp	r5, #0
 800a082:	4606      	mov	r6, r0
 800a084:	db01      	blt.n	800a08a <_malloc_r+0x1a>
 800a086:	42a9      	cmp	r1, r5
 800a088:	d903      	bls.n	800a092 <_malloc_r+0x22>
 800a08a:	230c      	movs	r3, #12
 800a08c:	6033      	str	r3, [r6, #0]
 800a08e:	2000      	movs	r0, #0
 800a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a092:	f000 fff1 	bl	800b078 <__malloc_lock>
 800a096:	4921      	ldr	r1, [pc, #132]	; (800a11c <_malloc_r+0xac>)
 800a098:	680a      	ldr	r2, [r1, #0]
 800a09a:	4614      	mov	r4, r2
 800a09c:	b99c      	cbnz	r4, 800a0c6 <_malloc_r+0x56>
 800a09e:	4f20      	ldr	r7, [pc, #128]	; (800a120 <_malloc_r+0xb0>)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	b923      	cbnz	r3, 800a0ae <_malloc_r+0x3e>
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f000 fcd2 	bl	800aa50 <_sbrk_r>
 800a0ac:	6038      	str	r0, [r7, #0]
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f000 fccd 	bl	800aa50 <_sbrk_r>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d123      	bne.n	800a102 <_malloc_r+0x92>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 ffe0 	bl	800b084 <__malloc_unlock>
 800a0c4:	e7e3      	b.n	800a08e <_malloc_r+0x1e>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	1b5b      	subs	r3, r3, r5
 800a0ca:	d417      	bmi.n	800a0fc <_malloc_r+0x8c>
 800a0cc:	2b0b      	cmp	r3, #11
 800a0ce:	d903      	bls.n	800a0d8 <_malloc_r+0x68>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	441c      	add	r4, r3
 800a0d4:	6025      	str	r5, [r4, #0]
 800a0d6:	e004      	b.n	800a0e2 <_malloc_r+0x72>
 800a0d8:	6863      	ldr	r3, [r4, #4]
 800a0da:	42a2      	cmp	r2, r4
 800a0dc:	bf0c      	ite	eq
 800a0de:	600b      	streq	r3, [r1, #0]
 800a0e0:	6053      	strne	r3, [r2, #4]
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f000 ffce 	bl	800b084 <__malloc_unlock>
 800a0e8:	f104 000b 	add.w	r0, r4, #11
 800a0ec:	1d23      	adds	r3, r4, #4
 800a0ee:	f020 0007 	bic.w	r0, r0, #7
 800a0f2:	1ac2      	subs	r2, r0, r3
 800a0f4:	d0cc      	beq.n	800a090 <_malloc_r+0x20>
 800a0f6:	1a1b      	subs	r3, r3, r0
 800a0f8:	50a3      	str	r3, [r4, r2]
 800a0fa:	e7c9      	b.n	800a090 <_malloc_r+0x20>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	6864      	ldr	r4, [r4, #4]
 800a100:	e7cc      	b.n	800a09c <_malloc_r+0x2c>
 800a102:	1cc4      	adds	r4, r0, #3
 800a104:	f024 0403 	bic.w	r4, r4, #3
 800a108:	42a0      	cmp	r0, r4
 800a10a:	d0e3      	beq.n	800a0d4 <_malloc_r+0x64>
 800a10c:	1a21      	subs	r1, r4, r0
 800a10e:	4630      	mov	r0, r6
 800a110:	f000 fc9e 	bl	800aa50 <_sbrk_r>
 800a114:	3001      	adds	r0, #1
 800a116:	d1dd      	bne.n	800a0d4 <_malloc_r+0x64>
 800a118:	e7cf      	b.n	800a0ba <_malloc_r+0x4a>
 800a11a:	bf00      	nop
 800a11c:	200002dc 	.word	0x200002dc
 800a120:	200002e0 	.word	0x200002e0

0800a124 <__ssputs_r>:
 800a124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a128:	688e      	ldr	r6, [r1, #8]
 800a12a:	429e      	cmp	r6, r3
 800a12c:	4682      	mov	sl, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	4690      	mov	r8, r2
 800a132:	461f      	mov	r7, r3
 800a134:	d838      	bhi.n	800a1a8 <__ssputs_r+0x84>
 800a136:	898a      	ldrh	r2, [r1, #12]
 800a138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a13c:	d032      	beq.n	800a1a4 <__ssputs_r+0x80>
 800a13e:	6825      	ldr	r5, [r4, #0]
 800a140:	6909      	ldr	r1, [r1, #16]
 800a142:	eba5 0901 	sub.w	r9, r5, r1
 800a146:	6965      	ldr	r5, [r4, #20]
 800a148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a14c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a150:	3301      	adds	r3, #1
 800a152:	444b      	add	r3, r9
 800a154:	106d      	asrs	r5, r5, #1
 800a156:	429d      	cmp	r5, r3
 800a158:	bf38      	it	cc
 800a15a:	461d      	movcc	r5, r3
 800a15c:	0553      	lsls	r3, r2, #21
 800a15e:	d531      	bpl.n	800a1c4 <__ssputs_r+0xa0>
 800a160:	4629      	mov	r1, r5
 800a162:	f7ff ff85 	bl	800a070 <_malloc_r>
 800a166:	4606      	mov	r6, r0
 800a168:	b950      	cbnz	r0, 800a180 <__ssputs_r+0x5c>
 800a16a:	230c      	movs	r3, #12
 800a16c:	f8ca 3000 	str.w	r3, [sl]
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a176:	81a3      	strh	r3, [r4, #12]
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a180:	6921      	ldr	r1, [r4, #16]
 800a182:	464a      	mov	r2, r9
 800a184:	f7ff fa4a 	bl	800961c <memcpy>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	6126      	str	r6, [r4, #16]
 800a196:	6165      	str	r5, [r4, #20]
 800a198:	444e      	add	r6, r9
 800a19a:	eba5 0509 	sub.w	r5, r5, r9
 800a19e:	6026      	str	r6, [r4, #0]
 800a1a0:	60a5      	str	r5, [r4, #8]
 800a1a2:	463e      	mov	r6, r7
 800a1a4:	42be      	cmp	r6, r7
 800a1a6:	d900      	bls.n	800a1aa <__ssputs_r+0x86>
 800a1a8:	463e      	mov	r6, r7
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	4641      	mov	r1, r8
 800a1b0:	f000 ff48 	bl	800b044 <memmove>
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	6822      	ldr	r2, [r4, #0]
 800a1b8:	1b9b      	subs	r3, r3, r6
 800a1ba:	4432      	add	r2, r6
 800a1bc:	60a3      	str	r3, [r4, #8]
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	e7db      	b.n	800a17c <__ssputs_r+0x58>
 800a1c4:	462a      	mov	r2, r5
 800a1c6:	f000 ff63 	bl	800b090 <_realloc_r>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d1e1      	bne.n	800a194 <__ssputs_r+0x70>
 800a1d0:	6921      	ldr	r1, [r4, #16]
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	f7ff fefc 	bl	8009fd0 <_free_r>
 800a1d8:	e7c7      	b.n	800a16a <__ssputs_r+0x46>
	...

0800a1dc <_svfiprintf_r>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	4698      	mov	r8, r3
 800a1e2:	898b      	ldrh	r3, [r1, #12]
 800a1e4:	061b      	lsls	r3, r3, #24
 800a1e6:	b09d      	sub	sp, #116	; 0x74
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	d50e      	bpl.n	800a20e <_svfiprintf_r+0x32>
 800a1f0:	690b      	ldr	r3, [r1, #16]
 800a1f2:	b963      	cbnz	r3, 800a20e <_svfiprintf_r+0x32>
 800a1f4:	2140      	movs	r1, #64	; 0x40
 800a1f6:	f7ff ff3b 	bl	800a070 <_malloc_r>
 800a1fa:	6028      	str	r0, [r5, #0]
 800a1fc:	6128      	str	r0, [r5, #16]
 800a1fe:	b920      	cbnz	r0, 800a20a <_svfiprintf_r+0x2e>
 800a200:	230c      	movs	r3, #12
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	e0d1      	b.n	800a3ae <_svfiprintf_r+0x1d2>
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	616b      	str	r3, [r5, #20]
 800a20e:	2300      	movs	r3, #0
 800a210:	9309      	str	r3, [sp, #36]	; 0x24
 800a212:	2320      	movs	r3, #32
 800a214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a218:	f8cd 800c 	str.w	r8, [sp, #12]
 800a21c:	2330      	movs	r3, #48	; 0x30
 800a21e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3c8 <_svfiprintf_r+0x1ec>
 800a222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a226:	f04f 0901 	mov.w	r9, #1
 800a22a:	4623      	mov	r3, r4
 800a22c:	469a      	mov	sl, r3
 800a22e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a232:	b10a      	cbz	r2, 800a238 <_svfiprintf_r+0x5c>
 800a234:	2a25      	cmp	r2, #37	; 0x25
 800a236:	d1f9      	bne.n	800a22c <_svfiprintf_r+0x50>
 800a238:	ebba 0b04 	subs.w	fp, sl, r4
 800a23c:	d00b      	beq.n	800a256 <_svfiprintf_r+0x7a>
 800a23e:	465b      	mov	r3, fp
 800a240:	4622      	mov	r2, r4
 800a242:	4629      	mov	r1, r5
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff ff6d 	bl	800a124 <__ssputs_r>
 800a24a:	3001      	adds	r0, #1
 800a24c:	f000 80aa 	beq.w	800a3a4 <_svfiprintf_r+0x1c8>
 800a250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a252:	445a      	add	r2, fp
 800a254:	9209      	str	r2, [sp, #36]	; 0x24
 800a256:	f89a 3000 	ldrb.w	r3, [sl]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 80a2 	beq.w	800a3a4 <_svfiprintf_r+0x1c8>
 800a260:	2300      	movs	r3, #0
 800a262:	f04f 32ff 	mov.w	r2, #4294967295
 800a266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a26a:	f10a 0a01 	add.w	sl, sl, #1
 800a26e:	9304      	str	r3, [sp, #16]
 800a270:	9307      	str	r3, [sp, #28]
 800a272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a276:	931a      	str	r3, [sp, #104]	; 0x68
 800a278:	4654      	mov	r4, sl
 800a27a:	2205      	movs	r2, #5
 800a27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a280:	4851      	ldr	r0, [pc, #324]	; (800a3c8 <_svfiprintf_r+0x1ec>)
 800a282:	f7f5 fff5 	bl	8000270 <memchr>
 800a286:	9a04      	ldr	r2, [sp, #16]
 800a288:	b9d8      	cbnz	r0, 800a2c2 <_svfiprintf_r+0xe6>
 800a28a:	06d0      	lsls	r0, r2, #27
 800a28c:	bf44      	itt	mi
 800a28e:	2320      	movmi	r3, #32
 800a290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a294:	0711      	lsls	r1, r2, #28
 800a296:	bf44      	itt	mi
 800a298:	232b      	movmi	r3, #43	; 0x2b
 800a29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a29e:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a4:	d015      	beq.n	800a2d2 <_svfiprintf_r+0xf6>
 800a2a6:	9a07      	ldr	r2, [sp, #28]
 800a2a8:	4654      	mov	r4, sl
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	f04f 0c0a 	mov.w	ip, #10
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2b6:	3b30      	subs	r3, #48	; 0x30
 800a2b8:	2b09      	cmp	r3, #9
 800a2ba:	d94e      	bls.n	800a35a <_svfiprintf_r+0x17e>
 800a2bc:	b1b0      	cbz	r0, 800a2ec <_svfiprintf_r+0x110>
 800a2be:	9207      	str	r2, [sp, #28]
 800a2c0:	e014      	b.n	800a2ec <_svfiprintf_r+0x110>
 800a2c2:	eba0 0308 	sub.w	r3, r0, r8
 800a2c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	46a2      	mov	sl, r4
 800a2d0:	e7d2      	b.n	800a278 <_svfiprintf_r+0x9c>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	1d19      	adds	r1, r3, #4
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	9103      	str	r1, [sp, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bfbb      	ittet	lt
 800a2de:	425b      	neglt	r3, r3
 800a2e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a2e4:	9307      	strge	r3, [sp, #28]
 800a2e6:	9307      	strlt	r3, [sp, #28]
 800a2e8:	bfb8      	it	lt
 800a2ea:	9204      	strlt	r2, [sp, #16]
 800a2ec:	7823      	ldrb	r3, [r4, #0]
 800a2ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f0:	d10c      	bne.n	800a30c <_svfiprintf_r+0x130>
 800a2f2:	7863      	ldrb	r3, [r4, #1]
 800a2f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f6:	d135      	bne.n	800a364 <_svfiprintf_r+0x188>
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	1d1a      	adds	r2, r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	9203      	str	r2, [sp, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	bfb8      	it	lt
 800a304:	f04f 33ff 	movlt.w	r3, #4294967295
 800a308:	3402      	adds	r4, #2
 800a30a:	9305      	str	r3, [sp, #20]
 800a30c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3d8 <_svfiprintf_r+0x1fc>
 800a310:	7821      	ldrb	r1, [r4, #0]
 800a312:	2203      	movs	r2, #3
 800a314:	4650      	mov	r0, sl
 800a316:	f7f5 ffab 	bl	8000270 <memchr>
 800a31a:	b140      	cbz	r0, 800a32e <_svfiprintf_r+0x152>
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	eba0 000a 	sub.w	r0, r0, sl
 800a322:	fa03 f000 	lsl.w	r0, r3, r0
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	4303      	orrs	r3, r0
 800a32a:	3401      	adds	r4, #1
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a332:	4826      	ldr	r0, [pc, #152]	; (800a3cc <_svfiprintf_r+0x1f0>)
 800a334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a338:	2206      	movs	r2, #6
 800a33a:	f7f5 ff99 	bl	8000270 <memchr>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d038      	beq.n	800a3b4 <_svfiprintf_r+0x1d8>
 800a342:	4b23      	ldr	r3, [pc, #140]	; (800a3d0 <_svfiprintf_r+0x1f4>)
 800a344:	bb1b      	cbnz	r3, 800a38e <_svfiprintf_r+0x1b2>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	3307      	adds	r3, #7
 800a34a:	f023 0307 	bic.w	r3, r3, #7
 800a34e:	3308      	adds	r3, #8
 800a350:	9303      	str	r3, [sp, #12]
 800a352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a354:	4433      	add	r3, r6
 800a356:	9309      	str	r3, [sp, #36]	; 0x24
 800a358:	e767      	b.n	800a22a <_svfiprintf_r+0x4e>
 800a35a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a35e:	460c      	mov	r4, r1
 800a360:	2001      	movs	r0, #1
 800a362:	e7a5      	b.n	800a2b0 <_svfiprintf_r+0xd4>
 800a364:	2300      	movs	r3, #0
 800a366:	3401      	adds	r4, #1
 800a368:	9305      	str	r3, [sp, #20]
 800a36a:	4619      	mov	r1, r3
 800a36c:	f04f 0c0a 	mov.w	ip, #10
 800a370:	4620      	mov	r0, r4
 800a372:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a376:	3a30      	subs	r2, #48	; 0x30
 800a378:	2a09      	cmp	r2, #9
 800a37a:	d903      	bls.n	800a384 <_svfiprintf_r+0x1a8>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0c5      	beq.n	800a30c <_svfiprintf_r+0x130>
 800a380:	9105      	str	r1, [sp, #20]
 800a382:	e7c3      	b.n	800a30c <_svfiprintf_r+0x130>
 800a384:	fb0c 2101 	mla	r1, ip, r1, r2
 800a388:	4604      	mov	r4, r0
 800a38a:	2301      	movs	r3, #1
 800a38c:	e7f0      	b.n	800a370 <_svfiprintf_r+0x194>
 800a38e:	ab03      	add	r3, sp, #12
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	462a      	mov	r2, r5
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <_svfiprintf_r+0x1f8>)
 800a396:	a904      	add	r1, sp, #16
 800a398:	4638      	mov	r0, r7
 800a39a:	f7fc fa79 	bl	8006890 <_printf_float>
 800a39e:	1c42      	adds	r2, r0, #1
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	d1d6      	bne.n	800a352 <_svfiprintf_r+0x176>
 800a3a4:	89ab      	ldrh	r3, [r5, #12]
 800a3a6:	065b      	lsls	r3, r3, #25
 800a3a8:	f53f af2c 	bmi.w	800a204 <_svfiprintf_r+0x28>
 800a3ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ae:	b01d      	add	sp, #116	; 0x74
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b4:	ab03      	add	r3, sp, #12
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <_svfiprintf_r+0x1f8>)
 800a3bc:	a904      	add	r1, sp, #16
 800a3be:	4638      	mov	r0, r7
 800a3c0:	f7fc fcf2 	bl	8006da8 <_printf_i>
 800a3c4:	e7eb      	b.n	800a39e <_svfiprintf_r+0x1c2>
 800a3c6:	bf00      	nop
 800a3c8:	0800be4c 	.word	0x0800be4c
 800a3cc:	0800be56 	.word	0x0800be56
 800a3d0:	08006891 	.word	0x08006891
 800a3d4:	0800a125 	.word	0x0800a125
 800a3d8:	0800be52 	.word	0x0800be52

0800a3dc <_sungetc_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	1c4b      	adds	r3, r1, #1
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	d103      	bne.n	800a3ec <_sungetc_r+0x10>
 800a3e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	8993      	ldrh	r3, [r2, #12]
 800a3ee:	f023 0320 	bic.w	r3, r3, #32
 800a3f2:	8193      	strh	r3, [r2, #12]
 800a3f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3f6:	6852      	ldr	r2, [r2, #4]
 800a3f8:	b2cd      	uxtb	r5, r1
 800a3fa:	b18b      	cbz	r3, 800a420 <_sungetc_r+0x44>
 800a3fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3fe:	4293      	cmp	r3, r2
 800a400:	dd08      	ble.n	800a414 <_sungetc_r+0x38>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	1e5a      	subs	r2, r3, #1
 800a406:	6022      	str	r2, [r4, #0]
 800a408:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	3301      	adds	r3, #1
 800a410:	6063      	str	r3, [r4, #4]
 800a412:	e7e9      	b.n	800a3e8 <_sungetc_r+0xc>
 800a414:	4621      	mov	r1, r4
 800a416:	f000 fbe3 	bl	800abe0 <__submore>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d0f1      	beq.n	800a402 <_sungetc_r+0x26>
 800a41e:	e7e1      	b.n	800a3e4 <_sungetc_r+0x8>
 800a420:	6921      	ldr	r1, [r4, #16]
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	b151      	cbz	r1, 800a43c <_sungetc_r+0x60>
 800a426:	4299      	cmp	r1, r3
 800a428:	d208      	bcs.n	800a43c <_sungetc_r+0x60>
 800a42a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a42e:	42a9      	cmp	r1, r5
 800a430:	d104      	bne.n	800a43c <_sungetc_r+0x60>
 800a432:	3b01      	subs	r3, #1
 800a434:	3201      	adds	r2, #1
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	6062      	str	r2, [r4, #4]
 800a43a:	e7d5      	b.n	800a3e8 <_sungetc_r+0xc>
 800a43c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a444:	6363      	str	r3, [r4, #52]	; 0x34
 800a446:	2303      	movs	r3, #3
 800a448:	63a3      	str	r3, [r4, #56]	; 0x38
 800a44a:	4623      	mov	r3, r4
 800a44c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	2301      	movs	r3, #1
 800a454:	e7dc      	b.n	800a410 <_sungetc_r+0x34>

0800a456 <__ssrefill_r>:
 800a456:	b510      	push	{r4, lr}
 800a458:	460c      	mov	r4, r1
 800a45a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a45c:	b169      	cbz	r1, 800a47a <__ssrefill_r+0x24>
 800a45e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a462:	4299      	cmp	r1, r3
 800a464:	d001      	beq.n	800a46a <__ssrefill_r+0x14>
 800a466:	f7ff fdb3 	bl	8009fd0 <_free_r>
 800a46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a46c:	6063      	str	r3, [r4, #4]
 800a46e:	2000      	movs	r0, #0
 800a470:	6360      	str	r0, [r4, #52]	; 0x34
 800a472:	b113      	cbz	r3, 800a47a <__ssrefill_r+0x24>
 800a474:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	2300      	movs	r3, #0
 800a480:	6063      	str	r3, [r4, #4]
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	f043 0320 	orr.w	r3, r3, #32
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	f04f 30ff 	mov.w	r0, #4294967295
 800a48e:	e7f3      	b.n	800a478 <__ssrefill_r+0x22>

0800a490 <__ssvfiscanf_r>:
 800a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	460c      	mov	r4, r1
 800a496:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a49a:	2100      	movs	r1, #0
 800a49c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a4a0:	49b2      	ldr	r1, [pc, #712]	; (800a76c <__ssvfiscanf_r+0x2dc>)
 800a4a2:	91a0      	str	r1, [sp, #640]	; 0x280
 800a4a4:	f10d 0804 	add.w	r8, sp, #4
 800a4a8:	49b1      	ldr	r1, [pc, #708]	; (800a770 <__ssvfiscanf_r+0x2e0>)
 800a4aa:	4fb2      	ldr	r7, [pc, #712]	; (800a774 <__ssvfiscanf_r+0x2e4>)
 800a4ac:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a778 <__ssvfiscanf_r+0x2e8>
 800a4b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	91a1      	str	r1, [sp, #644]	; 0x284
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	f892 a000 	ldrb.w	sl, [r2]
 800a4be:	f1ba 0f00 	cmp.w	sl, #0
 800a4c2:	f000 8151 	beq.w	800a768 <__ssvfiscanf_r+0x2d8>
 800a4c6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a4ca:	f013 0308 	ands.w	r3, r3, #8
 800a4ce:	f102 0501 	add.w	r5, r2, #1
 800a4d2:	d019      	beq.n	800a508 <__ssvfiscanf_r+0x78>
 800a4d4:	6863      	ldr	r3, [r4, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dd0f      	ble.n	800a4fa <__ssvfiscanf_r+0x6a>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	781a      	ldrb	r2, [r3, #0]
 800a4de:	5cba      	ldrb	r2, [r7, r2]
 800a4e0:	0712      	lsls	r2, r2, #28
 800a4e2:	d401      	bmi.n	800a4e8 <__ssvfiscanf_r+0x58>
 800a4e4:	462a      	mov	r2, r5
 800a4e6:	e7e8      	b.n	800a4ba <__ssvfiscanf_r+0x2a>
 800a4e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a4ea:	3201      	adds	r2, #1
 800a4ec:	9245      	str	r2, [sp, #276]	; 0x114
 800a4ee:	6862      	ldr	r2, [r4, #4]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	3a01      	subs	r2, #1
 800a4f4:	6062      	str	r2, [r4, #4]
 800a4f6:	6023      	str	r3, [r4, #0]
 800a4f8:	e7ec      	b.n	800a4d4 <__ssvfiscanf_r+0x44>
 800a4fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4630      	mov	r0, r6
 800a500:	4798      	blx	r3
 800a502:	2800      	cmp	r0, #0
 800a504:	d0e9      	beq.n	800a4da <__ssvfiscanf_r+0x4a>
 800a506:	e7ed      	b.n	800a4e4 <__ssvfiscanf_r+0x54>
 800a508:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a50c:	f040 8083 	bne.w	800a616 <__ssvfiscanf_r+0x186>
 800a510:	9341      	str	r3, [sp, #260]	; 0x104
 800a512:	9343      	str	r3, [sp, #268]	; 0x10c
 800a514:	7853      	ldrb	r3, [r2, #1]
 800a516:	2b2a      	cmp	r3, #42	; 0x2a
 800a518:	bf02      	ittt	eq
 800a51a:	2310      	moveq	r3, #16
 800a51c:	1c95      	addeq	r5, r2, #2
 800a51e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a520:	220a      	movs	r2, #10
 800a522:	46ab      	mov	fp, r5
 800a524:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a528:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	d91d      	bls.n	800a56c <__ssvfiscanf_r+0xdc>
 800a530:	4891      	ldr	r0, [pc, #580]	; (800a778 <__ssvfiscanf_r+0x2e8>)
 800a532:	2203      	movs	r2, #3
 800a534:	f7f5 fe9c 	bl	8000270 <memchr>
 800a538:	b140      	cbz	r0, 800a54c <__ssvfiscanf_r+0xbc>
 800a53a:	2301      	movs	r3, #1
 800a53c:	eba0 0009 	sub.w	r0, r0, r9
 800a540:	fa03 f000 	lsl.w	r0, r3, r0
 800a544:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a546:	4318      	orrs	r0, r3
 800a548:	9041      	str	r0, [sp, #260]	; 0x104
 800a54a:	465d      	mov	r5, fp
 800a54c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a550:	2b78      	cmp	r3, #120	; 0x78
 800a552:	d806      	bhi.n	800a562 <__ssvfiscanf_r+0xd2>
 800a554:	2b57      	cmp	r3, #87	; 0x57
 800a556:	d810      	bhi.n	800a57a <__ssvfiscanf_r+0xea>
 800a558:	2b25      	cmp	r3, #37	; 0x25
 800a55a:	d05c      	beq.n	800a616 <__ssvfiscanf_r+0x186>
 800a55c:	d856      	bhi.n	800a60c <__ssvfiscanf_r+0x17c>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d074      	beq.n	800a64c <__ssvfiscanf_r+0x1bc>
 800a562:	2303      	movs	r3, #3
 800a564:	9347      	str	r3, [sp, #284]	; 0x11c
 800a566:	230a      	movs	r3, #10
 800a568:	9342      	str	r3, [sp, #264]	; 0x108
 800a56a:	e081      	b.n	800a670 <__ssvfiscanf_r+0x1e0>
 800a56c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a56e:	fb02 1303 	mla	r3, r2, r3, r1
 800a572:	3b30      	subs	r3, #48	; 0x30
 800a574:	9343      	str	r3, [sp, #268]	; 0x10c
 800a576:	465d      	mov	r5, fp
 800a578:	e7d3      	b.n	800a522 <__ssvfiscanf_r+0x92>
 800a57a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a57e:	2a20      	cmp	r2, #32
 800a580:	d8ef      	bhi.n	800a562 <__ssvfiscanf_r+0xd2>
 800a582:	a101      	add	r1, pc, #4	; (adr r1, 800a588 <__ssvfiscanf_r+0xf8>)
 800a584:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a588:	0800a65b 	.word	0x0800a65b
 800a58c:	0800a563 	.word	0x0800a563
 800a590:	0800a563 	.word	0x0800a563
 800a594:	0800a6b9 	.word	0x0800a6b9
 800a598:	0800a563 	.word	0x0800a563
 800a59c:	0800a563 	.word	0x0800a563
 800a5a0:	0800a563 	.word	0x0800a563
 800a5a4:	0800a563 	.word	0x0800a563
 800a5a8:	0800a563 	.word	0x0800a563
 800a5ac:	0800a563 	.word	0x0800a563
 800a5b0:	0800a563 	.word	0x0800a563
 800a5b4:	0800a6cf 	.word	0x0800a6cf
 800a5b8:	0800a6a5 	.word	0x0800a6a5
 800a5bc:	0800a613 	.word	0x0800a613
 800a5c0:	0800a613 	.word	0x0800a613
 800a5c4:	0800a613 	.word	0x0800a613
 800a5c8:	0800a563 	.word	0x0800a563
 800a5cc:	0800a6a9 	.word	0x0800a6a9
 800a5d0:	0800a563 	.word	0x0800a563
 800a5d4:	0800a563 	.word	0x0800a563
 800a5d8:	0800a563 	.word	0x0800a563
 800a5dc:	0800a563 	.word	0x0800a563
 800a5e0:	0800a6df 	.word	0x0800a6df
 800a5e4:	0800a6b1 	.word	0x0800a6b1
 800a5e8:	0800a653 	.word	0x0800a653
 800a5ec:	0800a563 	.word	0x0800a563
 800a5f0:	0800a563 	.word	0x0800a563
 800a5f4:	0800a6db 	.word	0x0800a6db
 800a5f8:	0800a563 	.word	0x0800a563
 800a5fc:	0800a6a5 	.word	0x0800a6a5
 800a600:	0800a563 	.word	0x0800a563
 800a604:	0800a563 	.word	0x0800a563
 800a608:	0800a65b 	.word	0x0800a65b
 800a60c:	3b45      	subs	r3, #69	; 0x45
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d8a7      	bhi.n	800a562 <__ssvfiscanf_r+0xd2>
 800a612:	2305      	movs	r3, #5
 800a614:	e02b      	b.n	800a66e <__ssvfiscanf_r+0x1de>
 800a616:	6863      	ldr	r3, [r4, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	dd0d      	ble.n	800a638 <__ssvfiscanf_r+0x1a8>
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	781a      	ldrb	r2, [r3, #0]
 800a620:	4552      	cmp	r2, sl
 800a622:	f040 80a1 	bne.w	800a768 <__ssvfiscanf_r+0x2d8>
 800a626:	3301      	adds	r3, #1
 800a628:	6862      	ldr	r2, [r4, #4]
 800a62a:	6023      	str	r3, [r4, #0]
 800a62c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a62e:	3a01      	subs	r2, #1
 800a630:	3301      	adds	r3, #1
 800a632:	6062      	str	r2, [r4, #4]
 800a634:	9345      	str	r3, [sp, #276]	; 0x114
 800a636:	e755      	b.n	800a4e4 <__ssvfiscanf_r+0x54>
 800a638:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a63a:	4621      	mov	r1, r4
 800a63c:	4630      	mov	r0, r6
 800a63e:	4798      	blx	r3
 800a640:	2800      	cmp	r0, #0
 800a642:	d0eb      	beq.n	800a61c <__ssvfiscanf_r+0x18c>
 800a644:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a646:	2800      	cmp	r0, #0
 800a648:	f040 8084 	bne.w	800a754 <__ssvfiscanf_r+0x2c4>
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	e086      	b.n	800a760 <__ssvfiscanf_r+0x2d0>
 800a652:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a654:	f042 0220 	orr.w	r2, r2, #32
 800a658:	9241      	str	r2, [sp, #260]	; 0x104
 800a65a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a65c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a660:	9241      	str	r2, [sp, #260]	; 0x104
 800a662:	2210      	movs	r2, #16
 800a664:	2b6f      	cmp	r3, #111	; 0x6f
 800a666:	9242      	str	r2, [sp, #264]	; 0x108
 800a668:	bf34      	ite	cc
 800a66a:	2303      	movcc	r3, #3
 800a66c:	2304      	movcs	r3, #4
 800a66e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a670:	6863      	ldr	r3, [r4, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	dd41      	ble.n	800a6fa <__ssvfiscanf_r+0x26a>
 800a676:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a678:	0659      	lsls	r1, r3, #25
 800a67a:	d404      	bmi.n	800a686 <__ssvfiscanf_r+0x1f6>
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	781a      	ldrb	r2, [r3, #0]
 800a680:	5cba      	ldrb	r2, [r7, r2]
 800a682:	0712      	lsls	r2, r2, #28
 800a684:	d440      	bmi.n	800a708 <__ssvfiscanf_r+0x278>
 800a686:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a688:	2b02      	cmp	r3, #2
 800a68a:	dc4f      	bgt.n	800a72c <__ssvfiscanf_r+0x29c>
 800a68c:	466b      	mov	r3, sp
 800a68e:	4622      	mov	r2, r4
 800a690:	a941      	add	r1, sp, #260	; 0x104
 800a692:	4630      	mov	r0, r6
 800a694:	f000 f874 	bl	800a780 <_scanf_chars>
 800a698:	2801      	cmp	r0, #1
 800a69a:	d065      	beq.n	800a768 <__ssvfiscanf_r+0x2d8>
 800a69c:	2802      	cmp	r0, #2
 800a69e:	f47f af21 	bne.w	800a4e4 <__ssvfiscanf_r+0x54>
 800a6a2:	e7cf      	b.n	800a644 <__ssvfiscanf_r+0x1b4>
 800a6a4:	220a      	movs	r2, #10
 800a6a6:	e7dd      	b.n	800a664 <__ssvfiscanf_r+0x1d4>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9342      	str	r3, [sp, #264]	; 0x108
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e7de      	b.n	800a66e <__ssvfiscanf_r+0x1de>
 800a6b0:	2308      	movs	r3, #8
 800a6b2:	9342      	str	r3, [sp, #264]	; 0x108
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	e7da      	b.n	800a66e <__ssvfiscanf_r+0x1de>
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	f000 f9d8 	bl	800aa70 <__sccl>
 800a6c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c6:	9341      	str	r3, [sp, #260]	; 0x104
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e7cf      	b.n	800a66e <__ssvfiscanf_r+0x1de>
 800a6ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d4:	9341      	str	r3, [sp, #260]	; 0x104
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	e7c9      	b.n	800a66e <__ssvfiscanf_r+0x1de>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e7c7      	b.n	800a66e <__ssvfiscanf_r+0x1de>
 800a6de:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a6e0:	06c3      	lsls	r3, r0, #27
 800a6e2:	f53f aeff 	bmi.w	800a4e4 <__ssvfiscanf_r+0x54>
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a6ea:	1d19      	adds	r1, r3, #4
 800a6ec:	9100      	str	r1, [sp, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	07c0      	lsls	r0, r0, #31
 800a6f2:	bf4c      	ite	mi
 800a6f4:	801a      	strhmi	r2, [r3, #0]
 800a6f6:	601a      	strpl	r2, [r3, #0]
 800a6f8:	e6f4      	b.n	800a4e4 <__ssvfiscanf_r+0x54>
 800a6fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4630      	mov	r0, r6
 800a700:	4798      	blx	r3
 800a702:	2800      	cmp	r0, #0
 800a704:	d0b7      	beq.n	800a676 <__ssvfiscanf_r+0x1e6>
 800a706:	e79d      	b.n	800a644 <__ssvfiscanf_r+0x1b4>
 800a708:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a70a:	3201      	adds	r2, #1
 800a70c:	9245      	str	r2, [sp, #276]	; 0x114
 800a70e:	6862      	ldr	r2, [r4, #4]
 800a710:	3a01      	subs	r2, #1
 800a712:	2a00      	cmp	r2, #0
 800a714:	6062      	str	r2, [r4, #4]
 800a716:	dd02      	ble.n	800a71e <__ssvfiscanf_r+0x28e>
 800a718:	3301      	adds	r3, #1
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	e7ae      	b.n	800a67c <__ssvfiscanf_r+0x1ec>
 800a71e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a720:	4621      	mov	r1, r4
 800a722:	4630      	mov	r0, r6
 800a724:	4798      	blx	r3
 800a726:	2800      	cmp	r0, #0
 800a728:	d0a8      	beq.n	800a67c <__ssvfiscanf_r+0x1ec>
 800a72a:	e78b      	b.n	800a644 <__ssvfiscanf_r+0x1b4>
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	dc06      	bgt.n	800a73e <__ssvfiscanf_r+0x2ae>
 800a730:	466b      	mov	r3, sp
 800a732:	4622      	mov	r2, r4
 800a734:	a941      	add	r1, sp, #260	; 0x104
 800a736:	4630      	mov	r0, r6
 800a738:	f000 f87a 	bl	800a830 <_scanf_i>
 800a73c:	e7ac      	b.n	800a698 <__ssvfiscanf_r+0x208>
 800a73e:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <__ssvfiscanf_r+0x2ec>)
 800a740:	2b00      	cmp	r3, #0
 800a742:	f43f aecf 	beq.w	800a4e4 <__ssvfiscanf_r+0x54>
 800a746:	466b      	mov	r3, sp
 800a748:	4622      	mov	r2, r4
 800a74a:	a941      	add	r1, sp, #260	; 0x104
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7fc fc51 	bl	8006ff4 <_scanf_float>
 800a752:	e7a1      	b.n	800a698 <__ssvfiscanf_r+0x208>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a75a:	bf18      	it	ne
 800a75c:	f04f 30ff 	movne.w	r0, #4294967295
 800a760:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a768:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a76a:	e7f9      	b.n	800a760 <__ssvfiscanf_r+0x2d0>
 800a76c:	0800a3dd 	.word	0x0800a3dd
 800a770:	0800a457 	.word	0x0800a457
 800a774:	0800bad9 	.word	0x0800bad9
 800a778:	0800be52 	.word	0x0800be52
 800a77c:	08006ff5 	.word	0x08006ff5

0800a780 <_scanf_chars>:
 800a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a784:	4615      	mov	r5, r2
 800a786:	688a      	ldr	r2, [r1, #8]
 800a788:	4680      	mov	r8, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	b932      	cbnz	r2, 800a79c <_scanf_chars+0x1c>
 800a78e:	698a      	ldr	r2, [r1, #24]
 800a790:	2a00      	cmp	r2, #0
 800a792:	bf0c      	ite	eq
 800a794:	2201      	moveq	r2, #1
 800a796:	f04f 32ff 	movne.w	r2, #4294967295
 800a79a:	608a      	str	r2, [r1, #8]
 800a79c:	6822      	ldr	r2, [r4, #0]
 800a79e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a82c <_scanf_chars+0xac>
 800a7a2:	06d1      	lsls	r1, r2, #27
 800a7a4:	bf5f      	itttt	pl
 800a7a6:	681a      	ldrpl	r2, [r3, #0]
 800a7a8:	1d11      	addpl	r1, r2, #4
 800a7aa:	6019      	strpl	r1, [r3, #0]
 800a7ac:	6816      	ldrpl	r6, [r2, #0]
 800a7ae:	2700      	movs	r7, #0
 800a7b0:	69a0      	ldr	r0, [r4, #24]
 800a7b2:	b188      	cbz	r0, 800a7d8 <_scanf_chars+0x58>
 800a7b4:	2801      	cmp	r0, #1
 800a7b6:	d107      	bne.n	800a7c8 <_scanf_chars+0x48>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	781a      	ldrb	r2, [r3, #0]
 800a7bc:	6963      	ldr	r3, [r4, #20]
 800a7be:	5c9b      	ldrb	r3, [r3, r2]
 800a7c0:	b953      	cbnz	r3, 800a7d8 <_scanf_chars+0x58>
 800a7c2:	bb27      	cbnz	r7, 800a80e <_scanf_chars+0x8e>
 800a7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c8:	2802      	cmp	r0, #2
 800a7ca:	d120      	bne.n	800a80e <_scanf_chars+0x8e>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a7d4:	071b      	lsls	r3, r3, #28
 800a7d6:	d41a      	bmi.n	800a80e <_scanf_chars+0x8e>
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	06da      	lsls	r2, r3, #27
 800a7dc:	bf5e      	ittt	pl
 800a7de:	682b      	ldrpl	r3, [r5, #0]
 800a7e0:	781b      	ldrbpl	r3, [r3, #0]
 800a7e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a7e6:	682a      	ldr	r2, [r5, #0]
 800a7e8:	686b      	ldr	r3, [r5, #4]
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	68a2      	ldr	r2, [r4, #8]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	3a01      	subs	r2, #1
 800a7f4:	606b      	str	r3, [r5, #4]
 800a7f6:	3701      	adds	r7, #1
 800a7f8:	60a2      	str	r2, [r4, #8]
 800a7fa:	b142      	cbz	r2, 800a80e <_scanf_chars+0x8e>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	dcd7      	bgt.n	800a7b0 <_scanf_chars+0x30>
 800a800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a804:	4629      	mov	r1, r5
 800a806:	4640      	mov	r0, r8
 800a808:	4798      	blx	r3
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d0d0      	beq.n	800a7b0 <_scanf_chars+0x30>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	f013 0310 	ands.w	r3, r3, #16
 800a814:	d105      	bne.n	800a822 <_scanf_chars+0xa2>
 800a816:	68e2      	ldr	r2, [r4, #12]
 800a818:	3201      	adds	r2, #1
 800a81a:	60e2      	str	r2, [r4, #12]
 800a81c:	69a2      	ldr	r2, [r4, #24]
 800a81e:	b102      	cbz	r2, 800a822 <_scanf_chars+0xa2>
 800a820:	7033      	strb	r3, [r6, #0]
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	441f      	add	r7, r3
 800a826:	6127      	str	r7, [r4, #16]
 800a828:	2000      	movs	r0, #0
 800a82a:	e7cb      	b.n	800a7c4 <_scanf_chars+0x44>
 800a82c:	0800bad9 	.word	0x0800bad9

0800a830 <_scanf_i>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4698      	mov	r8, r3
 800a836:	4b74      	ldr	r3, [pc, #464]	; (800aa08 <_scanf_i+0x1d8>)
 800a838:	460c      	mov	r4, r1
 800a83a:	4682      	mov	sl, r0
 800a83c:	4616      	mov	r6, r2
 800a83e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a842:	b087      	sub	sp, #28
 800a844:	ab03      	add	r3, sp, #12
 800a846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a84a:	4b70      	ldr	r3, [pc, #448]	; (800aa0c <_scanf_i+0x1dc>)
 800a84c:	69a1      	ldr	r1, [r4, #24]
 800a84e:	4a70      	ldr	r2, [pc, #448]	; (800aa10 <_scanf_i+0x1e0>)
 800a850:	2903      	cmp	r1, #3
 800a852:	bf18      	it	ne
 800a854:	461a      	movne	r2, r3
 800a856:	68a3      	ldr	r3, [r4, #8]
 800a858:	9201      	str	r2, [sp, #4]
 800a85a:	1e5a      	subs	r2, r3, #1
 800a85c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a860:	bf88      	it	hi
 800a862:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a866:	4627      	mov	r7, r4
 800a868:	bf82      	ittt	hi
 800a86a:	eb03 0905 	addhi.w	r9, r3, r5
 800a86e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a872:	60a3      	strhi	r3, [r4, #8]
 800a874:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a878:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a87c:	bf98      	it	ls
 800a87e:	f04f 0900 	movls.w	r9, #0
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	463d      	mov	r5, r7
 800a886:	f04f 0b00 	mov.w	fp, #0
 800a88a:	6831      	ldr	r1, [r6, #0]
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	7809      	ldrb	r1, [r1, #0]
 800a890:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a894:	2202      	movs	r2, #2
 800a896:	f7f5 fceb 	bl	8000270 <memchr>
 800a89a:	b328      	cbz	r0, 800a8e8 <_scanf_i+0xb8>
 800a89c:	f1bb 0f01 	cmp.w	fp, #1
 800a8a0:	d159      	bne.n	800a956 <_scanf_i+0x126>
 800a8a2:	6862      	ldr	r2, [r4, #4]
 800a8a4:	b92a      	cbnz	r2, 800a8b2 <_scanf_i+0x82>
 800a8a6:	6822      	ldr	r2, [r4, #0]
 800a8a8:	2308      	movs	r3, #8
 800a8aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ae:	6063      	str	r3, [r4, #4]
 800a8b0:	6022      	str	r2, [r4, #0]
 800a8b2:	6822      	ldr	r2, [r4, #0]
 800a8b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a8b8:	6022      	str	r2, [r4, #0]
 800a8ba:	68a2      	ldr	r2, [r4, #8]
 800a8bc:	1e51      	subs	r1, r2, #1
 800a8be:	60a1      	str	r1, [r4, #8]
 800a8c0:	b192      	cbz	r2, 800a8e8 <_scanf_i+0xb8>
 800a8c2:	6832      	ldr	r2, [r6, #0]
 800a8c4:	1c51      	adds	r1, r2, #1
 800a8c6:	6031      	str	r1, [r6, #0]
 800a8c8:	7812      	ldrb	r2, [r2, #0]
 800a8ca:	f805 2b01 	strb.w	r2, [r5], #1
 800a8ce:	6872      	ldr	r2, [r6, #4]
 800a8d0:	3a01      	subs	r2, #1
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	6072      	str	r2, [r6, #4]
 800a8d6:	dc07      	bgt.n	800a8e8 <_scanf_i+0xb8>
 800a8d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4650      	mov	r0, sl
 800a8e0:	4790      	blx	r2
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	f040 8085 	bne.w	800a9f2 <_scanf_i+0x1c2>
 800a8e8:	f10b 0b01 	add.w	fp, fp, #1
 800a8ec:	f1bb 0f03 	cmp.w	fp, #3
 800a8f0:	d1cb      	bne.n	800a88a <_scanf_i+0x5a>
 800a8f2:	6863      	ldr	r3, [r4, #4]
 800a8f4:	b90b      	cbnz	r3, 800a8fa <_scanf_i+0xca>
 800a8f6:	230a      	movs	r3, #10
 800a8f8:	6063      	str	r3, [r4, #4]
 800a8fa:	6863      	ldr	r3, [r4, #4]
 800a8fc:	4945      	ldr	r1, [pc, #276]	; (800aa14 <_scanf_i+0x1e4>)
 800a8fe:	6960      	ldr	r0, [r4, #20]
 800a900:	1ac9      	subs	r1, r1, r3
 800a902:	f000 f8b5 	bl	800aa70 <__sccl>
 800a906:	f04f 0b00 	mov.w	fp, #0
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	6822      	ldr	r2, [r4, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d03d      	beq.n	800a98e <_scanf_i+0x15e>
 800a912:	6831      	ldr	r1, [r6, #0]
 800a914:	6960      	ldr	r0, [r4, #20]
 800a916:	f891 c000 	ldrb.w	ip, [r1]
 800a91a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a91e:	2800      	cmp	r0, #0
 800a920:	d035      	beq.n	800a98e <_scanf_i+0x15e>
 800a922:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a926:	d124      	bne.n	800a972 <_scanf_i+0x142>
 800a928:	0510      	lsls	r0, r2, #20
 800a92a:	d522      	bpl.n	800a972 <_scanf_i+0x142>
 800a92c:	f10b 0b01 	add.w	fp, fp, #1
 800a930:	f1b9 0f00 	cmp.w	r9, #0
 800a934:	d003      	beq.n	800a93e <_scanf_i+0x10e>
 800a936:	3301      	adds	r3, #1
 800a938:	f109 39ff 	add.w	r9, r9, #4294967295
 800a93c:	60a3      	str	r3, [r4, #8]
 800a93e:	6873      	ldr	r3, [r6, #4]
 800a940:	3b01      	subs	r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	6073      	str	r3, [r6, #4]
 800a946:	dd1b      	ble.n	800a980 <_scanf_i+0x150>
 800a948:	6833      	ldr	r3, [r6, #0]
 800a94a:	3301      	adds	r3, #1
 800a94c:	6033      	str	r3, [r6, #0]
 800a94e:	68a3      	ldr	r3, [r4, #8]
 800a950:	3b01      	subs	r3, #1
 800a952:	60a3      	str	r3, [r4, #8]
 800a954:	e7d9      	b.n	800a90a <_scanf_i+0xda>
 800a956:	f1bb 0f02 	cmp.w	fp, #2
 800a95a:	d1ae      	bne.n	800a8ba <_scanf_i+0x8a>
 800a95c:	6822      	ldr	r2, [r4, #0]
 800a95e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a962:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a966:	d1bf      	bne.n	800a8e8 <_scanf_i+0xb8>
 800a968:	2310      	movs	r3, #16
 800a96a:	6063      	str	r3, [r4, #4]
 800a96c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a970:	e7a2      	b.n	800a8b8 <_scanf_i+0x88>
 800a972:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a976:	6022      	str	r2, [r4, #0]
 800a978:	780b      	ldrb	r3, [r1, #0]
 800a97a:	f805 3b01 	strb.w	r3, [r5], #1
 800a97e:	e7de      	b.n	800a93e <_scanf_i+0x10e>
 800a980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a984:	4631      	mov	r1, r6
 800a986:	4650      	mov	r0, sl
 800a988:	4798      	blx	r3
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d0df      	beq.n	800a94e <_scanf_i+0x11e>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	05d9      	lsls	r1, r3, #23
 800a992:	d50d      	bpl.n	800a9b0 <_scanf_i+0x180>
 800a994:	42bd      	cmp	r5, r7
 800a996:	d909      	bls.n	800a9ac <_scanf_i+0x17c>
 800a998:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	4798      	blx	r3
 800a9a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800a9aa:	464d      	mov	r5, r9
 800a9ac:	42bd      	cmp	r5, r7
 800a9ae:	d028      	beq.n	800aa02 <_scanf_i+0x1d2>
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	f012 0210 	ands.w	r2, r2, #16
 800a9b6:	d113      	bne.n	800a9e0 <_scanf_i+0x1b0>
 800a9b8:	702a      	strb	r2, [r5, #0]
 800a9ba:	6863      	ldr	r3, [r4, #4]
 800a9bc:	9e01      	ldr	r6, [sp, #4]
 800a9be:	4639      	mov	r1, r7
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	47b0      	blx	r6
 800a9c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9c8:	6821      	ldr	r1, [r4, #0]
 800a9ca:	1d1a      	adds	r2, r3, #4
 800a9cc:	f8c8 2000 	str.w	r2, [r8]
 800a9d0:	f011 0f20 	tst.w	r1, #32
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	d00f      	beq.n	800a9f8 <_scanf_i+0x1c8>
 800a9d8:	6018      	str	r0, [r3, #0]
 800a9da:	68e3      	ldr	r3, [r4, #12]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	60e3      	str	r3, [r4, #12]
 800a9e0:	1bed      	subs	r5, r5, r7
 800a9e2:	44ab      	add	fp, r5
 800a9e4:	6925      	ldr	r5, [r4, #16]
 800a9e6:	445d      	add	r5, fp
 800a9e8:	6125      	str	r5, [r4, #16]
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	b007      	add	sp, #28
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	f04f 0b00 	mov.w	fp, #0
 800a9f6:	e7ca      	b.n	800a98e <_scanf_i+0x15e>
 800a9f8:	07ca      	lsls	r2, r1, #31
 800a9fa:	bf4c      	ite	mi
 800a9fc:	8018      	strhmi	r0, [r3, #0]
 800a9fe:	6018      	strpl	r0, [r3, #0]
 800aa00:	e7eb      	b.n	800a9da <_scanf_i+0x1aa>
 800aa02:	2001      	movs	r0, #1
 800aa04:	e7f2      	b.n	800a9ec <_scanf_i+0x1bc>
 800aa06:	bf00      	nop
 800aa08:	0800ba24 	.word	0x0800ba24
 800aa0c:	0800abdd 	.word	0x0800abdd
 800aa10:	08008279 	.word	0x08008279
 800aa14:	0800be76 	.word	0x0800be76

0800aa18 <_read_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4d07      	ldr	r5, [pc, #28]	; (800aa38 <_read_r+0x20>)
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	4608      	mov	r0, r1
 800aa20:	4611      	mov	r1, r2
 800aa22:	2200      	movs	r2, #0
 800aa24:	602a      	str	r2, [r5, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	f7f6 feb4 	bl	8001794 <_read>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_read_r+0x1e>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_read_r+0x1e>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	20000618 	.word	0x20000618
 800aa3c:	00000000 	.word	0x00000000

0800aa40 <nan>:
 800aa40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa48 <nan+0x8>
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	00000000 	.word	0x00000000
 800aa4c:	7ff80000 	.word	0x7ff80000

0800aa50 <_sbrk_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_sbrk_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f6 ff08 	bl	8001870 <_sbrk>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_sbrk_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_sbrk_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20000618 	.word	0x20000618

0800aa70 <__sccl>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	780b      	ldrb	r3, [r1, #0]
 800aa74:	4604      	mov	r4, r0
 800aa76:	2b5e      	cmp	r3, #94	; 0x5e
 800aa78:	bf0b      	itete	eq
 800aa7a:	784b      	ldrbeq	r3, [r1, #1]
 800aa7c:	1c48      	addne	r0, r1, #1
 800aa7e:	1c88      	addeq	r0, r1, #2
 800aa80:	2200      	movne	r2, #0
 800aa82:	bf08      	it	eq
 800aa84:	2201      	moveq	r2, #1
 800aa86:	1e61      	subs	r1, r4, #1
 800aa88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800aa8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800aa90:	42a9      	cmp	r1, r5
 800aa92:	d1fb      	bne.n	800aa8c <__sccl+0x1c>
 800aa94:	b90b      	cbnz	r3, 800aa9a <__sccl+0x2a>
 800aa96:	3801      	subs	r0, #1
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	f082 0101 	eor.w	r1, r2, #1
 800aa9e:	54e1      	strb	r1, [r4, r3]
 800aaa0:	1c42      	adds	r2, r0, #1
 800aaa2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800aaa6:	2d2d      	cmp	r5, #45	; 0x2d
 800aaa8:	f102 36ff 	add.w	r6, r2, #4294967295
 800aaac:	4610      	mov	r0, r2
 800aaae:	d006      	beq.n	800aabe <__sccl+0x4e>
 800aab0:	2d5d      	cmp	r5, #93	; 0x5d
 800aab2:	d0f1      	beq.n	800aa98 <__sccl+0x28>
 800aab4:	b90d      	cbnz	r5, 800aaba <__sccl+0x4a>
 800aab6:	4630      	mov	r0, r6
 800aab8:	e7ee      	b.n	800aa98 <__sccl+0x28>
 800aaba:	462b      	mov	r3, r5
 800aabc:	e7ef      	b.n	800aa9e <__sccl+0x2e>
 800aabe:	7816      	ldrb	r6, [r2, #0]
 800aac0:	2e5d      	cmp	r6, #93	; 0x5d
 800aac2:	d0fa      	beq.n	800aaba <__sccl+0x4a>
 800aac4:	42b3      	cmp	r3, r6
 800aac6:	dcf8      	bgt.n	800aaba <__sccl+0x4a>
 800aac8:	4618      	mov	r0, r3
 800aaca:	3001      	adds	r0, #1
 800aacc:	4286      	cmp	r6, r0
 800aace:	5421      	strb	r1, [r4, r0]
 800aad0:	dcfb      	bgt.n	800aaca <__sccl+0x5a>
 800aad2:	43d8      	mvns	r0, r3
 800aad4:	4430      	add	r0, r6
 800aad6:	1c5d      	adds	r5, r3, #1
 800aad8:	42b3      	cmp	r3, r6
 800aada:	bfa8      	it	ge
 800aadc:	2000      	movge	r0, #0
 800aade:	182b      	adds	r3, r5, r0
 800aae0:	3202      	adds	r2, #2
 800aae2:	e7de      	b.n	800aaa2 <__sccl+0x32>

0800aae4 <_strtoul_l.isra.0>:
 800aae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aae8:	4e3b      	ldr	r6, [pc, #236]	; (800abd8 <_strtoul_l.isra.0+0xf4>)
 800aaea:	4686      	mov	lr, r0
 800aaec:	468c      	mov	ip, r1
 800aaee:	4660      	mov	r0, ip
 800aaf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800aaf4:	5da5      	ldrb	r5, [r4, r6]
 800aaf6:	f015 0508 	ands.w	r5, r5, #8
 800aafa:	d1f8      	bne.n	800aaee <_strtoul_l.isra.0+0xa>
 800aafc:	2c2d      	cmp	r4, #45	; 0x2d
 800aafe:	d134      	bne.n	800ab6a <_strtoul_l.isra.0+0x86>
 800ab00:	f89c 4000 	ldrb.w	r4, [ip]
 800ab04:	f04f 0801 	mov.w	r8, #1
 800ab08:	f100 0c02 	add.w	ip, r0, #2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d05e      	beq.n	800abce <_strtoul_l.isra.0+0xea>
 800ab10:	2b10      	cmp	r3, #16
 800ab12:	d10c      	bne.n	800ab2e <_strtoul_l.isra.0+0x4a>
 800ab14:	2c30      	cmp	r4, #48	; 0x30
 800ab16:	d10a      	bne.n	800ab2e <_strtoul_l.isra.0+0x4a>
 800ab18:	f89c 0000 	ldrb.w	r0, [ip]
 800ab1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ab20:	2858      	cmp	r0, #88	; 0x58
 800ab22:	d14f      	bne.n	800abc4 <_strtoul_l.isra.0+0xe0>
 800ab24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f10c 0c02 	add.w	ip, ip, #2
 800ab2e:	f04f 37ff 	mov.w	r7, #4294967295
 800ab32:	2500      	movs	r5, #0
 800ab34:	fbb7 f7f3 	udiv	r7, r7, r3
 800ab38:	fb03 f907 	mul.w	r9, r3, r7
 800ab3c:	ea6f 0909 	mvn.w	r9, r9
 800ab40:	4628      	mov	r0, r5
 800ab42:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ab46:	2e09      	cmp	r6, #9
 800ab48:	d818      	bhi.n	800ab7c <_strtoul_l.isra.0+0x98>
 800ab4a:	4634      	mov	r4, r6
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	dd24      	ble.n	800ab9a <_strtoul_l.isra.0+0xb6>
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	db1f      	blt.n	800ab94 <_strtoul_l.isra.0+0xb0>
 800ab54:	4287      	cmp	r7, r0
 800ab56:	d31d      	bcc.n	800ab94 <_strtoul_l.isra.0+0xb0>
 800ab58:	d101      	bne.n	800ab5e <_strtoul_l.isra.0+0x7a>
 800ab5a:	45a1      	cmp	r9, r4
 800ab5c:	db1a      	blt.n	800ab94 <_strtoul_l.isra.0+0xb0>
 800ab5e:	fb00 4003 	mla	r0, r0, r3, r4
 800ab62:	2501      	movs	r5, #1
 800ab64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ab68:	e7eb      	b.n	800ab42 <_strtoul_l.isra.0+0x5e>
 800ab6a:	2c2b      	cmp	r4, #43	; 0x2b
 800ab6c:	bf08      	it	eq
 800ab6e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ab72:	46a8      	mov	r8, r5
 800ab74:	bf08      	it	eq
 800ab76:	f100 0c02 	addeq.w	ip, r0, #2
 800ab7a:	e7c7      	b.n	800ab0c <_strtoul_l.isra.0+0x28>
 800ab7c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ab80:	2e19      	cmp	r6, #25
 800ab82:	d801      	bhi.n	800ab88 <_strtoul_l.isra.0+0xa4>
 800ab84:	3c37      	subs	r4, #55	; 0x37
 800ab86:	e7e1      	b.n	800ab4c <_strtoul_l.isra.0+0x68>
 800ab88:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ab8c:	2e19      	cmp	r6, #25
 800ab8e:	d804      	bhi.n	800ab9a <_strtoul_l.isra.0+0xb6>
 800ab90:	3c57      	subs	r4, #87	; 0x57
 800ab92:	e7db      	b.n	800ab4c <_strtoul_l.isra.0+0x68>
 800ab94:	f04f 35ff 	mov.w	r5, #4294967295
 800ab98:	e7e4      	b.n	800ab64 <_strtoul_l.isra.0+0x80>
 800ab9a:	2d00      	cmp	r5, #0
 800ab9c:	da07      	bge.n	800abae <_strtoul_l.isra.0+0xca>
 800ab9e:	2322      	movs	r3, #34	; 0x22
 800aba0:	f8ce 3000 	str.w	r3, [lr]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	b942      	cbnz	r2, 800abbc <_strtoul_l.isra.0+0xd8>
 800abaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abae:	f1b8 0f00 	cmp.w	r8, #0
 800abb2:	d000      	beq.n	800abb6 <_strtoul_l.isra.0+0xd2>
 800abb4:	4240      	negs	r0, r0
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	d0f7      	beq.n	800abaa <_strtoul_l.isra.0+0xc6>
 800abba:	b10d      	cbz	r5, 800abc0 <_strtoul_l.isra.0+0xdc>
 800abbc:	f10c 31ff 	add.w	r1, ip, #4294967295
 800abc0:	6011      	str	r1, [r2, #0]
 800abc2:	e7f2      	b.n	800abaa <_strtoul_l.isra.0+0xc6>
 800abc4:	2430      	movs	r4, #48	; 0x30
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1b1      	bne.n	800ab2e <_strtoul_l.isra.0+0x4a>
 800abca:	2308      	movs	r3, #8
 800abcc:	e7af      	b.n	800ab2e <_strtoul_l.isra.0+0x4a>
 800abce:	2c30      	cmp	r4, #48	; 0x30
 800abd0:	d0a2      	beq.n	800ab18 <_strtoul_l.isra.0+0x34>
 800abd2:	230a      	movs	r3, #10
 800abd4:	e7ab      	b.n	800ab2e <_strtoul_l.isra.0+0x4a>
 800abd6:	bf00      	nop
 800abd8:	0800bad9 	.word	0x0800bad9

0800abdc <_strtoul_r>:
 800abdc:	f7ff bf82 	b.w	800aae4 <_strtoul_l.isra.0>

0800abe0 <__submore>:
 800abe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	460c      	mov	r4, r1
 800abe6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800abe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abec:	4299      	cmp	r1, r3
 800abee:	d11d      	bne.n	800ac2c <__submore+0x4c>
 800abf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800abf4:	f7ff fa3c 	bl	800a070 <_malloc_r>
 800abf8:	b918      	cbnz	r0, 800ac02 <__submore+0x22>
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac06:	63a3      	str	r3, [r4, #56]	; 0x38
 800ac08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ac0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ac12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ac16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ac1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ac1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ac22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ac26:	6020      	str	r0, [r4, #0]
 800ac28:	2000      	movs	r0, #0
 800ac2a:	e7e8      	b.n	800abfe <__submore+0x1e>
 800ac2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ac2e:	0077      	lsls	r7, r6, #1
 800ac30:	463a      	mov	r2, r7
 800ac32:	f000 fa2d 	bl	800b090 <_realloc_r>
 800ac36:	4605      	mov	r5, r0
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d0de      	beq.n	800abfa <__submore+0x1a>
 800ac3c:	eb00 0806 	add.w	r8, r0, r6
 800ac40:	4601      	mov	r1, r0
 800ac42:	4632      	mov	r2, r6
 800ac44:	4640      	mov	r0, r8
 800ac46:	f7fe fce9 	bl	800961c <memcpy>
 800ac4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ac4e:	f8c4 8000 	str.w	r8, [r4]
 800ac52:	e7e9      	b.n	800ac28 <__submore+0x48>

0800ac54 <__ascii_wctomb>:
 800ac54:	b149      	cbz	r1, 800ac6a <__ascii_wctomb+0x16>
 800ac56:	2aff      	cmp	r2, #255	; 0xff
 800ac58:	bf85      	ittet	hi
 800ac5a:	238a      	movhi	r3, #138	; 0x8a
 800ac5c:	6003      	strhi	r3, [r0, #0]
 800ac5e:	700a      	strbls	r2, [r1, #0]
 800ac60:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac64:	bf98      	it	ls
 800ac66:	2001      	movls	r0, #1
 800ac68:	4770      	bx	lr
 800ac6a:	4608      	mov	r0, r1
 800ac6c:	4770      	bx	lr
	...

0800ac70 <__assert_func>:
 800ac70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac72:	4614      	mov	r4, r2
 800ac74:	461a      	mov	r2, r3
 800ac76:	4b09      	ldr	r3, [pc, #36]	; (800ac9c <__assert_func+0x2c>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	68d8      	ldr	r0, [r3, #12]
 800ac7e:	b14c      	cbz	r4, 800ac94 <__assert_func+0x24>
 800ac80:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <__assert_func+0x30>)
 800ac82:	9100      	str	r1, [sp, #0]
 800ac84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac88:	4906      	ldr	r1, [pc, #24]	; (800aca4 <__assert_func+0x34>)
 800ac8a:	462b      	mov	r3, r5
 800ac8c:	f000 f9a6 	bl	800afdc <fiprintf>
 800ac90:	f000 fc3e 	bl	800b510 <abort>
 800ac94:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <__assert_func+0x38>)
 800ac96:	461c      	mov	r4, r3
 800ac98:	e7f3      	b.n	800ac82 <__assert_func+0x12>
 800ac9a:	bf00      	nop
 800ac9c:	200000a8 	.word	0x200000a8
 800aca0:	0800be78 	.word	0x0800be78
 800aca4:	0800be85 	.word	0x0800be85
 800aca8:	0800beb3 	.word	0x0800beb3

0800acac <__sflush_r>:
 800acac:	898a      	ldrh	r2, [r1, #12]
 800acae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb2:	4605      	mov	r5, r0
 800acb4:	0710      	lsls	r0, r2, #28
 800acb6:	460c      	mov	r4, r1
 800acb8:	d458      	bmi.n	800ad6c <__sflush_r+0xc0>
 800acba:	684b      	ldr	r3, [r1, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dc05      	bgt.n	800accc <__sflush_r+0x20>
 800acc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	dc02      	bgt.n	800accc <__sflush_r+0x20>
 800acc6:	2000      	movs	r0, #0
 800acc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800accc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acce:	2e00      	cmp	r6, #0
 800acd0:	d0f9      	beq.n	800acc6 <__sflush_r+0x1a>
 800acd2:	2300      	movs	r3, #0
 800acd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acd8:	682f      	ldr	r7, [r5, #0]
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	d032      	beq.n	800ad44 <__sflush_r+0x98>
 800acde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	075a      	lsls	r2, r3, #29
 800ace4:	d505      	bpl.n	800acf2 <__sflush_r+0x46>
 800ace6:	6863      	ldr	r3, [r4, #4]
 800ace8:	1ac0      	subs	r0, r0, r3
 800acea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acec:	b10b      	cbz	r3, 800acf2 <__sflush_r+0x46>
 800acee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acf0:	1ac0      	subs	r0, r0, r3
 800acf2:	2300      	movs	r3, #0
 800acf4:	4602      	mov	r2, r0
 800acf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf8:	6a21      	ldr	r1, [r4, #32]
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b0      	blx	r6
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	d106      	bne.n	800ad12 <__sflush_r+0x66>
 800ad04:	6829      	ldr	r1, [r5, #0]
 800ad06:	291d      	cmp	r1, #29
 800ad08:	d82c      	bhi.n	800ad64 <__sflush_r+0xb8>
 800ad0a:	4a2a      	ldr	r2, [pc, #168]	; (800adb4 <__sflush_r+0x108>)
 800ad0c:	40ca      	lsrs	r2, r1
 800ad0e:	07d6      	lsls	r6, r2, #31
 800ad10:	d528      	bpl.n	800ad64 <__sflush_r+0xb8>
 800ad12:	2200      	movs	r2, #0
 800ad14:	6062      	str	r2, [r4, #4]
 800ad16:	04d9      	lsls	r1, r3, #19
 800ad18:	6922      	ldr	r2, [r4, #16]
 800ad1a:	6022      	str	r2, [r4, #0]
 800ad1c:	d504      	bpl.n	800ad28 <__sflush_r+0x7c>
 800ad1e:	1c42      	adds	r2, r0, #1
 800ad20:	d101      	bne.n	800ad26 <__sflush_r+0x7a>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b903      	cbnz	r3, 800ad28 <__sflush_r+0x7c>
 800ad26:	6560      	str	r0, [r4, #84]	; 0x54
 800ad28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2a:	602f      	str	r7, [r5, #0]
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	d0ca      	beq.n	800acc6 <__sflush_r+0x1a>
 800ad30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad34:	4299      	cmp	r1, r3
 800ad36:	d002      	beq.n	800ad3e <__sflush_r+0x92>
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f7ff f949 	bl	8009fd0 <_free_r>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	6360      	str	r0, [r4, #52]	; 0x34
 800ad42:	e7c1      	b.n	800acc8 <__sflush_r+0x1c>
 800ad44:	6a21      	ldr	r1, [r4, #32]
 800ad46:	2301      	movs	r3, #1
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b0      	blx	r6
 800ad4c:	1c41      	adds	r1, r0, #1
 800ad4e:	d1c7      	bne.n	800ace0 <__sflush_r+0x34>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0c4      	beq.n	800ace0 <__sflush_r+0x34>
 800ad56:	2b1d      	cmp	r3, #29
 800ad58:	d001      	beq.n	800ad5e <__sflush_r+0xb2>
 800ad5a:	2b16      	cmp	r3, #22
 800ad5c:	d101      	bne.n	800ad62 <__sflush_r+0xb6>
 800ad5e:	602f      	str	r7, [r5, #0]
 800ad60:	e7b1      	b.n	800acc6 <__sflush_r+0x1a>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	e7ad      	b.n	800acc8 <__sflush_r+0x1c>
 800ad6c:	690f      	ldr	r7, [r1, #16]
 800ad6e:	2f00      	cmp	r7, #0
 800ad70:	d0a9      	beq.n	800acc6 <__sflush_r+0x1a>
 800ad72:	0793      	lsls	r3, r2, #30
 800ad74:	680e      	ldr	r6, [r1, #0]
 800ad76:	bf08      	it	eq
 800ad78:	694b      	ldreq	r3, [r1, #20]
 800ad7a:	600f      	str	r7, [r1, #0]
 800ad7c:	bf18      	it	ne
 800ad7e:	2300      	movne	r3, #0
 800ad80:	eba6 0807 	sub.w	r8, r6, r7
 800ad84:	608b      	str	r3, [r1, #8]
 800ad86:	f1b8 0f00 	cmp.w	r8, #0
 800ad8a:	dd9c      	ble.n	800acc6 <__sflush_r+0x1a>
 800ad8c:	6a21      	ldr	r1, [r4, #32]
 800ad8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad90:	4643      	mov	r3, r8
 800ad92:	463a      	mov	r2, r7
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b0      	blx	r6
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dc06      	bgt.n	800adaa <__sflush_r+0xfe>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	f04f 30ff 	mov.w	r0, #4294967295
 800ada8:	e78e      	b.n	800acc8 <__sflush_r+0x1c>
 800adaa:	4407      	add	r7, r0
 800adac:	eba8 0800 	sub.w	r8, r8, r0
 800adb0:	e7e9      	b.n	800ad86 <__sflush_r+0xda>
 800adb2:	bf00      	nop
 800adb4:	20400001 	.word	0x20400001

0800adb8 <_fflush_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	690b      	ldr	r3, [r1, #16]
 800adbc:	4605      	mov	r5, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	b913      	cbnz	r3, 800adc8 <_fflush_r+0x10>
 800adc2:	2500      	movs	r5, #0
 800adc4:	4628      	mov	r0, r5
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	b118      	cbz	r0, 800add2 <_fflush_r+0x1a>
 800adca:	6983      	ldr	r3, [r0, #24]
 800adcc:	b90b      	cbnz	r3, 800add2 <_fflush_r+0x1a>
 800adce:	f000 f887 	bl	800aee0 <__sinit>
 800add2:	4b14      	ldr	r3, [pc, #80]	; (800ae24 <_fflush_r+0x6c>)
 800add4:	429c      	cmp	r4, r3
 800add6:	d11b      	bne.n	800ae10 <_fflush_r+0x58>
 800add8:	686c      	ldr	r4, [r5, #4]
 800adda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0ef      	beq.n	800adc2 <_fflush_r+0xa>
 800ade2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade4:	07d0      	lsls	r0, r2, #31
 800ade6:	d404      	bmi.n	800adf2 <_fflush_r+0x3a>
 800ade8:	0599      	lsls	r1, r3, #22
 800adea:	d402      	bmi.n	800adf2 <_fflush_r+0x3a>
 800adec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adee:	f000 f927 	bl	800b040 <__retarget_lock_acquire_recursive>
 800adf2:	4628      	mov	r0, r5
 800adf4:	4621      	mov	r1, r4
 800adf6:	f7ff ff59 	bl	800acac <__sflush_r>
 800adfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adfc:	07da      	lsls	r2, r3, #31
 800adfe:	4605      	mov	r5, r0
 800ae00:	d4e0      	bmi.n	800adc4 <_fflush_r+0xc>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	059b      	lsls	r3, r3, #22
 800ae06:	d4dd      	bmi.n	800adc4 <_fflush_r+0xc>
 800ae08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0a:	f000 f91a 	bl	800b042 <__retarget_lock_release_recursive>
 800ae0e:	e7d9      	b.n	800adc4 <_fflush_r+0xc>
 800ae10:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <_fflush_r+0x70>)
 800ae12:	429c      	cmp	r4, r3
 800ae14:	d101      	bne.n	800ae1a <_fflush_r+0x62>
 800ae16:	68ac      	ldr	r4, [r5, #8]
 800ae18:	e7df      	b.n	800adda <_fflush_r+0x22>
 800ae1a:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <_fflush_r+0x74>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	bf08      	it	eq
 800ae20:	68ec      	ldreq	r4, [r5, #12]
 800ae22:	e7da      	b.n	800adda <_fflush_r+0x22>
 800ae24:	0800bed4 	.word	0x0800bed4
 800ae28:	0800bef4 	.word	0x0800bef4
 800ae2c:	0800beb4 	.word	0x0800beb4

0800ae30 <std>:
 800ae30:	2300      	movs	r3, #0
 800ae32:	b510      	push	{r4, lr}
 800ae34:	4604      	mov	r4, r0
 800ae36:	e9c0 3300 	strd	r3, r3, [r0]
 800ae3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae3e:	6083      	str	r3, [r0, #8]
 800ae40:	8181      	strh	r1, [r0, #12]
 800ae42:	6643      	str	r3, [r0, #100]	; 0x64
 800ae44:	81c2      	strh	r2, [r0, #14]
 800ae46:	6183      	str	r3, [r0, #24]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	2208      	movs	r2, #8
 800ae4c:	305c      	adds	r0, #92	; 0x5c
 800ae4e:	f7fb fc85 	bl	800675c <memset>
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <std+0x38>)
 800ae54:	6263      	str	r3, [r4, #36]	; 0x24
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <std+0x3c>)
 800ae58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x40>)
 800ae5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x44>)
 800ae60:	6224      	str	r4, [r4, #32]
 800ae62:	6323      	str	r3, [r4, #48]	; 0x30
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	bf00      	nop
 800ae68:	080074a1 	.word	0x080074a1
 800ae6c:	080074c7 	.word	0x080074c7
 800ae70:	080074ff 	.word	0x080074ff
 800ae74:	08007523 	.word	0x08007523

0800ae78 <_cleanup_r>:
 800ae78:	4901      	ldr	r1, [pc, #4]	; (800ae80 <_cleanup_r+0x8>)
 800ae7a:	f000 b8c1 	b.w	800b000 <_fwalk_reent>
 800ae7e:	bf00      	nop
 800ae80:	0800adb9 	.word	0x0800adb9

0800ae84 <__sfmoreglue>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	1e4a      	subs	r2, r1, #1
 800ae88:	2568      	movs	r5, #104	; 0x68
 800ae8a:	4355      	muls	r5, r2
 800ae8c:	460e      	mov	r6, r1
 800ae8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae92:	f7ff f8ed 	bl	800a070 <_malloc_r>
 800ae96:	4604      	mov	r4, r0
 800ae98:	b140      	cbz	r0, 800aeac <__sfmoreglue+0x28>
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	e9c0 1600 	strd	r1, r6, [r0]
 800aea0:	300c      	adds	r0, #12
 800aea2:	60a0      	str	r0, [r4, #8]
 800aea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aea8:	f7fb fc58 	bl	800675c <memset>
 800aeac:	4620      	mov	r0, r4
 800aeae:	bd70      	pop	{r4, r5, r6, pc}

0800aeb0 <__sfp_lock_acquire>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	; (800aeb8 <__sfp_lock_acquire+0x8>)
 800aeb2:	f000 b8c5 	b.w	800b040 <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	20000624 	.word	0x20000624

0800aebc <__sfp_lock_release>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__sfp_lock_release+0x8>)
 800aebe:	f000 b8c0 	b.w	800b042 <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	20000624 	.word	0x20000624

0800aec8 <__sinit_lock_acquire>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__sinit_lock_acquire+0x8>)
 800aeca:	f000 b8b9 	b.w	800b040 <__retarget_lock_acquire_recursive>
 800aece:	bf00      	nop
 800aed0:	2000061f 	.word	0x2000061f

0800aed4 <__sinit_lock_release>:
 800aed4:	4801      	ldr	r0, [pc, #4]	; (800aedc <__sinit_lock_release+0x8>)
 800aed6:	f000 b8b4 	b.w	800b042 <__retarget_lock_release_recursive>
 800aeda:	bf00      	nop
 800aedc:	2000061f 	.word	0x2000061f

0800aee0 <__sinit>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	4604      	mov	r4, r0
 800aee4:	f7ff fff0 	bl	800aec8 <__sinit_lock_acquire>
 800aee8:	69a3      	ldr	r3, [r4, #24]
 800aeea:	b11b      	cbz	r3, 800aef4 <__sinit+0x14>
 800aeec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef0:	f7ff bff0 	b.w	800aed4 <__sinit_lock_release>
 800aef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aef8:	6523      	str	r3, [r4, #80]	; 0x50
 800aefa:	4b13      	ldr	r3, [pc, #76]	; (800af48 <__sinit+0x68>)
 800aefc:	4a13      	ldr	r2, [pc, #76]	; (800af4c <__sinit+0x6c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	62a2      	str	r2, [r4, #40]	; 0x28
 800af02:	42a3      	cmp	r3, r4
 800af04:	bf04      	itt	eq
 800af06:	2301      	moveq	r3, #1
 800af08:	61a3      	streq	r3, [r4, #24]
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 f820 	bl	800af50 <__sfp>
 800af10:	6060      	str	r0, [r4, #4]
 800af12:	4620      	mov	r0, r4
 800af14:	f000 f81c 	bl	800af50 <__sfp>
 800af18:	60a0      	str	r0, [r4, #8]
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 f818 	bl	800af50 <__sfp>
 800af20:	2200      	movs	r2, #0
 800af22:	60e0      	str	r0, [r4, #12]
 800af24:	2104      	movs	r1, #4
 800af26:	6860      	ldr	r0, [r4, #4]
 800af28:	f7ff ff82 	bl	800ae30 <std>
 800af2c:	68a0      	ldr	r0, [r4, #8]
 800af2e:	2201      	movs	r2, #1
 800af30:	2109      	movs	r1, #9
 800af32:	f7ff ff7d 	bl	800ae30 <std>
 800af36:	68e0      	ldr	r0, [r4, #12]
 800af38:	2202      	movs	r2, #2
 800af3a:	2112      	movs	r1, #18
 800af3c:	f7ff ff78 	bl	800ae30 <std>
 800af40:	2301      	movs	r3, #1
 800af42:	61a3      	str	r3, [r4, #24]
 800af44:	e7d2      	b.n	800aeec <__sinit+0xc>
 800af46:	bf00      	nop
 800af48:	0800ba48 	.word	0x0800ba48
 800af4c:	0800ae79 	.word	0x0800ae79

0800af50 <__sfp>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	4607      	mov	r7, r0
 800af54:	f7ff ffac 	bl	800aeb0 <__sfp_lock_acquire>
 800af58:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <__sfp+0x84>)
 800af5a:	681e      	ldr	r6, [r3, #0]
 800af5c:	69b3      	ldr	r3, [r6, #24]
 800af5e:	b913      	cbnz	r3, 800af66 <__sfp+0x16>
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ffbd 	bl	800aee0 <__sinit>
 800af66:	3648      	adds	r6, #72	; 0x48
 800af68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	d503      	bpl.n	800af78 <__sfp+0x28>
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	b30b      	cbz	r3, 800afb8 <__sfp+0x68>
 800af74:	6836      	ldr	r6, [r6, #0]
 800af76:	e7f7      	b.n	800af68 <__sfp+0x18>
 800af78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af7c:	b9d5      	cbnz	r5, 800afb4 <__sfp+0x64>
 800af7e:	4b16      	ldr	r3, [pc, #88]	; (800afd8 <__sfp+0x88>)
 800af80:	60e3      	str	r3, [r4, #12]
 800af82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af86:	6665      	str	r5, [r4, #100]	; 0x64
 800af88:	f000 f859 	bl	800b03e <__retarget_lock_init_recursive>
 800af8c:	f7ff ff96 	bl	800aebc <__sfp_lock_release>
 800af90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af98:	6025      	str	r5, [r4, #0]
 800af9a:	61a5      	str	r5, [r4, #24]
 800af9c:	2208      	movs	r2, #8
 800af9e:	4629      	mov	r1, r5
 800afa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afa4:	f7fb fbda 	bl	800675c <memset>
 800afa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afb0:	4620      	mov	r0, r4
 800afb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb4:	3468      	adds	r4, #104	; 0x68
 800afb6:	e7d9      	b.n	800af6c <__sfp+0x1c>
 800afb8:	2104      	movs	r1, #4
 800afba:	4638      	mov	r0, r7
 800afbc:	f7ff ff62 	bl	800ae84 <__sfmoreglue>
 800afc0:	4604      	mov	r4, r0
 800afc2:	6030      	str	r0, [r6, #0]
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d1d5      	bne.n	800af74 <__sfp+0x24>
 800afc8:	f7ff ff78 	bl	800aebc <__sfp_lock_release>
 800afcc:	230c      	movs	r3, #12
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	e7ee      	b.n	800afb0 <__sfp+0x60>
 800afd2:	bf00      	nop
 800afd4:	0800ba48 	.word	0x0800ba48
 800afd8:	ffff0001 	.word	0xffff0001

0800afdc <fiprintf>:
 800afdc:	b40e      	push	{r1, r2, r3}
 800afde:	b503      	push	{r0, r1, lr}
 800afe0:	4601      	mov	r1, r0
 800afe2:	ab03      	add	r3, sp, #12
 800afe4:	4805      	ldr	r0, [pc, #20]	; (800affc <fiprintf+0x20>)
 800afe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	f000 f89f 	bl	800b130 <_vfiprintf_r>
 800aff2:	b002      	add	sp, #8
 800aff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aff8:	b003      	add	sp, #12
 800affa:	4770      	bx	lr
 800affc:	200000a8 	.word	0x200000a8

0800b000 <_fwalk_reent>:
 800b000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b004:	4606      	mov	r6, r0
 800b006:	4688      	mov	r8, r1
 800b008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b00c:	2700      	movs	r7, #0
 800b00e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b012:	f1b9 0901 	subs.w	r9, r9, #1
 800b016:	d505      	bpl.n	800b024 <_fwalk_reent+0x24>
 800b018:	6824      	ldr	r4, [r4, #0]
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	d1f7      	bne.n	800b00e <_fwalk_reent+0xe>
 800b01e:	4638      	mov	r0, r7
 800b020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b024:	89ab      	ldrh	r3, [r5, #12]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d907      	bls.n	800b03a <_fwalk_reent+0x3a>
 800b02a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b02e:	3301      	adds	r3, #1
 800b030:	d003      	beq.n	800b03a <_fwalk_reent+0x3a>
 800b032:	4629      	mov	r1, r5
 800b034:	4630      	mov	r0, r6
 800b036:	47c0      	blx	r8
 800b038:	4307      	orrs	r7, r0
 800b03a:	3568      	adds	r5, #104	; 0x68
 800b03c:	e7e9      	b.n	800b012 <_fwalk_reent+0x12>

0800b03e <__retarget_lock_init_recursive>:
 800b03e:	4770      	bx	lr

0800b040 <__retarget_lock_acquire_recursive>:
 800b040:	4770      	bx	lr

0800b042 <__retarget_lock_release_recursive>:
 800b042:	4770      	bx	lr

0800b044 <memmove>:
 800b044:	4288      	cmp	r0, r1
 800b046:	b510      	push	{r4, lr}
 800b048:	eb01 0402 	add.w	r4, r1, r2
 800b04c:	d902      	bls.n	800b054 <memmove+0x10>
 800b04e:	4284      	cmp	r4, r0
 800b050:	4623      	mov	r3, r4
 800b052:	d807      	bhi.n	800b064 <memmove+0x20>
 800b054:	1e43      	subs	r3, r0, #1
 800b056:	42a1      	cmp	r1, r4
 800b058:	d008      	beq.n	800b06c <memmove+0x28>
 800b05a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b05e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b062:	e7f8      	b.n	800b056 <memmove+0x12>
 800b064:	4402      	add	r2, r0
 800b066:	4601      	mov	r1, r0
 800b068:	428a      	cmp	r2, r1
 800b06a:	d100      	bne.n	800b06e <memmove+0x2a>
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b076:	e7f7      	b.n	800b068 <memmove+0x24>

0800b078 <__malloc_lock>:
 800b078:	4801      	ldr	r0, [pc, #4]	; (800b080 <__malloc_lock+0x8>)
 800b07a:	f7ff bfe1 	b.w	800b040 <__retarget_lock_acquire_recursive>
 800b07e:	bf00      	nop
 800b080:	20000620 	.word	0x20000620

0800b084 <__malloc_unlock>:
 800b084:	4801      	ldr	r0, [pc, #4]	; (800b08c <__malloc_unlock+0x8>)
 800b086:	f7ff bfdc 	b.w	800b042 <__retarget_lock_release_recursive>
 800b08a:	bf00      	nop
 800b08c:	20000620 	.word	0x20000620

0800b090 <_realloc_r>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	4607      	mov	r7, r0
 800b094:	4614      	mov	r4, r2
 800b096:	460e      	mov	r6, r1
 800b098:	b921      	cbnz	r1, 800b0a4 <_realloc_r+0x14>
 800b09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b09e:	4611      	mov	r1, r2
 800b0a0:	f7fe bfe6 	b.w	800a070 <_malloc_r>
 800b0a4:	b922      	cbnz	r2, 800b0b0 <_realloc_r+0x20>
 800b0a6:	f7fe ff93 	bl	8009fd0 <_free_r>
 800b0aa:	4625      	mov	r5, r4
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b0:	f000 fa9a 	bl	800b5e8 <_malloc_usable_size_r>
 800b0b4:	42a0      	cmp	r0, r4
 800b0b6:	d20f      	bcs.n	800b0d8 <_realloc_r+0x48>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	f7fe ffd8 	bl	800a070 <_malloc_r>
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d0f2      	beq.n	800b0ac <_realloc_r+0x1c>
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	f7fe faa7 	bl	800961c <memcpy>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7fe ff7d 	bl	8009fd0 <_free_r>
 800b0d6:	e7e9      	b.n	800b0ac <_realloc_r+0x1c>
 800b0d8:	4635      	mov	r5, r6
 800b0da:	e7e7      	b.n	800b0ac <_realloc_r+0x1c>

0800b0dc <__sfputc_r>:
 800b0dc:	6893      	ldr	r3, [r2, #8]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	b410      	push	{r4}
 800b0e4:	6093      	str	r3, [r2, #8]
 800b0e6:	da08      	bge.n	800b0fa <__sfputc_r+0x1e>
 800b0e8:	6994      	ldr	r4, [r2, #24]
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	db01      	blt.n	800b0f2 <__sfputc_r+0x16>
 800b0ee:	290a      	cmp	r1, #10
 800b0f0:	d103      	bne.n	800b0fa <__sfputc_r+0x1e>
 800b0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f6:	f000 b94b 	b.w	800b390 <__swbuf_r>
 800b0fa:	6813      	ldr	r3, [r2, #0]
 800b0fc:	1c58      	adds	r0, r3, #1
 800b0fe:	6010      	str	r0, [r2, #0]
 800b100:	7019      	strb	r1, [r3, #0]
 800b102:	4608      	mov	r0, r1
 800b104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <__sfputs_r>:
 800b10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	4614      	mov	r4, r2
 800b112:	18d5      	adds	r5, r2, r3
 800b114:	42ac      	cmp	r4, r5
 800b116:	d101      	bne.n	800b11c <__sfputs_r+0x12>
 800b118:	2000      	movs	r0, #0
 800b11a:	e007      	b.n	800b12c <__sfputs_r+0x22>
 800b11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b120:	463a      	mov	r2, r7
 800b122:	4630      	mov	r0, r6
 800b124:	f7ff ffda 	bl	800b0dc <__sfputc_r>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d1f3      	bne.n	800b114 <__sfputs_r+0xa>
 800b12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b130 <_vfiprintf_r>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	460d      	mov	r5, r1
 800b136:	b09d      	sub	sp, #116	; 0x74
 800b138:	4614      	mov	r4, r2
 800b13a:	4698      	mov	r8, r3
 800b13c:	4606      	mov	r6, r0
 800b13e:	b118      	cbz	r0, 800b148 <_vfiprintf_r+0x18>
 800b140:	6983      	ldr	r3, [r0, #24]
 800b142:	b90b      	cbnz	r3, 800b148 <_vfiprintf_r+0x18>
 800b144:	f7ff fecc 	bl	800aee0 <__sinit>
 800b148:	4b89      	ldr	r3, [pc, #548]	; (800b370 <_vfiprintf_r+0x240>)
 800b14a:	429d      	cmp	r5, r3
 800b14c:	d11b      	bne.n	800b186 <_vfiprintf_r+0x56>
 800b14e:	6875      	ldr	r5, [r6, #4]
 800b150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b152:	07d9      	lsls	r1, r3, #31
 800b154:	d405      	bmi.n	800b162 <_vfiprintf_r+0x32>
 800b156:	89ab      	ldrh	r3, [r5, #12]
 800b158:	059a      	lsls	r2, r3, #22
 800b15a:	d402      	bmi.n	800b162 <_vfiprintf_r+0x32>
 800b15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b15e:	f7ff ff6f 	bl	800b040 <__retarget_lock_acquire_recursive>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	071b      	lsls	r3, r3, #28
 800b166:	d501      	bpl.n	800b16c <_vfiprintf_r+0x3c>
 800b168:	692b      	ldr	r3, [r5, #16]
 800b16a:	b9eb      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x78>
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f000 f960 	bl	800b434 <__swsetup_r>
 800b174:	b1c0      	cbz	r0, 800b1a8 <_vfiprintf_r+0x78>
 800b176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b178:	07dc      	lsls	r4, r3, #31
 800b17a:	d50e      	bpl.n	800b19a <_vfiprintf_r+0x6a>
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	b01d      	add	sp, #116	; 0x74
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	4b7b      	ldr	r3, [pc, #492]	; (800b374 <_vfiprintf_r+0x244>)
 800b188:	429d      	cmp	r5, r3
 800b18a:	d101      	bne.n	800b190 <_vfiprintf_r+0x60>
 800b18c:	68b5      	ldr	r5, [r6, #8]
 800b18e:	e7df      	b.n	800b150 <_vfiprintf_r+0x20>
 800b190:	4b79      	ldr	r3, [pc, #484]	; (800b378 <_vfiprintf_r+0x248>)
 800b192:	429d      	cmp	r5, r3
 800b194:	bf08      	it	eq
 800b196:	68f5      	ldreq	r5, [r6, #12]
 800b198:	e7da      	b.n	800b150 <_vfiprintf_r+0x20>
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	0598      	lsls	r0, r3, #22
 800b19e:	d4ed      	bmi.n	800b17c <_vfiprintf_r+0x4c>
 800b1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a2:	f7ff ff4e 	bl	800b042 <__retarget_lock_release_recursive>
 800b1a6:	e7e9      	b.n	800b17c <_vfiprintf_r+0x4c>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b6:	2330      	movs	r3, #48	; 0x30
 800b1b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b37c <_vfiprintf_r+0x24c>
 800b1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c0:	f04f 0901 	mov.w	r9, #1
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	469a      	mov	sl, r3
 800b1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1cc:	b10a      	cbz	r2, 800b1d2 <_vfiprintf_r+0xa2>
 800b1ce:	2a25      	cmp	r2, #37	; 0x25
 800b1d0:	d1f9      	bne.n	800b1c6 <_vfiprintf_r+0x96>
 800b1d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d6:	d00b      	beq.n	800b1f0 <_vfiprintf_r+0xc0>
 800b1d8:	465b      	mov	r3, fp
 800b1da:	4622      	mov	r2, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ff93 	bl	800b10a <__sfputs_r>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	f000 80aa 	beq.w	800b33e <_vfiprintf_r+0x20e>
 800b1ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ec:	445a      	add	r2, fp
 800b1ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 80a2 	beq.w	800b33e <_vfiprintf_r+0x20e>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b204:	f10a 0a01 	add.w	sl, sl, #1
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	9307      	str	r3, [sp, #28]
 800b20c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b210:	931a      	str	r3, [sp, #104]	; 0x68
 800b212:	4654      	mov	r4, sl
 800b214:	2205      	movs	r2, #5
 800b216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21a:	4858      	ldr	r0, [pc, #352]	; (800b37c <_vfiprintf_r+0x24c>)
 800b21c:	f7f5 f828 	bl	8000270 <memchr>
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	b9d8      	cbnz	r0, 800b25c <_vfiprintf_r+0x12c>
 800b224:	06d1      	lsls	r1, r2, #27
 800b226:	bf44      	itt	mi
 800b228:	2320      	movmi	r3, #32
 800b22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b22e:	0713      	lsls	r3, r2, #28
 800b230:	bf44      	itt	mi
 800b232:	232b      	movmi	r3, #43	; 0x2b
 800b234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b238:	f89a 3000 	ldrb.w	r3, [sl]
 800b23c:	2b2a      	cmp	r3, #42	; 0x2a
 800b23e:	d015      	beq.n	800b26c <_vfiprintf_r+0x13c>
 800b240:	9a07      	ldr	r2, [sp, #28]
 800b242:	4654      	mov	r4, sl
 800b244:	2000      	movs	r0, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4621      	mov	r1, r4
 800b24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b250:	3b30      	subs	r3, #48	; 0x30
 800b252:	2b09      	cmp	r3, #9
 800b254:	d94e      	bls.n	800b2f4 <_vfiprintf_r+0x1c4>
 800b256:	b1b0      	cbz	r0, 800b286 <_vfiprintf_r+0x156>
 800b258:	9207      	str	r2, [sp, #28]
 800b25a:	e014      	b.n	800b286 <_vfiprintf_r+0x156>
 800b25c:	eba0 0308 	sub.w	r3, r0, r8
 800b260:	fa09 f303 	lsl.w	r3, r9, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	9304      	str	r3, [sp, #16]
 800b268:	46a2      	mov	sl, r4
 800b26a:	e7d2      	b.n	800b212 <_vfiprintf_r+0xe2>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	1d19      	adds	r1, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	9103      	str	r1, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfbb      	ittet	lt
 800b278:	425b      	neglt	r3, r3
 800b27a:	f042 0202 	orrlt.w	r2, r2, #2
 800b27e:	9307      	strge	r3, [sp, #28]
 800b280:	9307      	strlt	r3, [sp, #28]
 800b282:	bfb8      	it	lt
 800b284:	9204      	strlt	r2, [sp, #16]
 800b286:	7823      	ldrb	r3, [r4, #0]
 800b288:	2b2e      	cmp	r3, #46	; 0x2e
 800b28a:	d10c      	bne.n	800b2a6 <_vfiprintf_r+0x176>
 800b28c:	7863      	ldrb	r3, [r4, #1]
 800b28e:	2b2a      	cmp	r3, #42	; 0x2a
 800b290:	d135      	bne.n	800b2fe <_vfiprintf_r+0x1ce>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	1d1a      	adds	r2, r3, #4
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	9203      	str	r2, [sp, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bfb8      	it	lt
 800b29e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a2:	3402      	adds	r4, #2
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b38c <_vfiprintf_r+0x25c>
 800b2aa:	7821      	ldrb	r1, [r4, #0]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	f7f4 ffde 	bl	8000270 <memchr>
 800b2b4:	b140      	cbz	r0, 800b2c8 <_vfiprintf_r+0x198>
 800b2b6:	2340      	movs	r3, #64	; 0x40
 800b2b8:	eba0 000a 	sub.w	r0, r0, sl
 800b2bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	4303      	orrs	r3, r0
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	9304      	str	r3, [sp, #16]
 800b2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2cc:	482c      	ldr	r0, [pc, #176]	; (800b380 <_vfiprintf_r+0x250>)
 800b2ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d2:	2206      	movs	r2, #6
 800b2d4:	f7f4 ffcc 	bl	8000270 <memchr>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d03f      	beq.n	800b35c <_vfiprintf_r+0x22c>
 800b2dc:	4b29      	ldr	r3, [pc, #164]	; (800b384 <_vfiprintf_r+0x254>)
 800b2de:	bb1b      	cbnz	r3, 800b328 <_vfiprintf_r+0x1f8>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	3307      	adds	r3, #7
 800b2e4:	f023 0307 	bic.w	r3, r3, #7
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	443b      	add	r3, r7
 800b2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f2:	e767      	b.n	800b1c4 <_vfiprintf_r+0x94>
 800b2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	e7a5      	b.n	800b24a <_vfiprintf_r+0x11a>
 800b2fe:	2300      	movs	r3, #0
 800b300:	3401      	adds	r4, #1
 800b302:	9305      	str	r3, [sp, #20]
 800b304:	4619      	mov	r1, r3
 800b306:	f04f 0c0a 	mov.w	ip, #10
 800b30a:	4620      	mov	r0, r4
 800b30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b310:	3a30      	subs	r2, #48	; 0x30
 800b312:	2a09      	cmp	r2, #9
 800b314:	d903      	bls.n	800b31e <_vfiprintf_r+0x1ee>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0c5      	beq.n	800b2a6 <_vfiprintf_r+0x176>
 800b31a:	9105      	str	r1, [sp, #20]
 800b31c:	e7c3      	b.n	800b2a6 <_vfiprintf_r+0x176>
 800b31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b322:	4604      	mov	r4, r0
 800b324:	2301      	movs	r3, #1
 800b326:	e7f0      	b.n	800b30a <_vfiprintf_r+0x1da>
 800b328:	ab03      	add	r3, sp, #12
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	462a      	mov	r2, r5
 800b32e:	4b16      	ldr	r3, [pc, #88]	; (800b388 <_vfiprintf_r+0x258>)
 800b330:	a904      	add	r1, sp, #16
 800b332:	4630      	mov	r0, r6
 800b334:	f7fb faac 	bl	8006890 <_printf_float>
 800b338:	4607      	mov	r7, r0
 800b33a:	1c78      	adds	r0, r7, #1
 800b33c:	d1d6      	bne.n	800b2ec <_vfiprintf_r+0x1bc>
 800b33e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b340:	07d9      	lsls	r1, r3, #31
 800b342:	d405      	bmi.n	800b350 <_vfiprintf_r+0x220>
 800b344:	89ab      	ldrh	r3, [r5, #12]
 800b346:	059a      	lsls	r2, r3, #22
 800b348:	d402      	bmi.n	800b350 <_vfiprintf_r+0x220>
 800b34a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b34c:	f7ff fe79 	bl	800b042 <__retarget_lock_release_recursive>
 800b350:	89ab      	ldrh	r3, [r5, #12]
 800b352:	065b      	lsls	r3, r3, #25
 800b354:	f53f af12 	bmi.w	800b17c <_vfiprintf_r+0x4c>
 800b358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b35a:	e711      	b.n	800b180 <_vfiprintf_r+0x50>
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	462a      	mov	r2, r5
 800b362:	4b09      	ldr	r3, [pc, #36]	; (800b388 <_vfiprintf_r+0x258>)
 800b364:	a904      	add	r1, sp, #16
 800b366:	4630      	mov	r0, r6
 800b368:	f7fb fd1e 	bl	8006da8 <_printf_i>
 800b36c:	e7e4      	b.n	800b338 <_vfiprintf_r+0x208>
 800b36e:	bf00      	nop
 800b370:	0800bed4 	.word	0x0800bed4
 800b374:	0800bef4 	.word	0x0800bef4
 800b378:	0800beb4 	.word	0x0800beb4
 800b37c:	0800be4c 	.word	0x0800be4c
 800b380:	0800be56 	.word	0x0800be56
 800b384:	08006891 	.word	0x08006891
 800b388:	0800b10b 	.word	0x0800b10b
 800b38c:	0800be52 	.word	0x0800be52

0800b390 <__swbuf_r>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	460e      	mov	r6, r1
 800b394:	4614      	mov	r4, r2
 800b396:	4605      	mov	r5, r0
 800b398:	b118      	cbz	r0, 800b3a2 <__swbuf_r+0x12>
 800b39a:	6983      	ldr	r3, [r0, #24]
 800b39c:	b90b      	cbnz	r3, 800b3a2 <__swbuf_r+0x12>
 800b39e:	f7ff fd9f 	bl	800aee0 <__sinit>
 800b3a2:	4b21      	ldr	r3, [pc, #132]	; (800b428 <__swbuf_r+0x98>)
 800b3a4:	429c      	cmp	r4, r3
 800b3a6:	d12b      	bne.n	800b400 <__swbuf_r+0x70>
 800b3a8:	686c      	ldr	r4, [r5, #4]
 800b3aa:	69a3      	ldr	r3, [r4, #24]
 800b3ac:	60a3      	str	r3, [r4, #8]
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	071a      	lsls	r2, r3, #28
 800b3b2:	d52f      	bpl.n	800b414 <__swbuf_r+0x84>
 800b3b4:	6923      	ldr	r3, [r4, #16]
 800b3b6:	b36b      	cbz	r3, 800b414 <__swbuf_r+0x84>
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	1ac0      	subs	r0, r0, r3
 800b3be:	6963      	ldr	r3, [r4, #20]
 800b3c0:	b2f6      	uxtb	r6, r6
 800b3c2:	4283      	cmp	r3, r0
 800b3c4:	4637      	mov	r7, r6
 800b3c6:	dc04      	bgt.n	800b3d2 <__swbuf_r+0x42>
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f7ff fcf4 	bl	800adb8 <_fflush_r>
 800b3d0:	bb30      	cbnz	r0, 800b420 <__swbuf_r+0x90>
 800b3d2:	68a3      	ldr	r3, [r4, #8]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	60a3      	str	r3, [r4, #8]
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	6022      	str	r2, [r4, #0]
 800b3de:	701e      	strb	r6, [r3, #0]
 800b3e0:	6963      	ldr	r3, [r4, #20]
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	4283      	cmp	r3, r0
 800b3e6:	d004      	beq.n	800b3f2 <__swbuf_r+0x62>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d506      	bpl.n	800b3fc <__swbuf_r+0x6c>
 800b3ee:	2e0a      	cmp	r6, #10
 800b3f0:	d104      	bne.n	800b3fc <__swbuf_r+0x6c>
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f7ff fcdf 	bl	800adb8 <_fflush_r>
 800b3fa:	b988      	cbnz	r0, 800b420 <__swbuf_r+0x90>
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b400:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <__swbuf_r+0x9c>)
 800b402:	429c      	cmp	r4, r3
 800b404:	d101      	bne.n	800b40a <__swbuf_r+0x7a>
 800b406:	68ac      	ldr	r4, [r5, #8]
 800b408:	e7cf      	b.n	800b3aa <__swbuf_r+0x1a>
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <__swbuf_r+0xa0>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	bf08      	it	eq
 800b410:	68ec      	ldreq	r4, [r5, #12]
 800b412:	e7ca      	b.n	800b3aa <__swbuf_r+0x1a>
 800b414:	4621      	mov	r1, r4
 800b416:	4628      	mov	r0, r5
 800b418:	f000 f80c 	bl	800b434 <__swsetup_r>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d0cb      	beq.n	800b3b8 <__swbuf_r+0x28>
 800b420:	f04f 37ff 	mov.w	r7, #4294967295
 800b424:	e7ea      	b.n	800b3fc <__swbuf_r+0x6c>
 800b426:	bf00      	nop
 800b428:	0800bed4 	.word	0x0800bed4
 800b42c:	0800bef4 	.word	0x0800bef4
 800b430:	0800beb4 	.word	0x0800beb4

0800b434 <__swsetup_r>:
 800b434:	4b32      	ldr	r3, [pc, #200]	; (800b500 <__swsetup_r+0xcc>)
 800b436:	b570      	push	{r4, r5, r6, lr}
 800b438:	681d      	ldr	r5, [r3, #0]
 800b43a:	4606      	mov	r6, r0
 800b43c:	460c      	mov	r4, r1
 800b43e:	b125      	cbz	r5, 800b44a <__swsetup_r+0x16>
 800b440:	69ab      	ldr	r3, [r5, #24]
 800b442:	b913      	cbnz	r3, 800b44a <__swsetup_r+0x16>
 800b444:	4628      	mov	r0, r5
 800b446:	f7ff fd4b 	bl	800aee0 <__sinit>
 800b44a:	4b2e      	ldr	r3, [pc, #184]	; (800b504 <__swsetup_r+0xd0>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	d10f      	bne.n	800b470 <__swsetup_r+0x3c>
 800b450:	686c      	ldr	r4, [r5, #4]
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b458:	0719      	lsls	r1, r3, #28
 800b45a:	d42c      	bmi.n	800b4b6 <__swsetup_r+0x82>
 800b45c:	06dd      	lsls	r5, r3, #27
 800b45e:	d411      	bmi.n	800b484 <__swsetup_r+0x50>
 800b460:	2309      	movs	r3, #9
 800b462:	6033      	str	r3, [r6, #0]
 800b464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b468:	81a3      	strh	r3, [r4, #12]
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	e03e      	b.n	800b4ee <__swsetup_r+0xba>
 800b470:	4b25      	ldr	r3, [pc, #148]	; (800b508 <__swsetup_r+0xd4>)
 800b472:	429c      	cmp	r4, r3
 800b474:	d101      	bne.n	800b47a <__swsetup_r+0x46>
 800b476:	68ac      	ldr	r4, [r5, #8]
 800b478:	e7eb      	b.n	800b452 <__swsetup_r+0x1e>
 800b47a:	4b24      	ldr	r3, [pc, #144]	; (800b50c <__swsetup_r+0xd8>)
 800b47c:	429c      	cmp	r4, r3
 800b47e:	bf08      	it	eq
 800b480:	68ec      	ldreq	r4, [r5, #12]
 800b482:	e7e6      	b.n	800b452 <__swsetup_r+0x1e>
 800b484:	0758      	lsls	r0, r3, #29
 800b486:	d512      	bpl.n	800b4ae <__swsetup_r+0x7a>
 800b488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b48a:	b141      	cbz	r1, 800b49e <__swsetup_r+0x6a>
 800b48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b490:	4299      	cmp	r1, r3
 800b492:	d002      	beq.n	800b49a <__swsetup_r+0x66>
 800b494:	4630      	mov	r0, r6
 800b496:	f7fe fd9b 	bl	8009fd0 <_free_r>
 800b49a:	2300      	movs	r3, #0
 800b49c:	6363      	str	r3, [r4, #52]	; 0x34
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4a4:	81a3      	strh	r3, [r4, #12]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f043 0308 	orr.w	r3, r3, #8
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	b94b      	cbnz	r3, 800b4ce <__swsetup_r+0x9a>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4c4:	d003      	beq.n	800b4ce <__swsetup_r+0x9a>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f000 f84d 	bl	800b568 <__smakebuf_r>
 800b4ce:	89a0      	ldrh	r0, [r4, #12]
 800b4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4d4:	f010 0301 	ands.w	r3, r0, #1
 800b4d8:	d00a      	beq.n	800b4f0 <__swsetup_r+0xbc>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60a3      	str	r3, [r4, #8]
 800b4de:	6963      	ldr	r3, [r4, #20]
 800b4e0:	425b      	negs	r3, r3
 800b4e2:	61a3      	str	r3, [r4, #24]
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	b943      	cbnz	r3, 800b4fa <__swsetup_r+0xc6>
 800b4e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4ec:	d1ba      	bne.n	800b464 <__swsetup_r+0x30>
 800b4ee:	bd70      	pop	{r4, r5, r6, pc}
 800b4f0:	0781      	lsls	r1, r0, #30
 800b4f2:	bf58      	it	pl
 800b4f4:	6963      	ldrpl	r3, [r4, #20]
 800b4f6:	60a3      	str	r3, [r4, #8]
 800b4f8:	e7f4      	b.n	800b4e4 <__swsetup_r+0xb0>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	e7f7      	b.n	800b4ee <__swsetup_r+0xba>
 800b4fe:	bf00      	nop
 800b500:	200000a8 	.word	0x200000a8
 800b504:	0800bed4 	.word	0x0800bed4
 800b508:	0800bef4 	.word	0x0800bef4
 800b50c:	0800beb4 	.word	0x0800beb4

0800b510 <abort>:
 800b510:	b508      	push	{r3, lr}
 800b512:	2006      	movs	r0, #6
 800b514:	f000 f898 	bl	800b648 <raise>
 800b518:	2001      	movs	r0, #1
 800b51a:	f7f6 f931 	bl	8001780 <_exit>

0800b51e <__swhatbuf_r>:
 800b51e:	b570      	push	{r4, r5, r6, lr}
 800b520:	460e      	mov	r6, r1
 800b522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b526:	2900      	cmp	r1, #0
 800b528:	b096      	sub	sp, #88	; 0x58
 800b52a:	4614      	mov	r4, r2
 800b52c:	461d      	mov	r5, r3
 800b52e:	da07      	bge.n	800b540 <__swhatbuf_r+0x22>
 800b530:	2300      	movs	r3, #0
 800b532:	602b      	str	r3, [r5, #0]
 800b534:	89b3      	ldrh	r3, [r6, #12]
 800b536:	061a      	lsls	r2, r3, #24
 800b538:	d410      	bmi.n	800b55c <__swhatbuf_r+0x3e>
 800b53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b53e:	e00e      	b.n	800b55e <__swhatbuf_r+0x40>
 800b540:	466a      	mov	r2, sp
 800b542:	f000 f89d 	bl	800b680 <_fstat_r>
 800b546:	2800      	cmp	r0, #0
 800b548:	dbf2      	blt.n	800b530 <__swhatbuf_r+0x12>
 800b54a:	9a01      	ldr	r2, [sp, #4]
 800b54c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b554:	425a      	negs	r2, r3
 800b556:	415a      	adcs	r2, r3
 800b558:	602a      	str	r2, [r5, #0]
 800b55a:	e7ee      	b.n	800b53a <__swhatbuf_r+0x1c>
 800b55c:	2340      	movs	r3, #64	; 0x40
 800b55e:	2000      	movs	r0, #0
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	b016      	add	sp, #88	; 0x58
 800b564:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b568 <__smakebuf_r>:
 800b568:	898b      	ldrh	r3, [r1, #12]
 800b56a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b56c:	079d      	lsls	r5, r3, #30
 800b56e:	4606      	mov	r6, r0
 800b570:	460c      	mov	r4, r1
 800b572:	d507      	bpl.n	800b584 <__smakebuf_r+0x1c>
 800b574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	2301      	movs	r3, #1
 800b57e:	6163      	str	r3, [r4, #20]
 800b580:	b002      	add	sp, #8
 800b582:	bd70      	pop	{r4, r5, r6, pc}
 800b584:	ab01      	add	r3, sp, #4
 800b586:	466a      	mov	r2, sp
 800b588:	f7ff ffc9 	bl	800b51e <__swhatbuf_r>
 800b58c:	9900      	ldr	r1, [sp, #0]
 800b58e:	4605      	mov	r5, r0
 800b590:	4630      	mov	r0, r6
 800b592:	f7fe fd6d 	bl	800a070 <_malloc_r>
 800b596:	b948      	cbnz	r0, 800b5ac <__smakebuf_r+0x44>
 800b598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b59c:	059a      	lsls	r2, r3, #22
 800b59e:	d4ef      	bmi.n	800b580 <__smakebuf_r+0x18>
 800b5a0:	f023 0303 	bic.w	r3, r3, #3
 800b5a4:	f043 0302 	orr.w	r3, r3, #2
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	e7e3      	b.n	800b574 <__smakebuf_r+0xc>
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	; (800b5e4 <__smakebuf_r+0x7c>)
 800b5ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	6020      	str	r0, [r4, #0]
 800b5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	9b00      	ldr	r3, [sp, #0]
 800b5bc:	6163      	str	r3, [r4, #20]
 800b5be:	9b01      	ldr	r3, [sp, #4]
 800b5c0:	6120      	str	r0, [r4, #16]
 800b5c2:	b15b      	cbz	r3, 800b5dc <__smakebuf_r+0x74>
 800b5c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f000 f86b 	bl	800b6a4 <_isatty_r>
 800b5ce:	b128      	cbz	r0, 800b5dc <__smakebuf_r+0x74>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	f023 0303 	bic.w	r3, r3, #3
 800b5d6:	f043 0301 	orr.w	r3, r3, #1
 800b5da:	81a3      	strh	r3, [r4, #12]
 800b5dc:	89a0      	ldrh	r0, [r4, #12]
 800b5de:	4305      	orrs	r5, r0
 800b5e0:	81a5      	strh	r5, [r4, #12]
 800b5e2:	e7cd      	b.n	800b580 <__smakebuf_r+0x18>
 800b5e4:	0800ae79 	.word	0x0800ae79

0800b5e8 <_malloc_usable_size_r>:
 800b5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ec:	1f18      	subs	r0, r3, #4
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bfbc      	itt	lt
 800b5f2:	580b      	ldrlt	r3, [r1, r0]
 800b5f4:	18c0      	addlt	r0, r0, r3
 800b5f6:	4770      	bx	lr

0800b5f8 <_raise_r>:
 800b5f8:	291f      	cmp	r1, #31
 800b5fa:	b538      	push	{r3, r4, r5, lr}
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	460d      	mov	r5, r1
 800b600:	d904      	bls.n	800b60c <_raise_r+0x14>
 800b602:	2316      	movs	r3, #22
 800b604:	6003      	str	r3, [r0, #0]
 800b606:	f04f 30ff 	mov.w	r0, #4294967295
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b60e:	b112      	cbz	r2, 800b616 <_raise_r+0x1e>
 800b610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b614:	b94b      	cbnz	r3, 800b62a <_raise_r+0x32>
 800b616:	4620      	mov	r0, r4
 800b618:	f000 f830 	bl	800b67c <_getpid_r>
 800b61c:	462a      	mov	r2, r5
 800b61e:	4601      	mov	r1, r0
 800b620:	4620      	mov	r0, r4
 800b622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b626:	f000 b817 	b.w	800b658 <_kill_r>
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d00a      	beq.n	800b644 <_raise_r+0x4c>
 800b62e:	1c59      	adds	r1, r3, #1
 800b630:	d103      	bne.n	800b63a <_raise_r+0x42>
 800b632:	2316      	movs	r3, #22
 800b634:	6003      	str	r3, [r0, #0]
 800b636:	2001      	movs	r0, #1
 800b638:	e7e7      	b.n	800b60a <_raise_r+0x12>
 800b63a:	2400      	movs	r4, #0
 800b63c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b640:	4628      	mov	r0, r5
 800b642:	4798      	blx	r3
 800b644:	2000      	movs	r0, #0
 800b646:	e7e0      	b.n	800b60a <_raise_r+0x12>

0800b648 <raise>:
 800b648:	4b02      	ldr	r3, [pc, #8]	; (800b654 <raise+0xc>)
 800b64a:	4601      	mov	r1, r0
 800b64c:	6818      	ldr	r0, [r3, #0]
 800b64e:	f7ff bfd3 	b.w	800b5f8 <_raise_r>
 800b652:	bf00      	nop
 800b654:	200000a8 	.word	0x200000a8

0800b658 <_kill_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d07      	ldr	r5, [pc, #28]	; (800b678 <_kill_r+0x20>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	4611      	mov	r1, r2
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	f7f6 f87b 	bl	8001760 <_kill>
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	d102      	bne.n	800b674 <_kill_r+0x1c>
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	b103      	cbz	r3, 800b674 <_kill_r+0x1c>
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	bd38      	pop	{r3, r4, r5, pc}
 800b676:	bf00      	nop
 800b678:	20000618 	.word	0x20000618

0800b67c <_getpid_r>:
 800b67c:	f7f6 b868 	b.w	8001750 <_getpid>

0800b680 <_fstat_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d07      	ldr	r5, [pc, #28]	; (800b6a0 <_fstat_r+0x20>)
 800b684:	2300      	movs	r3, #0
 800b686:	4604      	mov	r4, r0
 800b688:	4608      	mov	r0, r1
 800b68a:	4611      	mov	r1, r2
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	f7f6 f8c6 	bl	800181e <_fstat>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d102      	bne.n	800b69c <_fstat_r+0x1c>
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	b103      	cbz	r3, 800b69c <_fstat_r+0x1c>
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
 800b69e:	bf00      	nop
 800b6a0:	20000618 	.word	0x20000618

0800b6a4 <_isatty_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	4d06      	ldr	r5, [pc, #24]	; (800b6c0 <_isatty_r+0x1c>)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	f7f6 f8c5 	bl	800183e <_isatty>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d102      	bne.n	800b6be <_isatty_r+0x1a>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	b103      	cbz	r3, 800b6be <_isatty_r+0x1a>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	20000618 	.word	0x20000618

0800b6c4 <_init>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	bf00      	nop
 800b6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ca:	bc08      	pop	{r3}
 800b6cc:	469e      	mov	lr, r3
 800b6ce:	4770      	bx	lr

0800b6d0 <_fini>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr

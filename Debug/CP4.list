
CP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f84  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f0  080041f0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041f8  080041f8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08004200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000003c  0800423c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  0800423c  00020340  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132c1  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b7  00000000  00000000  0003332b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000356e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cf3  00000000  00000000  00037180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001169f  00000000  00000000  0005fe73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb606  00000000  00000000  00071512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cb18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  0016cb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000003c 	.word	0x2000003c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004164 	.word	0x08004164

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000040 	.word	0x20000040
 8000234:	08004164 	.word	0x08004164

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <check_command>:
bool mode_speed = false, enable = false, direction = false;
unsigned int duty_cycle = 0, mul_pwm = 1;
float speed_rpm = 0;

unsigned char check_command(char* message)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "STW", 3)))
 800054c:	2203      	movs	r2, #3
 800054e:	493e      	ldr	r1, [pc, #248]	; (8000648 <check_command+0x108>)
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f003 fde1 	bl	8004118 <strncmp>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <check_command+0x22>
		cmd = STW;
 800055c:	230a      	movs	r3, #10
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e06d      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "FSW", 3)))
 8000562:	2203      	movs	r2, #3
 8000564:	4939      	ldr	r1, [pc, #228]	; (800064c <check_command+0x10c>)
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f003 fdd6 	bl	8004118 <strncmp>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d102      	bne.n	8000578 <check_command+0x38>
		cmd = FSW;
 8000572:	2308      	movs	r3, #8
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e062      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "KP", 2)))
 8000578:	2202      	movs	r2, #2
 800057a:	4935      	ldr	r1, [pc, #212]	; (8000650 <check_command+0x110>)
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f003 fdcb 	bl	8004118 <strncmp>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d102      	bne.n	800058e <check_command+0x4e>
        cmd = KP;
 8000588:	230b      	movs	r3, #11
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e057      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "UN", 2)))
 800058e:	2202      	movs	r2, #2
 8000590:	4930      	ldr	r1, [pc, #192]	; (8000654 <check_command+0x114>)
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f003 fdc0 	bl	8004118 <strncmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d102      	bne.n	80005a4 <check_command+0x64>
        cmd = UN;
 800059e:	2303      	movs	r3, #3
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	e04c      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "EN", 2)))
 80005a4:	2202      	movs	r2, #2
 80005a6:	492c      	ldr	r1, [pc, #176]	; (8000658 <check_command+0x118>)
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 fdb5 	bl	8004118 <strncmp>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <check_command+0x7a>
        cmd = EN;
 80005b4:	2302      	movs	r3, #2
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e041      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "CS", 2)))
 80005ba:	2202      	movs	r2, #2
 80005bc:	4927      	ldr	r1, [pc, #156]	; (800065c <check_command+0x11c>)
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f003 fdaa 	bl	8004118 <strncmp>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d102      	bne.n	80005d0 <check_command+0x90>
        cmd = CS;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e036      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "VR", 2)))
 80005d0:	2202      	movs	r2, #2
 80005d2:	4923      	ldr	r1, [pc, #140]	; (8000660 <check_command+0x120>)
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f003 fd9f 	bl	8004118 <strncmp>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <check_command+0xa6>
        cmd = VR;
 80005e0:	2304      	movs	r3, #4
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e02b      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "HW", 2)))
 80005e6:	2202      	movs	r2, #2
 80005e8:	491e      	ldr	r1, [pc, #120]	; (8000664 <check_command+0x124>)
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f003 fd94 	bl	8004118 <strncmp>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d102      	bne.n	80005fc <check_command+0xbc>
		cmd = HW;
 80005f6:	2307      	movs	r3, #7
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e020      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "SW", 2)))
 80005fc:	2202      	movs	r2, #2
 80005fe:	491a      	ldr	r1, [pc, #104]	; (8000668 <check_command+0x128>)
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f003 fd89 	bl	8004118 <strncmp>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <check_command+0xd2>
		cmd = SW;
 800060c:	2309      	movs	r3, #9
 800060e:	73fb      	strb	r3, [r7, #15]
 8000610:	e015      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "/", 1)))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <check_command+0x12c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <check_command+0xe6>
		cmd = INC;
 8000620:	2305      	movs	r3, #5
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e00b      	b.n	800063e <check_command+0xfe>
    else if((!strncmp((char*) message, "\\", 1)))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <check_command+0x130>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <check_command+0xfa>
		cmd = DEC;
 8000634:	2306      	movs	r3, #6
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e001      	b.n	800063e <check_command+0xfe>
    else
    	cmd = INV;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]

    return cmd;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	0800417c 	.word	0x0800417c
 800064c:	08004180 	.word	0x08004180
 8000650:	08004184 	.word	0x08004184
 8000654:	08004188 	.word	0x08004188
 8000658:	0800418c 	.word	0x0800418c
 800065c:	08004190 	.word	0x08004190
 8000660:	08004194 	.word	0x08004194
 8000664:	08004198 	.word	0x08004198
 8000668:	0800419c 	.word	0x0800419c
 800066c:	080041a0 	.word	0x080041a0
 8000670:	080041a4 	.word	0x080041a4

08000674 <proc_inv_cmd>:
		proc_stw_cmd,
		proc_kp_cmd
};

void proc_inv_cmd(char* message)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <proc_inv_cmd+0x18>)
 800067e:	f000 fb35 	bl	8000cec <send_UART>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	080041a8 	.word	0x080041a8

08000690 <proc_cs_cmd>:

void proc_cs_cmd(char* message)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Control System instruction argument values.");
	}
	else
		send_UART("Invalid Control System instruction syntax.");
	*/
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Enable instruction argument values.");
	}
	else
		send_UART("Invalid Enable instruction syntax.");
	*/
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <proc_un_cmd>:


void proc_un_cmd(char* message)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	}
	else
		send_UART("Invalid Normalized Voltage instruction syntax.");

	*/
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <proc_vr_cmd>:


void proc_vr_cmd(char* message)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Reference Speed instruction argument values.");
	}
	else
		send_UART("Invalid Reference Speed instruction syntax.");
	*/
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <proc_inc_cmd>:

void proc_inc_cmd(char* message)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
	}

	send_UART(message);
	*/
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
	}

	send_UART(message);
	*/
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <proc_hw_cmd>:

void proc_hw_cmd(char* message)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
	*/
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <proc_fsw_cmd>:

void proc_fsw_cmd(char* message)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
				send_UART("Invalid FSW instruction argument values.");
		}
		else
			send_UART("Invalid FSW instruction syntax.");
	*/
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <proc_sw_cmd>:

void proc_sw_cmd(char* message)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
	else
		send_UART("Invalid Sample instruction syntax.");
	*/
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <proc_stw_cmd>:

void proc_stw_cmd(char* message)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
		send_UART("Sampling Stopped.");
	}
	else
		send_UART("Invalid Stop Sampling instruction syntax.");
	*/
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <proc_kp_cmd>:

void proc_kp_cmd(char* message)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
			send_UART("Invalid Gain.");
	}
	else
		send_UART("Invalid KP instruction syntax.");
	*/
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_GPIO_Init+0x58>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_GPIO_Init+0x58>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_GPIO_Init+0x58>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2101      	movs	r1, #1
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <MX_GPIO_Init+0x5c>)
 800079e:	f000 fe8d 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0x5c>)
 80007b8:	f000 fcd4 	bl	8001164 <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0c2      	sub	sp, #264	; 0x108
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fb58 	bl	8000e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f833 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 80007da:	f000 f90f 	bl	80009fc <MX_TIM3_Init>
  MX_GPIO_Init();
 80007de:	f7ff ffc5 	bl	800076c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007e2:	f000 f9a9 	bl	8000b38 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80007e6:	4813      	ldr	r0, [pc, #76]	; (8000834 <main+0x68>)
 80007e8:	f001 fff0 	bl	80027cc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(has_message_from_UART())
 80007ec:	f000 fa4e 	bl	8000c8c <has_message_from_UART>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0fa      	beq.n	80007ec <main+0x20>
	  {
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 faa1 	bl	8000d40 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe9d 	bl	8000540 <check_command>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 800080c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000810:	4a09      	ldr	r2, [pc, #36]	; (8000838 <main+0x6c>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	4610      	mov	r0, r2
 800081a:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 800081c:	bf00      	nop
 800081e:	f000 fa41 	bl	8000ca4 <is_transmitting_to_UART>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1fa      	bne.n	800081e <main+0x52>

		  reset_UART();
 8000828:	f000 fa48 	bl	8000cbc <reset_UART>
		  send_UART(PROMPT);
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <main+0x70>)
 800082e:	f000 fa5d 	bl	8000cec <send_UART>
	  if(has_message_from_UART())
 8000832:	e7db      	b.n	80007ec <main+0x20>
 8000834:	2000026c 	.word	0x2000026c
 8000838:	20000000 	.word	0x20000000
 800083c:	080041d0 	.word	0x080041d0

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2234      	movs	r2, #52	; 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fc5a 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <SystemClock_Config+0xd4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <SystemClock_Config+0xd4>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <SystemClock_Config+0xd4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <SystemClock_Config+0xd8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a25      	ldr	r2, [pc, #148]	; (8000918 <SystemClock_Config+0xd8>)
 8000882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <SystemClock_Config+0xd8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089c:	2310      	movs	r3, #16
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a8:	2308      	movs	r3, #8
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008ac:	23c0      	movs	r3, #192	; 0xc0
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fe7f 	bl	80015c4 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008cc:	f000 f826 	bl	800091c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d0:	f000 fe28 	bl	8001524 <HAL_PWREx_EnableOverDrive>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008da:	f000 f81f 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2302      	movs	r3, #2
 80008e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2106      	movs	r1, #6
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f90f 	bl	8001b20 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000908:	f000 f808 	bl	800091c <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	; 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 faa0 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM3_IRQHandler+0x10>)
 80009ca:	f001 ff77 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000026c 	.word	0x2000026c

080009d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <MX_TIM3_Init+0x98>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a22:	225f      	movs	r2, #95	; 0x5f
 8000a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a42:	f001 fe6b 	bl	800271c <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a4c:	f7ff ff66 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a5e:	f002 f84d 	bl	8002afc <HAL_TIM_ConfigClockSource>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a68:	f7ff ff58 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a7a:	f002 fa6b 	bl	8002f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f7ff ff4a 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000026c 	.word	0x2000026c
 8000a94:	40000400 	.word	0x40000400

08000a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_TIM_Base_MspInit+0x44>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d113      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_TIM_Base_MspInit+0x48>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <HAL_TIM_Base_MspInit+0x48>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_TIM_Base_MspInit+0x48>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	201d      	movs	r0, #29
 8000ac8:	f000 fb15 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000acc:	201d      	movs	r0, #29
 8000ace:	f000 fb2e 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40000400 	.word	0x40000400
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d115      	bne.n	8000b20 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		static int i = 0;

		if(!(i++ % 1000))
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	490c      	ldr	r1, [pc, #48]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000afc:	600a      	str	r2, [r1, #0]
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b00:	fb82 1203 	smull	r1, r2, r2, r3
 8000b04:	1191      	asrs	r1, r2, #6
 8000b06:	17da      	asrs	r2, r3, #31
 8000b08:	1a8a      	subs	r2, r1, r2
 8000b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0e:	fb01 f202 	mul.w	r2, r1, r2
 8000b12:	1a9a      	subs	r2, r3, r2
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d103      	bne.n	8000b20 <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b1c:	f000 fce7 	bl	80014ee <HAL_GPIO_TogglePin>

		// ISR DPI
	}
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000026c 	.word	0x2000026c
 8000b2c:	20000058 	.word	0x20000058
 8000b30:	10624dd3 	.word	0x10624dd3
 8000b34:	40020400 	.word	0x40020400

08000b38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_USART3_UART_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_USART3_UART_Init+0x78>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_USART3_UART_Init+0x7c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_USART3_UART_Init+0x80>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_USART3_UART_Init+0x84>)
 8000b56:	220d      	movs	r2, #13
 8000b58:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <MX_USART3_UART_Init+0x8c>)
 8000b5e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <MX_USART3_UART_Init+0x88>)
 8000b98:	f002 fa88 	bl	80030ac <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f7ff febb 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000160 	.word	0x20000160
 8000bb0:	20000264 	.word	0x20000264
 8000bb4:	2000015c 	.word	0x2000015c
 8000bb8:	20000268 	.word	0x20000268
 8000bbc:	20000164 	.word	0x20000164
 8000bc0:	200002b8 	.word	0x200002b8
 8000bc4:	40004800 	.word	0x40004800
 8000bc8:	001ab3f0 	.word	0x001ab3f0

08000bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b0ae      	sub	sp, #184	; 0xb8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2290      	movs	r2, #144	; 0x90
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fa8b 	bl	8004108 <memset>
  if(uartHandle->Instance==USART3)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <HAL_UART_MspInit+0xb4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d13c      	bne.n	8000c76 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f95e 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c16:	f7ff fe81 	bl	800091c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c64:	2307      	movs	r3, #7
 8000c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c72:	f000 fa77 	bl	8001164 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	37b8      	adds	r7, #184	; 0xb8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40004800 	.word	0x40004800
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400

08000c8c <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	return flagCPP;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <has_message_from_UART+0x14>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000160 	.word	0x20000160

08000ca4 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	return flagCPE;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <is_transmitting_to_UART+0x14>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000264 	.word	0x20000264

08000cbc <reset_UART>:

void reset_UART()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8000cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <reset_UART+0x24>)
 8000cc8:	f003 fa1e 	bl	8004108 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4904      	ldr	r1, [pc, #16]	; (8000ce0 <reset_UART+0x24>)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <reset_UART+0x28>)
 8000cd2:	f002 faa7 	bl	8003224 <HAL_UART_Receive_IT>
	flagCPP = false;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <reset_UART+0x2c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000005c 	.word	0x2000005c
 8000ce4:	200002b8 	.word	0x200002b8
 8000ce8:	20000160 	.word	0x20000160

08000cec <send_UART>:

void send_UART(const char* msg_to_send)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <send_UART+0x44>)
 8000cfc:	f003 fa1e 	bl	800413c <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <send_UART+0x44>)
 8000d02:	f7ff fa99 	bl	8000238 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <send_UART+0x44>)
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4909      	ldr	r1, [pc, #36]	; (8000d34 <send_UART+0x48>)
 8000d10:	461a      	mov	r2, r3
 8000d12:	460b      	mov	r3, r1
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <send_UART+0x4c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4903      	ldr	r1, [pc, #12]	; (8000d30 <send_UART+0x44>)
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <send_UART+0x50>)
 8000d24:	f002 fa10 	bl	8003148 <HAL_UART_Transmit_IT>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000164 	.word	0x20000164
 8000d34:	080041d4 	.word	0x080041d4
 8000d38:	20000264 	.word	0x20000264
 8000d3c:	200002b8 	.word	0x200002b8

08000d40 <read_UART>:

void read_UART(char* msg_to_read)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8000d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4c:	4903      	ldr	r1, [pc, #12]	; (8000d5c <read_UART+0x1c>)
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f003 f9f4 	bl	800413c <strncpy>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000005c 	.word	0x2000005c

08000d60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8000d68:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <HAL_UART_RxCpltCallback+0xc4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d154      	bne.n	8000e1a <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a2d      	ldr	r2, [pc, #180]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	2b0d      	cmp	r3, #13
 8000d7a:	d00b      	beq.n	8000d94 <HAL_UART_RxCpltCallback+0x34>
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	2b5c      	cmp	r3, #92	; 0x5c
 8000d86:	d005      	beq.n	8000d94 <HAL_UART_RxCpltCallback+0x34>
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	2b2f      	cmp	r3, #47	; 0x2f
 8000d92:	d106      	bne.n	8000da2 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <HAL_UART_RxCpltCallback+0xc4>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e03c      	b.n	8000e1c <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d10f      	bne.n	8000dce <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e01c      	b.n	8000dfc <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	e016      	b.n	8000dfc <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	2b1b      	cmp	r3, #27
 8000dd8:	d104      	bne.n	8000de4 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e00b      	b.n	8000dfc <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	2b24      	cmp	r3, #36	; 0x24
 8000dee:	d105      	bne.n	8000dfc <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000df8:	2224      	movs	r2, #36	; 0x24
 8000dfa:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_UART_RxCpltCallback+0xc8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_UART_RxCpltCallback+0xcc>)
 8000e0c:	4413      	add	r3, r2
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <HAL_UART_RxCpltCallback+0xd0>)
 8000e14:	f002 fa06 	bl	8003224 <HAL_UART_Receive_IT>
 8000e18:	e000      	b.n	8000e1c <HAL_UART_RxCpltCallback+0xbc>
		return;
 8000e1a:	bf00      	nop
	}
}
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000160 	.word	0x20000160
 8000e28:	2000015c 	.word	0x2000015c
 8000e2c:	2000005c 	.word	0x2000005c
 8000e30:	200002b8 	.word	0x200002b8

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff fdbb 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f003 f92d 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fcb1 	bl	80007cc <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000e78:	08004200 	.word	0x08004200
  ldr r2, =_sbss
 8000e7c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000e80:	20000340 	.word	0x20000340

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>

08000e86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f000 f928 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e90:	200f      	movs	r0, #15
 8000e92:	f000 f805 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e96:	f7ff fd47 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f943 	bl	800114a <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90b 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	20000038 	.word	0x20000038
 8000efc:	20000034 	.word	0x20000034

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000038 	.word	0x20000038
 8000f24:	2000033c 	.word	0x2000033c

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2000033c 	.word	0x2000033c

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <__NVIC_SetPriorityGrouping+0x40>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x40>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	05fa0000 	.word	0x05fa0000

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e175      	b.n	8001470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8164 	bne.w	800146a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x56>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80be 	beq.w	800146a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b66      	ldr	r3, [pc, #408]	; (8001488 <HAL_GPIO_Init+0x324>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_GPIO_Init+0x324>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_GPIO_Init+0x324>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001306:	4a61      	ldr	r2, [pc, #388]	; (800148c <HAL_GPIO_Init+0x328>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_GPIO_Init+0x32c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d037      	beq.n	80013a2 <HAL_GPIO_Init+0x23e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a57      	ldr	r2, [pc, #348]	; (8001494 <HAL_GPIO_Init+0x330>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d031      	beq.n	800139e <HAL_GPIO_Init+0x23a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a56      	ldr	r2, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x334>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d02b      	beq.n	800139a <HAL_GPIO_Init+0x236>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a55      	ldr	r2, [pc, #340]	; (800149c <HAL_GPIO_Init+0x338>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d025      	beq.n	8001396 <HAL_GPIO_Init+0x232>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a54      	ldr	r2, [pc, #336]	; (80014a0 <HAL_GPIO_Init+0x33c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d01f      	beq.n	8001392 <HAL_GPIO_Init+0x22e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a53      	ldr	r2, [pc, #332]	; (80014a4 <HAL_GPIO_Init+0x340>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x22a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x344>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x348>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x34c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x350>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x21a>
 800137a:	2309      	movs	r3, #9
 800137c:	e012      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800137e:	230a      	movs	r3, #10
 8001380:	e010      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001382:	2308      	movs	r3, #8
 8001384:	e00e      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001386:	2307      	movs	r3, #7
 8001388:	e00c      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800138a:	2306      	movs	r3, #6
 800138c:	e00a      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800138e:	2305      	movs	r3, #5
 8001390:	e008      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001392:	2304      	movs	r3, #4
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001396:	2303      	movs	r3, #3
 8001398:	e004      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800139a:	2302      	movs	r3, #2
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 80013a2:	2300      	movs	r3, #0
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	f002 0203 	and.w	r2, r2, #3
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4093      	lsls	r3, r2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013b4:	4935      	ldr	r1, [pc, #212]	; (800148c <HAL_GPIO_Init+0x328>)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_GPIO_Init+0x354>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e6:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <HAL_GPIO_Init+0x354>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_GPIO_Init+0x354>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143a:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_GPIO_Init+0x354>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3301      	adds	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	f67f ae86 	bls.w	8001184 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021c00 	.word	0x40021c00
 80014b0:	40022000 	.word	0x40022000
 80014b4:	40022400 	.word	0x40022400
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001500:	887a      	ldrh	r2, [r7, #2]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43d9      	mvns	r1, r3
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	400b      	ands	r3, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_PWREx_EnableOverDrive+0x98>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001552:	f7ff fce9 	bl	8000f28 <HAL_GetTick>
 8001556:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001558:	e009      	b.n	800156e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800155a:	f7ff fce5 	bl	8000f28 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001568:	d901      	bls.n	800156e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e022      	b.n	80015b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157a:	d1ee      	bne.n	800155a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001586:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001588:	f7ff fcce 	bl	8000f28 <HAL_GetTick>
 800158c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800158e:	e009      	b.n	80015a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001590:	f7ff fcca 	bl	8000f28 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800159e:	d901      	bls.n	80015a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e007      	b.n	80015b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015b0:	d1ee      	bne.n	8001590 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e29b      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8087 	beq.w	80016f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e8:	4b96      	ldr	r3, [pc, #600]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d00c      	beq.n	800160e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f4:	4b93      	ldr	r3, [pc, #588]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d112      	bne.n	8001626 <HAL_RCC_OscConfig+0x62>
 8001600:	4b90      	ldr	r3, [pc, #576]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800160c:	d10b      	bne.n	8001626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	4b8d      	ldr	r3, [pc, #564]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d06c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x130>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d168      	bne.n	80016f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e275      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x7a>
 8001630:	4b84      	ldr	r3, [pc, #528]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a83      	ldr	r2, [pc, #524]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e02e      	b.n	800169c <HAL_RCC_OscConfig+0xd8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x9c>
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b7c      	ldr	r3, [pc, #496]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7b      	ldr	r2, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xd8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0xc0>
 800166a:	4b76      	ldr	r3, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a75      	ldr	r2, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b73      	ldr	r3, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a72      	ldr	r2, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xd8>
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6b      	ldr	r2, [pc, #428]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc40 	bl	8000f28 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc3c 	bl	8000f28 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e229      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xe8>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc2c 	bl	8000f28 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fc28 	bl	8000f28 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e215      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b57      	ldr	r3, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x110>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d069      	beq.n	80017d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001702:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x190>
 800171a:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x17a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1e9      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	493d      	ldr	r1, [pc, #244]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e040      	b.n	80017d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a38      	ldr	r2, [pc, #224]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fbde 	bl	8000f28 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fbda 	bl	8000f28 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1c7      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4929      	ldr	r1, [pc, #164]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
 80017a2:	e018      	b.n	80017d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a26      	ldr	r2, [pc, #152]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fbba 	bl	8000f28 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fbb6 	bl	8000f28 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1a3      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d038      	beq.n	8001854 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d019      	beq.n	800181e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	4a15      	ldr	r2, [pc, #84]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fb97 	bl	8000f28 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fe:	f7ff fb93 	bl	8000f28 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e180      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x23a>
 800181c:	e01a      	b.n	8001854 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <HAL_RCC_OscConfig+0x280>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff fb7d 	bl	8000f28 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff fb79 	bl	8000f28 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d903      	bls.n	8001848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e166      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
 8001844:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 800184a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ee      	bne.n	8001832 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80a4 	beq.w	80019aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10d      	bne.n	800188a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a88      	ldr	r2, [pc, #544]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b86      	ldr	r3, [pc, #536]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	4b83      	ldr	r3, [pc, #524]	; (8001a98 <HAL_RCC_OscConfig+0x4d4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001896:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <HAL_RCC_OscConfig+0x4d4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7f      	ldr	r2, [pc, #508]	; (8001a98 <HAL_RCC_OscConfig+0x4d4>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb41 	bl	8000f28 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff fb3d 	bl	8000f28 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e12a      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018bc:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x4d4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x31a>
 80018d0:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a6f      	ldr	r2, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	e02d      	b.n	800193a <HAL_RCC_OscConfig+0x376>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x33c>
 80018e6:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a6a      	ldr	r2, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a67      	ldr	r2, [pc, #412]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	e01c      	b.n	800193a <HAL_RCC_OscConfig+0x376>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d10c      	bne.n	8001922 <HAL_RCC_OscConfig+0x35e>
 8001908:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a61      	ldr	r2, [pc, #388]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
 8001914:	4b5f      	ldr	r3, [pc, #380]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	4a5e      	ldr	r2, [pc, #376]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
 8001920:	e00b      	b.n	800193a <HAL_RCC_OscConfig+0x376>
 8001922:	4b5c      	ldr	r3, [pc, #368]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a5b      	ldr	r2, [pc, #364]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d015      	beq.n	800196e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff faf1 	bl	8000f28 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff faed 	bl	8000f28 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0d8      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ee      	beq.n	800194a <HAL_RCC_OscConfig+0x386>
 800196c:	e014      	b.n	8001998 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff fadb 	bl	8000f28 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff fad7 	bl	8000f28 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0c2      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ee      	bne.n	8001976 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d105      	bne.n	80019aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a3c      	ldr	r2, [pc, #240]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80ae 	beq.w	8001b10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d06d      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d14b      	bne.n	8001a60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a31      	ldr	r2, [pc, #196]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff faa8 	bl	8000f28 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff faa4 	bl	8000f28 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e091      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	071b      	lsls	r3, r3, #28
 8001a26:	491b      	ldr	r1, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fa76 	bl	8000f28 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fa72 	bl	8000f28 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e05f      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x47c>
 8001a5e:	e057      	b.n	8001b10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fa5c 	bl	8000f28 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff fa58 	bl	8000f28 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e045      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_OscConfig+0x4d0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x4b0>
 8001a92:	e03d      	b.n	8001b10 <HAL_RCC_OscConfig+0x54c>
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_RCC_OscConfig+0x558>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d030      	beq.n	8001b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d129      	bne.n	8001b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d122      	bne.n	8001b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ad2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d119      	bne.n	8001b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d10f      	bne.n	8001b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0d0      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d910      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 020f 	bic.w	r2, r3, #15
 8001b4e:	4965      	ldr	r1, [pc, #404]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0b8      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	494d      	ldr	r1, [pc, #308]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d040      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d115      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e07f      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e073      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06b      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4936      	ldr	r1, [pc, #216]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c14:	f7ff f988 	bl	8000f28 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f984 	bl	8000f28 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e053      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d210      	bcs.n	8001c74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 020f 	bic.w	r2, r3, #15
 8001c5a:	4922      	ldr	r1, [pc, #136]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e032      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb2:	f000 f821 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	490a      	ldr	r1, [pc, #40]	; (8001cec <HAL_RCC_ClockConfig+0x1cc>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1d4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f8e4 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	080041d8 	.word	0x080041d8
 8001cf0:	20000030 	.word	0x20000030
 8001cf4:	20000034 	.word	0x20000034

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6079      	str	r1, [r7, #4]
 8001d02:	2100      	movs	r1, #0
 8001d04:	60f9      	str	r1, [r7, #12]
 8001d06:	2100      	movs	r1, #0
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0e:	4952      	ldr	r1, [pc, #328]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d10:	6889      	ldr	r1, [r1, #8]
 8001d12:	f001 010c 	and.w	r1, r1, #12
 8001d16:	2908      	cmp	r1, #8
 8001d18:	d00d      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x3e>
 8001d1a:	2908      	cmp	r1, #8
 8001d1c:	f200 8094 	bhi.w	8001e48 <HAL_RCC_GetSysClockFreq+0x150>
 8001d20:	2900      	cmp	r1, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x32>
 8001d24:	2904      	cmp	r1, #4
 8001d26:	d003      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x38>
 8001d28:	e08e      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x164>)
 8001d2c:	60bb      	str	r3, [r7, #8]
      break;
 8001d2e:	e08e      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d32:	60bb      	str	r3, [r7, #8]
      break;
 8001d34:	e08b      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d36:	4948      	ldr	r1, [pc, #288]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d38:	6849      	ldr	r1, [r1, #4]
 8001d3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d3e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d40:	4945      	ldr	r1, [pc, #276]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d42:	6849      	ldr	r1, [r1, #4]
 8001d44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d48:	2900      	cmp	r1, #0
 8001d4a:	d024      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4c:	4942      	ldr	r1, [pc, #264]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d4e:	6849      	ldr	r1, [r1, #4]
 8001d50:	0989      	lsrs	r1, r1, #6
 8001d52:	4608      	mov	r0, r1
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d5c:	f04f 0500 	mov.w	r5, #0
 8001d60:	ea00 0204 	and.w	r2, r0, r4
 8001d64:	ea01 0305 	and.w	r3, r1, r5
 8001d68:	493d      	ldr	r1, [pc, #244]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d6a:	fb01 f003 	mul.w	r0, r1, r3
 8001d6e:	2100      	movs	r1, #0
 8001d70:	fb01 f102 	mul.w	r1, r1, r2
 8001d74:	1844      	adds	r4, r0, r1
 8001d76:	493a      	ldr	r1, [pc, #232]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d78:	fba2 0101 	umull	r0, r1, r2, r1
 8001d7c:	1863      	adds	r3, r4, r1
 8001d7e:	4619      	mov	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	f7fe fa5e 	bl	8000248 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4613      	mov	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e04a      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	ea02 0400 	and.w	r4, r2, r0
 8001dae:	ea03 0501 	and.w	r5, r3, r1
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	014b      	lsls	r3, r1, #5
 8001dc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dc4:	0142      	lsls	r2, r0, #5
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	1b00      	subs	r0, r0, r4
 8001dcc:	eb61 0105 	sbc.w	r1, r1, r5
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	018b      	lsls	r3, r1, #6
 8001dda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dde:	0182      	lsls	r2, r0, #6
 8001de0:	1a12      	subs	r2, r2, r0
 8001de2:	eb63 0301 	sbc.w	r3, r3, r1
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	00d9      	lsls	r1, r3, #3
 8001df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001df4:	00d0      	lsls	r0, r2, #3
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	1912      	adds	r2, r2, r4
 8001dfc:	eb45 0303 	adc.w	r3, r5, r3
 8001e00:	f04f 0000 	mov.w	r0, #0
 8001e04:	f04f 0100 	mov.w	r1, #0
 8001e08:	0299      	lsls	r1, r3, #10
 8001e0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e0e:	0290      	lsls	r0, r2, #10
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	f7fe fa12 	bl	8000248 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	60bb      	str	r3, [r7, #8]
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x164>)
 8001e4a:	60bb      	str	r3, [r7, #8]
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	017d7840 	.word	0x017d7840

08001e64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000030 	.word	0x20000030

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0a9b      	lsrs	r3, r3, #10
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	080041e8 	.word	0x080041e8

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea8:	f7ff ffdc 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0b5b      	lsrs	r3, r3, #13
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	080041e8 	.word	0x080041e8

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d012      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ef4:	4b69      	ldr	r3, [pc, #420]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a68      	ldr	r2, [pc, #416]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001efe:	6093      	str	r3, [r2, #8]
 8001f00:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	4964      	ldr	r1, [pc, #400]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d017      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	4959      	ldr	r1, [pc, #356]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f44:	d101      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d017      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	494a      	ldr	r1, [pc, #296]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f80:	d101      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 808b 	beq.w	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a39      	ldr	r2, [pc, #228]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd4:	f7fe ffa8 	bl	8000f28 <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe ffa4 	bl	8000f28 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e38f      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d035      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d02e      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002020:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002038:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d114      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe ff6c 	bl	8000f28 <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7fe ff68 	bl	8000f28 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e351      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ee      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002082:	d111      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002092:	400b      	ands	r3, r1
 8002094:	4901      	ldr	r1, [pc, #4]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
 800209a:	e00b      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800209c:	40023800 	.word	0x40023800
 80020a0:	40007000 	.word	0x40007000
 80020a4:	0ffffcff 	.word	0x0ffffcff
 80020a8:	4bb3      	ldr	r3, [pc, #716]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4ab2      	ldr	r2, [pc, #712]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020b2:	6093      	str	r3, [r2, #8]
 80020b4:	4bb0      	ldr	r3, [pc, #704]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	49ad      	ldr	r1, [pc, #692]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020d2:	4ba9      	ldr	r3, [pc, #676]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d8:	4aa7      	ldr	r2, [pc, #668]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020e2:	4ba5      	ldr	r3, [pc, #660]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	49a2      	ldr	r1, [pc, #648]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002100:	4b9d      	ldr	r3, [pc, #628]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800210e:	499a      	ldr	r1, [pc, #616]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002130:	4991      	ldr	r1, [pc, #580]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002144:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002152:	4989      	ldr	r1, [pc, #548]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002166:	4b84      	ldr	r3, [pc, #528]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4980      	ldr	r1, [pc, #512]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002188:	4b7b      	ldr	r3, [pc, #492]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4978      	ldr	r1, [pc, #480]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021aa:	4b73      	ldr	r3, [pc, #460]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f023 020c 	bic.w	r2, r3, #12
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b8:	496f      	ldr	r1, [pc, #444]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021cc:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	4967      	ldr	r1, [pc, #412]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ee:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fc:	495e      	ldr	r1, [pc, #376]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	4956      	ldr	r1, [pc, #344]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002232:	4b51      	ldr	r3, [pc, #324]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	494d      	ldr	r1, [pc, #308]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	4945      	ldr	r1, [pc, #276]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	493c      	ldr	r1, [pc, #240]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002298:	4b37      	ldr	r3, [pc, #220]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022a6:	4934      	ldr	r1, [pc, #208]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d011      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c8:	492b      	ldr	r1, [pc, #172]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d8:	d101      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	491b      	ldr	r1, [pc, #108]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800232c:	4912      	ldr	r1, [pc, #72]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002350:	4909      	ldr	r1, [pc, #36]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00f      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800236a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002374:	e002      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	4986      	ldr	r1, [pc, #536]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002390:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002396:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a0:	497d      	ldr	r1, [pc, #500]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d006      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80d6 	beq.w	8002568 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023bc:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a75      	ldr	r2, [pc, #468]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c8:	f7fe fdae 	bl	8000f28 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023d0:	f7fe fdaa 	bl	8000f28 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e195      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d021      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002402:	4b65      	ldr	r3, [pc, #404]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002416:	0e1b      	lsrs	r3, r3, #24
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	4958      	ldr	r1, [pc, #352]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02e      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002468:	d129      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800246a:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002478:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247e:	0f1b      	lsrs	r3, r3, #28
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	019a      	lsls	r2, r3, #6
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	431a      	orrs	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	071b      	lsls	r3, r3, #28
 800249e:	493e      	ldr	r1, [pc, #248]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ac:	f023 021f 	bic.w	r2, r3, #31
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	3b01      	subs	r3, #1
 80024b6:	4938      	ldr	r1, [pc, #224]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01d      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ca:	4b33      	ldr	r3, [pc, #204]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d0:	0e1b      	lsrs	r3, r3, #24
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024d8:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024de:	0f1b      	lsrs	r3, r3, #28
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	019a      	lsls	r2, r3, #6
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	431a      	orrs	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	061b      	lsls	r3, r3, #24
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	071b      	lsls	r3, r3, #28
 80024fe:	4926      	ldr	r1, [pc, #152]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	019a      	lsls	r2, r3, #6
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	071b      	lsls	r3, r3, #28
 800252e:	491a      	ldr	r1, [pc, #104]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002542:	f7fe fcf1 	bl	8000f28 <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800254a:	f7fe fced 	bl	8000f28 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0d8      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	f040 80ce 	bne.w	800270c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257c:	f7fe fcd4 	bl	8000f28 <HAL_GetTick>
 8002580:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002582:	e00b      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002584:	f7fe fcd0 	bl	8000f28 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d904      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0bb      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800259c:	4b5e      	ldr	r3, [pc, #376]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a8:	d0ec      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d02e      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d12a      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025d2:	4b51      	ldr	r3, [pc, #324]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	0f1b      	lsrs	r3, r3, #28
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	019a      	lsls	r2, r3, #6
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	061b      	lsls	r3, r3, #24
 8002600:	431a      	orrs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	071b      	lsls	r3, r3, #28
 8002606:	4944      	ldr	r1, [pc, #272]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800260e:	4b42      	ldr	r3, [pc, #264]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002614:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	493d      	ldr	r1, [pc, #244]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d022      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800263c:	d11d      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	0e1b      	lsrs	r3, r3, #24
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	0f1b      	lsrs	r3, r3, #28
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	019a      	lsls	r2, r3, #6
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	061b      	lsls	r3, r3, #24
 800266c:	431a      	orrs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	071b      	lsls	r3, r3, #28
 8002672:	4929      	ldr	r1, [pc, #164]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d028      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	019a      	lsls	r2, r3, #6
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	4917      	ldr	r1, [pc, #92]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	4911      	ldr	r1, [pc, #68]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fc20 	bl	8000f28 <HAL_GetTick>
 80026e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026ec:	f7fe fc1c 	bl	8000f28 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e007      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800270a:	d1ef      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e049      	b.n	80027c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe f9a8 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 fac0 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d001      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e054      	b.n	800288e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a26      	ldr	r2, [pc, #152]	; (800289c <HAL_TIM_Base_Start_IT+0xd0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d022      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x80>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d01d      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x80>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d018      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x80>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x80>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00e      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x80>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_TIM_Base_Start_IT+0xe0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x80>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x80>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d115      	bne.n	8002878 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_TIM_Base_Start_IT+0xec>)
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d015      	beq.n	800288a <HAL_TIM_Base_Start_IT+0xbe>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d011      	beq.n	800288a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	e008      	b.n	800288a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e000      	b.n	800288c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40000400 	.word	0x40000400
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40000c00 	.word	0x40000c00
 80028ac:	40010400 	.word	0x40010400
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40001800 	.word	0x40001800
 80028b8:	00010007 	.word	0x00010007

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9d0 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9c2 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9d3 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9a6 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f998 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f9a9 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f97c 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f96e 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f97f 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f952 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f944 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f955 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe f852 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fb0c 	bl	8003084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7a:	d10e      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d107      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 faff 	bl	8003098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d107      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f903 	bl	8002ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d10e      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0220 	mvn.w	r2, #32
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fabf 	bl	8003070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_TIM_ConfigClockSource+0x1c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0b4      	b.n	8002c82 <HAL_TIM_ConfigClockSource+0x186>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <HAL_TIM_ConfigClockSource+0x190>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d03e      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8002b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b56:	f200 8087 	bhi.w	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5e:	f000 8086 	beq.w	8002c6e <HAL_TIM_ConfigClockSource+0x172>
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d87f      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b70      	cmp	r3, #112	; 0x70
 8002b6a:	d01a      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8002b6c:	2b70      	cmp	r3, #112	; 0x70
 8002b6e:	d87b      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b70:	2b60      	cmp	r3, #96	; 0x60
 8002b72:	d050      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x11a>
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d877      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b78:	2b50      	cmp	r3, #80	; 0x50
 8002b7a:	d03c      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d873      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d058      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x13a>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d86f      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d064      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002b8c:	2b30      	cmp	r3, #48	; 0x30
 8002b8e:	d86b      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d060      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d867      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d05c      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d05a      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x15a>
 8002ba0:	e062      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f000 f9af 	bl	8002f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	609a      	str	r2, [r3, #8]
      break;
 8002bce:	e04f      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f000 f998 	bl	8002f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf2:	609a      	str	r2, [r3, #8]
      break;
 8002bf4:	e03c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f000 f90c 	bl	8002e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2150      	movs	r1, #80	; 0x50
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f965 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002c14:	e02c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f000 f92b 	bl	8002e7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2160      	movs	r1, #96	; 0x60
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f955 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002c34:	e01c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 f8ec 	bl	8002e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2140      	movs	r1, #64	; 0x40
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f945 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002c54:	e00c      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f000 f93c 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002c66:	e003      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e000      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	fffeff88 	.word	0xfffeff88

08002c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a40      	ldr	r2, [pc, #256]	; (8002df4 <TIM_Base_SetConfig+0x114>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d00f      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3d      	ldr	r2, [pc, #244]	; (8002df8 <TIM_Base_SetConfig+0x118>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3c      	ldr	r2, [pc, #240]	; (8002dfc <TIM_Base_SetConfig+0x11c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <TIM_Base_SetConfig+0x120>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <TIM_Base_SetConfig+0x124>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d108      	bne.n	8002d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2f      	ldr	r2, [pc, #188]	; (8002df4 <TIM_Base_SetConfig+0x114>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02b      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d027      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2c      	ldr	r2, [pc, #176]	; (8002df8 <TIM_Base_SetConfig+0x118>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d023      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <TIM_Base_SetConfig+0x11c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01f      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <TIM_Base_SetConfig+0x120>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01b      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <TIM_Base_SetConfig+0x124>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d017      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <TIM_Base_SetConfig+0x128>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <TIM_Base_SetConfig+0x12c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00f      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <TIM_Base_SetConfig+0x130>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <TIM_Base_SetConfig+0x134>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <TIM_Base_SetConfig+0x138>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <TIM_Base_SetConfig+0x13c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d108      	bne.n	8002da4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <TIM_Base_SetConfig+0x114>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0xf8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <TIM_Base_SetConfig+0x124>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d103      	bne.n	8002de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	615a      	str	r2, [r3, #20]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40014400 	.word	0x40014400
 8002e10:	40014800 	.word	0x40014800
 8002e14:	40001800 	.word	0x40001800
 8002e18:	40001c00 	.word	0x40001c00
 8002e1c:	40002000 	.word	0x40002000

08002e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f023 0201 	bic.w	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 030a 	bic.w	r3, r3, #10
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f023 0210 	bic.w	r2, r3, #16
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	031b      	lsls	r3, r3, #12
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f043 0307 	orr.w	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	021a      	lsls	r2, r3, #8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	609a      	str	r2, [r3, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e06d      	b.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d01d      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a15      	ldr	r2, [pc, #84]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d10c      	bne.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	4313      	orrs	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40010000 	.word	0x40010000
 8003058:	40010400 	.word	0x40010400
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40014000 	.word	0x40014000
 800306c:	40001800 	.word	0x40001800

08003070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e040      	b.n	8003140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fd7c 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8f4 	bl	80032d8 <UART_SetConfig>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e022      	b.n	8003140 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fb4a 	bl	800379c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fbd1 	bl	80038e0 <UART_CheckIdleState>
 800313e:	4603      	mov	r3, r0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003148:	b480      	push	{r7}
 800314a:	b08b      	sub	sp, #44	; 0x2c
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315a:	2b20      	cmp	r3, #32
 800315c:	d156      	bne.n	800320c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_Transmit_IT+0x22>
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e04f      	b.n	800320e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_UART_Transmit_IT+0x34>
 8003178:	2302      	movs	r3, #2
 800317a:	e048      	b.n	800320e <HAL_UART_Transmit_IT+0xc6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2221      	movs	r2, #33	; 0x21
 80031ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	d107      	bne.n	80031c8 <HAL_UART_Transmit_IT+0x80>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d103      	bne.n	80031c8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_UART_Transmit_IT+0xd4>)
 80031c4:	669a      	str	r2, [r3, #104]	; 0x68
 80031c6:	e002      	b.n	80031ce <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_UART_Transmit_IT+0xd8>)
 80031cc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	613b      	str	r3, [r7, #16]
   return(result);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	69f9      	ldr	r1, [r7, #28]
 80031fa:	6a3a      	ldr	r2, [r7, #32]
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	61bb      	str	r3, [r7, #24]
   return(result);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e6      	bne.n	80031d6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	372c      	adds	r7, #44	; 0x2c
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	08003d47 	.word	0x08003d47
 8003220:	08003c91 	.word	0x08003c91

08003224 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003236:	2b20      	cmp	r3, #32
 8003238:	d13d      	bne.n	80032b6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_UART_Receive_IT+0x22>
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e036      	b.n	80032b8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_UART_Receive_IT+0x34>
 8003254:	2302      	movs	r3, #2
 8003256:	e02f      	b.n	80032b8 <HAL_UART_Receive_IT+0x94>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d018      	beq.n	80032a6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	613b      	str	r3, [r7, #16]
   return(result);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	623b      	str	r3, [r7, #32]
 8003294:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	69f9      	ldr	r1, [r7, #28]
 8003298:	6a3a      	ldr	r2, [r7, #32]
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	61bb      	str	r3, [r7, #24]
   return(result);
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e6      	bne.n	8003274 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	461a      	mov	r2, r3
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fc25 	bl	8003afc <UART_Start_Receive_IT>
 80032b2:	4603      	mov	r3, r0
 80032b4:	e000      	b.n	80032b8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4ba7      	ldr	r3, [pc, #668]	; (80035a0 <UART_SetConfig+0x2c8>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	6979      	ldr	r1, [r7, #20]
 800330c:	430b      	orrs	r3, r1
 800330e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a95      	ldr	r2, [pc, #596]	; (80035a4 <UART_SetConfig+0x2cc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d120      	bne.n	8003396 <UART_SetConfig+0xbe>
 8003354:	4b94      	ldr	r3, [pc, #592]	; (80035a8 <UART_SetConfig+0x2d0>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b03      	cmp	r3, #3
 8003360:	d816      	bhi.n	8003390 <UART_SetConfig+0xb8>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0x90>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	08003379 	.word	0x08003379
 800336c:	08003385 	.word	0x08003385
 8003370:	0800337f 	.word	0x0800337f
 8003374:	0800338b 	.word	0x0800338b
 8003378:	2301      	movs	r3, #1
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e14f      	b.n	800361e <UART_SetConfig+0x346>
 800337e:	2302      	movs	r3, #2
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e14c      	b.n	800361e <UART_SetConfig+0x346>
 8003384:	2304      	movs	r3, #4
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e149      	b.n	800361e <UART_SetConfig+0x346>
 800338a:	2308      	movs	r3, #8
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e146      	b.n	800361e <UART_SetConfig+0x346>
 8003390:	2310      	movs	r3, #16
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e143      	b.n	800361e <UART_SetConfig+0x346>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a84      	ldr	r2, [pc, #528]	; (80035ac <UART_SetConfig+0x2d4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d132      	bne.n	8003406 <UART_SetConfig+0x12e>
 80033a0:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <UART_SetConfig+0x2d0>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d828      	bhi.n	8003400 <UART_SetConfig+0x128>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0xdc>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033e9 	.word	0x080033e9
 80033b8:	08003401 	.word	0x08003401
 80033bc:	08003401 	.word	0x08003401
 80033c0:	08003401 	.word	0x08003401
 80033c4:	080033f5 	.word	0x080033f5
 80033c8:	08003401 	.word	0x08003401
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003401 	.word	0x08003401
 80033d4:	080033ef 	.word	0x080033ef
 80033d8:	08003401 	.word	0x08003401
 80033dc:	08003401 	.word	0x08003401
 80033e0:	08003401 	.word	0x08003401
 80033e4:	080033fb 	.word	0x080033fb
 80033e8:	2300      	movs	r3, #0
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e117      	b.n	800361e <UART_SetConfig+0x346>
 80033ee:	2302      	movs	r3, #2
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e114      	b.n	800361e <UART_SetConfig+0x346>
 80033f4:	2304      	movs	r3, #4
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e111      	b.n	800361e <UART_SetConfig+0x346>
 80033fa:	2308      	movs	r3, #8
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e10e      	b.n	800361e <UART_SetConfig+0x346>
 8003400:	2310      	movs	r3, #16
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e10b      	b.n	800361e <UART_SetConfig+0x346>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a69      	ldr	r2, [pc, #420]	; (80035b0 <UART_SetConfig+0x2d8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d120      	bne.n	8003452 <UART_SetConfig+0x17a>
 8003410:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <UART_SetConfig+0x2d0>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800341a:	2b30      	cmp	r3, #48	; 0x30
 800341c:	d013      	beq.n	8003446 <UART_SetConfig+0x16e>
 800341e:	2b30      	cmp	r3, #48	; 0x30
 8003420:	d814      	bhi.n	800344c <UART_SetConfig+0x174>
 8003422:	2b20      	cmp	r3, #32
 8003424:	d009      	beq.n	800343a <UART_SetConfig+0x162>
 8003426:	2b20      	cmp	r3, #32
 8003428:	d810      	bhi.n	800344c <UART_SetConfig+0x174>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <UART_SetConfig+0x15c>
 800342e:	2b10      	cmp	r3, #16
 8003430:	d006      	beq.n	8003440 <UART_SetConfig+0x168>
 8003432:	e00b      	b.n	800344c <UART_SetConfig+0x174>
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e0f1      	b.n	800361e <UART_SetConfig+0x346>
 800343a:	2302      	movs	r3, #2
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e0ee      	b.n	800361e <UART_SetConfig+0x346>
 8003440:	2304      	movs	r3, #4
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e0eb      	b.n	800361e <UART_SetConfig+0x346>
 8003446:	2308      	movs	r3, #8
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e0e8      	b.n	800361e <UART_SetConfig+0x346>
 800344c:	2310      	movs	r3, #16
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e0e5      	b.n	800361e <UART_SetConfig+0x346>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <UART_SetConfig+0x2dc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d120      	bne.n	800349e <UART_SetConfig+0x1c6>
 800345c:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <UART_SetConfig+0x2d0>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003466:	2bc0      	cmp	r3, #192	; 0xc0
 8003468:	d013      	beq.n	8003492 <UART_SetConfig+0x1ba>
 800346a:	2bc0      	cmp	r3, #192	; 0xc0
 800346c:	d814      	bhi.n	8003498 <UART_SetConfig+0x1c0>
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d009      	beq.n	8003486 <UART_SetConfig+0x1ae>
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d810      	bhi.n	8003498 <UART_SetConfig+0x1c0>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <UART_SetConfig+0x1a8>
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d006      	beq.n	800348c <UART_SetConfig+0x1b4>
 800347e:	e00b      	b.n	8003498 <UART_SetConfig+0x1c0>
 8003480:	2300      	movs	r3, #0
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e0cb      	b.n	800361e <UART_SetConfig+0x346>
 8003486:	2302      	movs	r3, #2
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e0c8      	b.n	800361e <UART_SetConfig+0x346>
 800348c:	2304      	movs	r3, #4
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e0c5      	b.n	800361e <UART_SetConfig+0x346>
 8003492:	2308      	movs	r3, #8
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e0c2      	b.n	800361e <UART_SetConfig+0x346>
 8003498:	2310      	movs	r3, #16
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e0bf      	b.n	800361e <UART_SetConfig+0x346>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a45      	ldr	r2, [pc, #276]	; (80035b8 <UART_SetConfig+0x2e0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d125      	bne.n	80034f4 <UART_SetConfig+0x21c>
 80034a8:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <UART_SetConfig+0x2d0>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034b6:	d017      	beq.n	80034e8 <UART_SetConfig+0x210>
 80034b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034bc:	d817      	bhi.n	80034ee <UART_SetConfig+0x216>
 80034be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c2:	d00b      	beq.n	80034dc <UART_SetConfig+0x204>
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c8:	d811      	bhi.n	80034ee <UART_SetConfig+0x216>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <UART_SetConfig+0x1fe>
 80034ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d2:	d006      	beq.n	80034e2 <UART_SetConfig+0x20a>
 80034d4:	e00b      	b.n	80034ee <UART_SetConfig+0x216>
 80034d6:	2300      	movs	r3, #0
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e0a0      	b.n	800361e <UART_SetConfig+0x346>
 80034dc:	2302      	movs	r3, #2
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e09d      	b.n	800361e <UART_SetConfig+0x346>
 80034e2:	2304      	movs	r3, #4
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e09a      	b.n	800361e <UART_SetConfig+0x346>
 80034e8:	2308      	movs	r3, #8
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e097      	b.n	800361e <UART_SetConfig+0x346>
 80034ee:	2310      	movs	r3, #16
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e094      	b.n	800361e <UART_SetConfig+0x346>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a30      	ldr	r2, [pc, #192]	; (80035bc <UART_SetConfig+0x2e4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d125      	bne.n	800354a <UART_SetConfig+0x272>
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <UART_SetConfig+0x2d0>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800350c:	d017      	beq.n	800353e <UART_SetConfig+0x266>
 800350e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003512:	d817      	bhi.n	8003544 <UART_SetConfig+0x26c>
 8003514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003518:	d00b      	beq.n	8003532 <UART_SetConfig+0x25a>
 800351a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800351e:	d811      	bhi.n	8003544 <UART_SetConfig+0x26c>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <UART_SetConfig+0x254>
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003528:	d006      	beq.n	8003538 <UART_SetConfig+0x260>
 800352a:	e00b      	b.n	8003544 <UART_SetConfig+0x26c>
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e075      	b.n	800361e <UART_SetConfig+0x346>
 8003532:	2302      	movs	r3, #2
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	e072      	b.n	800361e <UART_SetConfig+0x346>
 8003538:	2304      	movs	r3, #4
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e06f      	b.n	800361e <UART_SetConfig+0x346>
 800353e:	2308      	movs	r3, #8
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e06c      	b.n	800361e <UART_SetConfig+0x346>
 8003544:	2310      	movs	r3, #16
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e069      	b.n	800361e <UART_SetConfig+0x346>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <UART_SetConfig+0x2e8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d137      	bne.n	80035c4 <UART_SetConfig+0x2ec>
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <UART_SetConfig+0x2d0>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800355e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003562:	d017      	beq.n	8003594 <UART_SetConfig+0x2bc>
 8003564:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003568:	d817      	bhi.n	800359a <UART_SetConfig+0x2c2>
 800356a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356e:	d00b      	beq.n	8003588 <UART_SetConfig+0x2b0>
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d811      	bhi.n	800359a <UART_SetConfig+0x2c2>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <UART_SetConfig+0x2aa>
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357e:	d006      	beq.n	800358e <UART_SetConfig+0x2b6>
 8003580:	e00b      	b.n	800359a <UART_SetConfig+0x2c2>
 8003582:	2300      	movs	r3, #0
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e04a      	b.n	800361e <UART_SetConfig+0x346>
 8003588:	2302      	movs	r3, #2
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e047      	b.n	800361e <UART_SetConfig+0x346>
 800358e:	2304      	movs	r3, #4
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e044      	b.n	800361e <UART_SetConfig+0x346>
 8003594:	2308      	movs	r3, #8
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e041      	b.n	800361e <UART_SetConfig+0x346>
 800359a:	2310      	movs	r3, #16
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e03e      	b.n	800361e <UART_SetConfig+0x346>
 80035a0:	efff69f3 	.word	0xefff69f3
 80035a4:	40011000 	.word	0x40011000
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40004400 	.word	0x40004400
 80035b0:	40004800 	.word	0x40004800
 80035b4:	40004c00 	.word	0x40004c00
 80035b8:	40005000 	.word	0x40005000
 80035bc:	40011400 	.word	0x40011400
 80035c0:	40007800 	.word	0x40007800
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a71      	ldr	r2, [pc, #452]	; (8003790 <UART_SetConfig+0x4b8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d125      	bne.n	800361a <UART_SetConfig+0x342>
 80035ce:	4b71      	ldr	r3, [pc, #452]	; (8003794 <UART_SetConfig+0x4bc>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035dc:	d017      	beq.n	800360e <UART_SetConfig+0x336>
 80035de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035e2:	d817      	bhi.n	8003614 <UART_SetConfig+0x33c>
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e8:	d00b      	beq.n	8003602 <UART_SetConfig+0x32a>
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ee:	d811      	bhi.n	8003614 <UART_SetConfig+0x33c>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <UART_SetConfig+0x324>
 80035f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f8:	d006      	beq.n	8003608 <UART_SetConfig+0x330>
 80035fa:	e00b      	b.n	8003614 <UART_SetConfig+0x33c>
 80035fc:	2300      	movs	r3, #0
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e00d      	b.n	800361e <UART_SetConfig+0x346>
 8003602:	2302      	movs	r3, #2
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e00a      	b.n	800361e <UART_SetConfig+0x346>
 8003608:	2304      	movs	r3, #4
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e007      	b.n	800361e <UART_SetConfig+0x346>
 800360e:	2308      	movs	r3, #8
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e004      	b.n	800361e <UART_SetConfig+0x346>
 8003614:	2310      	movs	r3, #16
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e001      	b.n	800361e <UART_SetConfig+0x346>
 800361a:	2310      	movs	r3, #16
 800361c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003626:	d15a      	bne.n	80036de <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d827      	bhi.n	800367e <UART_SetConfig+0x3a6>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <UART_SetConfig+0x35c>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003659 	.word	0x08003659
 8003638:	08003661 	.word	0x08003661
 800363c:	08003669 	.word	0x08003669
 8003640:	0800367f 	.word	0x0800367f
 8003644:	0800366f 	.word	0x0800366f
 8003648:	0800367f 	.word	0x0800367f
 800364c:	0800367f 	.word	0x0800367f
 8003650:	0800367f 	.word	0x0800367f
 8003654:	08003677 	.word	0x08003677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003658:	f7fe fc10 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 800365c:	61b8      	str	r0, [r7, #24]
        break;
 800365e:	e013      	b.n	8003688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003660:	f7fe fc20 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 8003664:	61b8      	str	r0, [r7, #24]
        break;
 8003666:	e00f      	b.n	8003688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <UART_SetConfig+0x4c0>)
 800366a:	61bb      	str	r3, [r7, #24]
        break;
 800366c:	e00c      	b.n	8003688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366e:	f7fe fb43 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8003672:	61b8      	str	r0, [r7, #24]
        break;
 8003674:	e008      	b.n	8003688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367a:	61bb      	str	r3, [r7, #24]
        break;
 800367c:	e004      	b.n	8003688 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	77bb      	strb	r3, [r7, #30]
        break;
 8003686:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d074      	beq.n	8003778 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	005a      	lsls	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d916      	bls.n	80036d8 <UART_SetConfig+0x400>
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d212      	bcs.n	80036d8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f023 030f 	bic.w	r3, r3, #15
 80036ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	89fa      	ldrh	r2, [r7, #14]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e04f      	b.n	8003778 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	77bb      	strb	r3, [r7, #30]
 80036dc:	e04c      	b.n	8003778 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d828      	bhi.n	8003736 <UART_SetConfig+0x45e>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0x414>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003719 	.word	0x08003719
 80036f4:	08003721 	.word	0x08003721
 80036f8:	08003737 	.word	0x08003737
 80036fc:	08003727 	.word	0x08003727
 8003700:	08003737 	.word	0x08003737
 8003704:	08003737 	.word	0x08003737
 8003708:	08003737 	.word	0x08003737
 800370c:	0800372f 	.word	0x0800372f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003710:	f7fe fbb4 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8003714:	61b8      	str	r0, [r7, #24]
        break;
 8003716:	e013      	b.n	8003740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7fe fbc4 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 800371c:	61b8      	str	r0, [r7, #24]
        break;
 800371e:	e00f      	b.n	8003740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <UART_SetConfig+0x4c0>)
 8003722:	61bb      	str	r3, [r7, #24]
        break;
 8003724:	e00c      	b.n	8003740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003726:	f7fe fae7 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 800372a:	61b8      	str	r0, [r7, #24]
        break;
 800372c:	e008      	b.n	8003740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e004      	b.n	8003740 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	77bb      	strb	r3, [r7, #30]
        break;
 800373e:	bf00      	nop
    }

    if (pclk != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d018      	beq.n	8003778 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	085a      	lsrs	r2, r3, #1
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	441a      	add	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d909      	bls.n	8003774 <UART_SetConfig+0x49c>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003766:	d205      	bcs.n	8003774 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	e001      	b.n	8003778 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003784:	7fbb      	ldrb	r3, [r7, #30]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40007c00 	.word	0x40007c00
 8003794:	40023800 	.word	0x40023800
 8003798:	00f42400 	.word	0x00f42400

0800379c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800389a:	d10a      	bne.n	80038b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038f0:	f7fd fb1a 	bl	8000f28 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b08      	cmp	r3, #8
 8003902:	d10e      	bne.n	8003922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f82d 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e023      	b.n	800396a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d10e      	bne.n	800394e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f817 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e00d      	b.n	800396a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b09c      	sub	sp, #112	; 0x70
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003982:	e0a5      	b.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	f000 80a1 	beq.w	8003ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fd facb 	bl	8000f28 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800399e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d13e      	bne.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039b8:	667b      	str	r3, [r7, #100]	; 0x64
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e6      	bne.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e067      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d04f      	beq.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3e:	d147      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e6      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a9c:	623a      	str	r2, [r7, #32]
 8003a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	69f9      	ldr	r1, [r7, #28]
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e5      	bne.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e010      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	f43f af4a 	beq.w	8003984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3770      	adds	r7, #112	; 0x70
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b097      	sub	sp, #92	; 0x5c
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d10e      	bne.n	8003b4e <UART_Start_Receive_IT+0x52>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <UART_Start_Receive_IT+0x48>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b42:	e02d      	b.n	8003ba0 <UART_Start_Receive_IT+0xa4>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	22ff      	movs	r2, #255	; 0xff
 8003b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b4c:	e028      	b.n	8003ba0 <UART_Start_Receive_IT+0xa4>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <UART_Start_Receive_IT+0x76>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <UART_Start_Receive_IT+0x6c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	22ff      	movs	r2, #255	; 0xff
 8003b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b66:	e01b      	b.n	8003ba0 <UART_Start_Receive_IT+0xa4>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	227f      	movs	r2, #127	; 0x7f
 8003b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b70:	e016      	b.n	8003ba0 <UART_Start_Receive_IT+0xa4>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b7a:	d10d      	bne.n	8003b98 <UART_Start_Receive_IT+0x9c>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <UART_Start_Receive_IT+0x92>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	227f      	movs	r2, #127	; 0x7f
 8003b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b8c:	e008      	b.n	8003ba0 <UART_Start_Receive_IT+0xa4>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	223f      	movs	r2, #63	; 0x3f
 8003b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b96:	e003      	b.n	8003ba0 <UART_Start_Receive_IT+0xa4>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2222      	movs	r2, #34	; 0x22
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bce:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d107      	bne.n	8003bfc <UART_Start_Receive_IT+0x100>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <UART_Start_Receive_IT+0x18c>)
 8003bf8:	665a      	str	r2, [r3, #100]	; 0x64
 8003bfa:	e002      	b.n	8003c02 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <UART_Start_Receive_IT+0x190>)
 8003c00:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d019      	beq.n	8003c46 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
 8003c32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e6      	bne.n	8003c12 <UART_Start_Receive_IT+0x116>
 8003c44:	e018      	b.n	8003c78 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	613b      	str	r3, [r7, #16]
   return(result);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f043 0320 	orr.w	r3, r3, #32
 8003c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	69f9      	ldr	r1, [r7, #28]
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e6      	bne.n	8003c46 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	375c      	adds	r7, #92	; 0x5c
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	08003f63 	.word	0x08003f63
 8003c8c:	08003e07 	.word	0x08003e07

08003c90 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b08f      	sub	sp, #60	; 0x3c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9c:	2b21      	cmp	r3, #33	; 0x21
 8003c9e:	d14c      	bne.n	8003d3a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d132      	bne.n	8003d12 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ccc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e6      	bne.n	8003cac <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6979      	ldr	r1, [r7, #20]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e6      	bne.n	8003cde <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d10:	e013      	b.n	8003d3a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d3a:	bf00      	nop
 8003d3c:	373c      	adds	r7, #60	; 0x3c
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b091      	sub	sp, #68	; 0x44
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d151      	bne.n	8003dfa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d132      	bne.n	8003dc8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	633b      	str	r3, [r7, #48]	; 0x30
 8003d82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e6      	bne.n	8003d94 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003dc6:	e018      	b.n	8003dfa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003dfa:	bf00      	nop
 8003dfc:	3744      	adds	r7, #68	; 0x44
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b096      	sub	sp, #88	; 0x58
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1c:	2b22      	cmp	r3, #34	; 0x22
 8003e1e:	f040 8094 	bne.w	8003f4a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e30:	b2d9      	uxtb	r1, r3
 8003e32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d177      	bne.n	8003f5a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e6      	bne.n	8003e6a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ebc:	633a      	str	r2, [r7, #48]	; 0x30
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d12e      	bne.n	8003f42 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	617b      	str	r3, [r7, #20]
   return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e6      	bne.n	8003eea <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d103      	bne.n	8003f32 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff f9c0 	bl	80032c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f40:	e00b      	b.n	8003f5a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc ff0c 	bl	8000d60 <HAL_UART_RxCpltCallback>
}
 8003f48:	e007      	b.n	8003f5a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0208 	orr.w	r2, r2, #8
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	3758      	adds	r7, #88	; 0x58
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b096      	sub	sp, #88	; 0x58
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f78:	2b22      	cmp	r3, #34	; 0x22
 8003f7a:	f040 8094 	bne.w	80040a6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f8e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003f92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f96:	4013      	ands	r3, r2
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	1c9a      	adds	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d177      	bne.n	80040b6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	61fb      	str	r3, [r7, #28]
   return(result);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	2b01      	cmp	r3, #1
 800403e:	d12e      	bne.n	800409e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	60bb      	str	r3, [r7, #8]
   return(result);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f023 0310 	bic.w	r3, r3, #16
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6979      	ldr	r1, [r7, #20]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	613b      	str	r3, [r7, #16]
   return(result);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e6      	bne.n	8004046 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	d103      	bne.n	800408e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2210      	movs	r2, #16
 800408c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff f912 	bl	80032c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800409c:	e00b      	b.n	80040b6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fc fe5e 	bl	8000d60 <HAL_UART_RxCpltCallback>
}
 80040a4:	e007      	b.n	80040b6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0208 	orr.w	r2, r2, #8
 80040b4:	619a      	str	r2, [r3, #24]
}
 80040b6:	bf00      	nop
 80040b8:	3758      	adds	r7, #88	; 0x58
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4d0d      	ldr	r5, [pc, #52]	; (80040f8 <__libc_init_array+0x38>)
 80040c4:	4c0d      	ldr	r4, [pc, #52]	; (80040fc <__libc_init_array+0x3c>)
 80040c6:	1b64      	subs	r4, r4, r5
 80040c8:	10a4      	asrs	r4, r4, #2
 80040ca:	2600      	movs	r6, #0
 80040cc:	42a6      	cmp	r6, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	4d0b      	ldr	r5, [pc, #44]	; (8004100 <__libc_init_array+0x40>)
 80040d2:	4c0c      	ldr	r4, [pc, #48]	; (8004104 <__libc_init_array+0x44>)
 80040d4:	f000 f846 	bl	8004164 <_init>
 80040d8:	1b64      	subs	r4, r4, r5
 80040da:	10a4      	asrs	r4, r4, #2
 80040dc:	2600      	movs	r6, #0
 80040de:	42a6      	cmp	r6, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e8:	4798      	blx	r3
 80040ea:	3601      	adds	r6, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f2:	4798      	blx	r3
 80040f4:	3601      	adds	r6, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	080041f8 	.word	0x080041f8
 80040fc:	080041f8 	.word	0x080041f8
 8004100:	080041f8 	.word	0x080041f8
 8004104:	080041fc 	.word	0x080041fc

08004108 <memset>:
 8004108:	4402      	add	r2, r0
 800410a:	4603      	mov	r3, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <strncmp>:
 8004118:	b510      	push	{r4, lr}
 800411a:	b16a      	cbz	r2, 8004138 <strncmp+0x20>
 800411c:	3901      	subs	r1, #1
 800411e:	1884      	adds	r4, r0, r2
 8004120:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004124:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004128:	4293      	cmp	r3, r2
 800412a:	d103      	bne.n	8004134 <strncmp+0x1c>
 800412c:	42a0      	cmp	r0, r4
 800412e:	d001      	beq.n	8004134 <strncmp+0x1c>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f5      	bne.n	8004120 <strncmp+0x8>
 8004134:	1a98      	subs	r0, r3, r2
 8004136:	bd10      	pop	{r4, pc}
 8004138:	4610      	mov	r0, r2
 800413a:	e7fc      	b.n	8004136 <strncmp+0x1e>

0800413c <strncpy>:
 800413c:	b510      	push	{r4, lr}
 800413e:	3901      	subs	r1, #1
 8004140:	4603      	mov	r3, r0
 8004142:	b132      	cbz	r2, 8004152 <strncpy+0x16>
 8004144:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004148:	f803 4b01 	strb.w	r4, [r3], #1
 800414c:	3a01      	subs	r2, #1
 800414e:	2c00      	cmp	r4, #0
 8004150:	d1f7      	bne.n	8004142 <strncpy+0x6>
 8004152:	441a      	add	r2, r3
 8004154:	2100      	movs	r1, #0
 8004156:	4293      	cmp	r3, r2
 8004158:	d100      	bne.n	800415c <strncpy+0x20>
 800415a:	bd10      	pop	{r4, pc}
 800415c:	f803 1b01 	strb.w	r1, [r3], #1
 8004160:	e7f9      	b.n	8004156 <strncpy+0x1a>
	...

08004164 <_init>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr

08004170 <_fini>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	bf00      	nop
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr
